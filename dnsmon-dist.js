/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

var dateFormat = function () {
    var	token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
        timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
        timezoneClip = /[^-+\dA-Z]/g,
        pad = function (val, len) {
            val = String(val);
            len = len || 2;
            while (val.length < len) val = "0" + val;
            return val;
        };

    // Regexes and supporting functions are cached through closure
    return function (date, mask, utc) {
        var dF = dateFormat;

        // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
        if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
            mask = date;
            date = undefined;
        }

        // Passing date through Date applies Date.parse, if necessary
        date = date ? new Date(date) : new Date;
        if (isNaN(date)) throw SyntaxError("invalid date");

        mask = String(dF.masks[mask] || mask || dF.masks["default"]);

        // Allow setting the utc argument via the mask
        if (mask.slice(0, 4) == "UTC:") {
            mask = mask.slice(4);
            utc = true;
        }

        var	_ = utc ? "getUTC" : "get",
            d = date[_ + "Date"](),
            D = date[_ + "Day"](),
            m = date[_ + "Month"](),
            y = date[_ + "FullYear"](),
            H = date[_ + "Hours"](),
            M = date[_ + "Minutes"](),
            s = date[_ + "Seconds"](),
            L = date[_ + "Milliseconds"](),
            o = utc ? 0 : date.getTimezoneOffset(),
            flags = {
                d:    d,
                dd:   pad(d),
                ddd:  dF.i18n.dayNames[D],
                dddd: dF.i18n.dayNames[D + 7],
                m:    m + 1,
                mm:   pad(m + 1),
                mmm:  dF.i18n.monthNames[m],
                mmmm: dF.i18n.monthNames[m + 12],
                yy:   String(y).slice(2),
                yyyy: y,
                h:    H % 12 || 12,
                hh:   pad(H % 12 || 12),
                H:    H,
                HH:   pad(H),
                M:    M,
                MM:   pad(M),
                s:    s,
                ss:   pad(s),
                l:    pad(L, 3),
                L:    pad(L > 99 ? Math.round(L / 10) : L),
                t:    H < 12 ? "a"  : "p",
                tt:   H < 12 ? "am" : "pm",
                T:    H < 12 ? "A"  : "P",
                TT:   H < 12 ? "AM" : "PM",
                Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
            };

        return mask.replace(token, function ($0) {
            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
    };
}();

// Some common format strings
dateFormat.masks = {
    "default":      "ddd mmm dd yyyy HH:MM:ss",
    shortDate:      "m/d/yy",
    mediumDate:     "mmm d, yyyy",
    longDate:       "mmmm d, yyyy",
    fullDate:       "dddd, mmmm d, yyyy",
    shortTime:      "h:MM TT",
    mediumTime:     "h:MM:ss TT",
    longTime:       "h:MM:ss TT Z",
    isoDate:        "yyyy-mm-dd",
    isoTime:        "HH:MM:ss",
    isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
    isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

// Internationalization strings
dateFormat.i18n = {
    dayNames: [
        "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
        "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
    ],
    monthNames: [
        "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
        "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
    ]
};

// For convenience...
Date.prototype.format = function (mask, utc) {
    return dateFormat(this, mask, utc);
};

define("lib.date-format", function(){});

define('env.utils',[
    "lib.date-format"
], function(){
    var locale;

    locale = {};
    /**
     * A collection of utilities
     */

    return {

        addMinutes: function (date, minutes) {
            return new Date(date.getTime() + (minutes * 60 * 1000));
        },

        subMinutes: function (date, minutes) {
            return new Date(date.getTime() - (minutes * 60 * 1000));
        },

        translate: function (pointsArray, vector) {
            var item, translatedArray;

            translatedArray = [];

            for (var n = 0, length = pointsArray.length; n < length; n++) {
                item = pointsArray[n];
                translatedArray.push({x: item.x + vector.x, y: item.y + vector.y});
            }
            return translatedArray;
        },

        computeColorScale: function (legend) {
            var mapOut, legendItem;

            mapOut = {valueRange: [], colorRange: []};

            for (var n = 0, length = legend.length; n < length; n++) {
                legendItem = legend[n];

                mapOut.valueRange = mapOut.valueRange.concat(legendItem.valueRange);
                mapOut.colorRange = mapOut.colorRange.concat(legendItem.colorRange);
            }
            return mapOut;
        },

        getLongestString: function (arrayOfStrings) {
            var maximum, item;

            maximum = -Infinity;
            for (var n = 0, length = arrayOfStrings.length; n < length; n++) {
                item = arrayOfStrings[n].length;

                if (maximum < item) {
                    maximum = item;
                }
            }

            return maximum;
        },

        writeSvgText: function (container, textArray, position, padding) {
            var textItem, actualPosition, interline, text;

            actualPosition = 0;
            interline = 15;

            container
                .selectAll("text")
                .remove();

            for (var n = 0, length = textArray.length; n < length; n++) {
                textItem = textArray[n];

                actualPosition = interline * n;

                container
                    .append("text")
                    .attr("class", "popup-text")
                    .attr("dx", position.x + padding.left)
                    .attr("dy", position.y + actualPosition + padding.top)
                    .text(textItem);
            }

            return text;
        },

        lightClone: function (toBeCloned) {
            var cloned, isArray;

            isArray = toBeCloned instanceof Array;

            if (isArray) {
                cloned = [];

                for (var n = 0, length = toBeCloned.length; n < length; n++) {
                    cloned.push(toBeCloned[n]);
                }

            } else {
                cloned = {};

                for (var item in toBeCloned) {
                    cloned[item] = toBeCloned[item];
                }
            }

            return cloned;
        },

        log: function (text, debug) {
            if (debug) {
                console.log(new Date(), text);
            }
        },

        getUrlParam: function (key) {
            var regex, result, match, url;
            url = document.location.search;
            regex = new RegExp('(?:\\?|&)' + key + '=(.*?)(?=&|$)', 'gi');
            result = [];

            while ((match = regex.exec(url)) != null) {
                result.push(match[1]);
            }
            return result;
        },

        indexOf: function (element, array) {
            var index = -1;

            if (array.indexOf) {
                index = array.indexOf(element);
            } else {

                for (var n = 0, length = array.length; n < length; n++) {
                    if (array[n] == element) {
                        index = n;
                        break;
                    }
                }
            }
            return index;
        },

        encapsulateDom: function (jQuerySelection) {
            return {$: jQuerySelection, plain: jQuerySelection[0]};
        },

        loadStylesheets: function (cssFiles, callback) {
            var cssRequested, stylesLoaded, cssListenerInterval, cssListenerTimeout, cssListener;

            stylesLoaded = document.styleSheets.length; // Initial css loaded
            cssRequested = cssFiles.length; // css to load

            for (var n=0; n<cssRequested; n++){ // load css
                this.loadCss(cssFiles[n]);
            }

            cssListenerInterval = 50; //50 ms
            cssListenerTimeout = 10000; // 10 secs
            cssListener = setInterval(function(){

                if(document.styleSheets.length >= stylesLoaded + cssRequested){ // check if all the css are loaded
                    clearInterval(cssListener);
                    callback();
                }else{
                    if (cssListenerTimeout <= 0){
                        clearInterval(cssListener);
                        console.log("It is not possible to load stylesheets.");
                    }
                    cssListenerTimeout -= cssListenerInterval;
                }
            }, cssListenerInterval);
        },

        loadCss: function (cssFile) {
            var newLink;

            newLink = document.createElement('link');
            newLink.rel = 'stylesheet';
            newLink.type = 'text/css';
            newLink.href = cssFile;
            newLink.async = true;
            (document.head || document.getElementsByTagName("head")[0]).appendChild(newLink);
        },

        getRectangularVertexPoints: function (x, y, width, height) {
            var leftTop, leftBottom, rightTop, rightBottom;

            leftTop = {x: x, y: y};
            leftBottom = {x: x, y: y + height};

            rightTop = {x: x + width, y: y};
            rightBottom = {x: x + width, y: y + height};

            return [leftTop, rightTop, rightBottom, leftBottom]; //returned clockwise
        },

        isThereAnIntersection: function (selectionVertices, cellVertices) {
            var a, b, c, d, e, f, g, h, thereIsAnIntersection, cellCenter, isSelectionStartingInARect, isSelectionEndingInARect,
                intersectionPoint;

            a = selectionVertices[0];
            b = selectionVertices[1];
            c = selectionVertices[2];
            d = selectionVertices[3];

            e = cellVertices[0];
            f = cellVertices[1];
            g = cellVertices[2];
            h = cellVertices[3];

            intersectionPoint = this.getLinesIntersection(a, b, e, h);

            function isPointInside(a, b, c, d, p) {
                return p.x >= a.x && p.x <= b.x && p.y >= a.y && p.y <= d.y;
            }

            // Don't declare the single items in dedicated vars in order to calculate them only if needed
            thereIsAnIntersection =
                isPointInside(e, f, g, h, a) || //Is It starting in a rect?
                isPointInside(a, b, c, d, this.getRectangleCenter(e, f, g, h)) ||
                isPointInside(a, b, c, d, e) ||
                isPointInside(a, b, c, d, h) ||
                isPointInside(a, b, c, d, g) ||
                isPointInside(a, b, c, d, f) ||
                isPointInside(e, f, g, h, c) || //Is it ending in a rect?
                (intersectionPoint != null);

            return thereIsAnIntersection;
        },

        getLinesIntersection: function (a, b, c, d) {

            /// "unroll" the objects
            var p0x = a.x,
                p0y = a.y,
                p1x = b.x,
                p1y = b.y,
                p2x = c.x,
                p2y = c.y,
                p3x = d.x,
                p3y = d.y,

            /// calc difference between the coords
                d1x = p1x - p0x,
                d1y = p1y - p0y,
                d2x = p3x - p2x,
                d2y = p3y - p2y,

            /// determinator
                d = d1x * d2y - d2x * d1y,

                px, py,
                s, t;

            /// if is not intersecting/is parallel then return immediately
            if (d == 0.0)
                return null;

            /// solve x and y for intersecting point
            px = p0x - p2x;
            py = p0y - p2y;

            s = (d1x * py - d1y * px) / d;
            if (s >= 0 && s <= 1) {

                /// if s was in range, calc t
                t = (d2x * py - d2y * px) / d;
                if (t >= 0 && t <= 1) {

                    return {x: p0x + (t * d1x),
                        y: p0y + (t * d1y)}
                }
            }

            return null;
        },

        getRectangleCenter: function (a, b, c, d) {
            var x, y;
            x = ((b.x - a.x) / 2) + a.x;
            y = ((d.y - a.y) / 2) + a.y;

            return {x: x, y: y};
        },

        join: function (array, char) {
            var stringOut = "";
            if (array.join) {
                stringOut = array.join(char);
            } else {

                for (var n = 0, length = array.length; n < length; n++) {
                    stringOut += array[n];
                    if (n != length - 1) {
                        stringOut += '' + char;
                    }
                }
            }

            return stringOut;
        },

        split: function (string, char, skipEmpty) {
            var arrayOut, item, tmp;

            arrayOut = string.split(char);

            if (skipEmpty) {

                tmp = [];

                for (var n = 0, length = arrayOut.length; n < length; n++) {
                    item = arrayOut[n];
                    if (item != '') {
                        tmp.push(item);
                    }
                }

                arrayOut = tmp;
            }

            return arrayOut;
        },

        logOnce: function (log) {
            if (!window.once) {
                window.once = true;
                this.log(log);
            }
        },

        reduceCalls: function (reductionId, reductionFactor) {
            var callNow;
            callNow = false;
            if (!window.reductionCallsCounters) {
                window.reductionCallsCounters = {};
            }

            if (window.reductionCallsCounters[reductionId] == null) {
                window.reductionCallsCounters[reductionId] = reductionFactor;
            }

            if (window.reductionCallsCounters[reductionId] == 0) {
                callNow = true;
                window.reductionCallsCounters[reductionId] = reductionFactor
            } else {
                window.reductionCallsCounters[reductionId]--;
            }

            return callNow;
        },

        timestampToUTCDate: function (timestamp) {
            var date = new Date(timestamp * 1000);
            return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
        },

        getInstanceSuffix: function (domName) {
            var suffix;

            suffix = domName.replace('.', '');
            suffix = suffix.replace('#', '');

            return suffix;
        },

        getUrlParameters: function (domName) { // Get a map composed of ALL the parameters
            var map, suffix, parts, subElements, atLeastOne;

            map = {};
            atLeastOne = false;
            suffix = this.getInstanceSuffix(domName) + '.';

            parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {

                key = key.toString().replace(suffix, ''); // Creates the map removing the suffix

                if (key.indexOf('.') != -1) {
                    subElements = key.split('.');
                    if (!map[subElements[0]]) {
                        map[subElements[0]] = {};
                    }
                    map[subElements[0]][subElements[1]] = value;
                } else {
                    map[key] = value;
                }

                atLeastOne = true;
            });

            return (atLeastOne) ? map : null;
        },

        mergeMaps: function (map1, map2) {
            var mapOut;

            mapOut = {};

            for (var key in map1) {
                mapOut[key] = map1[key];
            }

            for (var key in map2) {
                mapOut[key] = map2[key];
            }

            return mapOut;
        },

        isNumber: function (n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
        },

        dateToString: function (date) { //This is an indirection, may be useful in the future to manipulate dates
            return "" + date.getUTCFullYear() +
                "-" + ('0' + (date.getUTCMonth() + 1)).slice(-2) +
                "-" + ('0' + date.getUTCDate()).slice(-2) +
                " " + ('0' + date.getUTCHours()).slice(-2) +
                ":" + ('0' + date.getUTCMinutes()).slice(-2) +
                ":" + ('0' + date.getUTCSeconds()).slice(-2) +
                " UTC";
        },

        dateToStringShort: function (date) { //This is an indirection, may be useful in the future to manipulate dates
            return "" + date.getUTCFullYear() +
                "-" + ('0' + (date.getUTCMonth() + 1)).slice(-2) +
                "-" + ('0' + date.getUTCDate()).slice(-2) +
                " " + ('0' + date.getUTCHours()).slice(-2) +
                ":" + ('0' + date.getUTCMinutes()).slice(-2);
        },

        timestampToLocalDate: function (timestamp) {
            var date;
            date = new Date(timestamp * 1000);
            return date;
        },

        localDateToUTCDate: function (date) {
            var utcDate;

            utcDate = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());

            return utcDate;
        },

        UTCDateToLocalDate: function (date) {
            return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));
        },

        dateToUTCTimestamp: function (date) {
            return Math.ceil(date.getTime() / 1000);
//            return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(),  date.getHours(), date.getMinutes(), date.getSeconds())).getTime()/1000;
        },

        callCallbacks: function (list, parameters) {
            var item;

            for (var n = 0, length = list.length; n < length; n++) {
                item = list[n];
                item.call(this, parameters);
            }
        },

        getCurrentUrl: function () {
            return window.location.href;
        },

        setParam: function (key, value, url) {
            var baseUrl, paramsUrl, pair, query, pairs, keyTmp, valueTmp, newPairs, inserted, questionMarkPosition,
                itemUrl;

            newPairs = [];
            inserted = false;

            if (url) {
                questionMarkPosition = url.indexOf('?');
                if (questionMarkPosition == -1) {
                    baseUrl = url;
                    paramsUrl = '';
                } else {
                    baseUrl = url.substring(0, questionMarkPosition);
                    paramsUrl = url.substring(questionMarkPosition + 1, url.length);
                }
            } else {
                baseUrl = '';
                paramsUrl = '';
            }

            pairs = paramsUrl.split('&');

            for (var n = 0, length = pairs.length; n < length; n++) {
                itemUrl = pairs[n];

                if (itemUrl != "") {
                    pair = (itemUrl).split('=');

                    keyTmp = pair[0];
                    valueTmp = pair[1];

                    if (keyTmp == key) {
                        if (value != null && value != '') {
                            newPairs.push(keyTmp + "=" + value);
                        }
                        inserted = true;
                    } else {
                        newPairs.push(keyTmp + "=" + valueTmp);
                    }
                }
            }

            if (!inserted) {
                if (value != null && value != "") {
                    newPairs.push(key + "=" + value);
                }
            }

            query = this.join(newPairs, '&');

            return baseUrl + '?' + query;
        },

        containsAll: function (containerArray, containedArray) {
            var item;

            for (var n = 0, length = containedArray.length; n < length; n++) {
                item = containedArray[n];
                if (this.indexOf(item, containerArray) == -1) {
                    return false;
                }
            }

            return true;
        },

        objectSize: function (object) {
            var recurse, objectList, bytes;

            objectList = [];
            recurse = function (value) {
                bytes = 0;

                if (typeof value === 'boolean') {
                    bytes = 4;
                } else if (typeof value === 'string') {
                    bytes = value.length * 2;
                } else if (typeof value === 'number') {
                    bytes = 8;
                } else if (typeof value === 'object'
                    && objectList.indexOf(value) === -1) {
                    objectList[objectList.length] = value;
                    for (i in value) {
                        bytes += 8;
                        bytes += recurse(value[i]);
                    }
                }
                return bytes;
            };

            return recurse(object);
        },

        removeSubArray: function (mainArray, subArray) {
            var item, tmp;

            tmp = [];
            for (var n=0,length=mainArray.length; n<length; n++) {
                item = mainArray[n];
                if (subArray.indexOf(item) == -1){
                    tmp.push(item);
                }
            }

            return tmp;
        },

        validateIP: function(str){
            var ipv6TestRegEx, ipv4TestRegEx;

            ipv6TestRegEx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/;
            ipv4TestRegEx = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/;

            return ipv4TestRegEx.test(str) || ipv6TestRegEx.test(str);

//            return /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/.test(str);
        },

        isLocalStorageAvailable: function(){
            try {
                return 'localStorage' in window && window['localStorage'] !== null;
            } catch (e) {
                return false;
            }
        },

        getLocalData: function(key){
            var storedValue, storedExpiration;

            storedValue = localStorage[key];
            storedExpiration = localStorage['expirationDates-' + key];

            if (storedValue && (!storedExpiration || storedExpiration > (new Date()).getTime())){
                return storedValue;
            }

            return null;
        },

        setLocalData: function(key, data, expiration){
            try {

                localStorage[key] = data;
                localStorage['expirationDates-' + key] = expiration.getTime();

            } catch(error) {

                console.log('It was not possible to store the data: ' + error.toString());

                return false;
            }

            return true;
        },


        globalizeIfUndefined: function(what, where){
            for (var n=0,length=where.length; n<length; n++){
                if (typeof window[where[n]] == 'undefined'){
                    window[where[n]] = what;
                }
            }
        },


        getBrowserVersion: function(){

            if (!locale.browser) {
                locale.browser = (function () {
                    var userAgent, appName, matched, tem;
                    userAgent = navigator.userAgent;
                    appName = navigator.appName;
                    matched = userAgent.match(/(opera|chrome|safari|firefox|msie|trident|Windows Phone|BlackBerry|Opera Mini|IEMobile|iPhone|iPad|iPod|webOS|Android)\/?\s*([\d\.]+)/i) || [];
                    matched = matched[2] ? [matched[1], matched[2]] : [appName, navigator.appVersion, '-?'];
                    if (matched && (tem = userAgent.match(/version\/([\.\d]+)/i)) != null) matched[2] = tem[1];
                    return {name: matched[0], version: matched[1].split('.')};
                })();
            }

            return locale.browser;
        },


        logErrors: function(callback){
            if (callback){
                window.onerror = function errorUnwrapper(errorMsg, url, lineNumber) {
                    return callback("error", errorMsg + ' at ' + url + ' on line ' + lineNumber);
                }
            } else {
                window.onerror = null;
            }
        },

        clearObject: function(objToBeCleaned){
            for (var objKey in objToBeCleaned){
                objToBeCleaned[objKey] = null;
                delete objToBeCleaned[objKey];
            }
        }

    }
});
/**
 * Created by mcandela on 23/01/14.
 */


define('env.languages.en',[], function(){
  return {
    aggregationLevelLabel: "Data resolution",
//        packetLossRangesLabel: "Unanswered queries colours range:",
    packetLossLabel: "Unanswered queries",
    responseTimeLabel: "Response time",
    forwardTitle: "Get the latest results",
    relativeResponseTimeLabel: "Relative response time",
    viewSelectboxTitle: "Inspect the same situation from another point of view",
    numberProbesLabel: "Number of probes",
    startDateLabel: "Start date:",
    endDateLabel: "End date:",
    changeTimeWindowTitle: "Change time window",
    changeColorsRangeTitle: "Change colours range",
    shiftLeftTitle: "Shift the time window left",
    shiftRightTitle: "Shift the time window right",
    zoomInTitle: "Zoom in",
    zoomOutTitle: "Zoom out",
    closestTracerouteLabel: "Closest traceroutes before and after the selected cell (enlarge the dialog to compare):",
    allRowsTitle: "Display all rows",
    serverLevelLabel: "server",
    zoneLevelLabel: "zone",
    malformedDataset: "Sorry, malformed input data",
    serverSlowMessage: "Sorry, the server is responding slowly",
    connectionFailed: "Sorry, it is impossible to connect to the server",
    lastQueryFails: "Last query failed; the current visualisation is not up to date",
    waitingConnection: "Waiting for connection",
    filtersPopupTitle: "Filters",
    excludeErrorsFilterLabel: "Exclude errors (exclude rcodes != 0)",

    pressToApply: "Press Enter to apply",
    extraInfoDialogTitle: "Result details",

    keepUpdatedTitle: "Continually update results",
    keepUpdatedNotActive: "Auto refresh disabled",
    keepUpdatedActive: "Auto refresh enabled",
    extraInfoDialogTextSample: "Data for the selected cell",
    extraInfoDialogTextOverview: "Measurement overview on RIPE Atlas",
    minimumTimeSelectionReached: "Sorry, minimum time window reached",
    fromTimeRange: "From:",
    toTimeRange: "To:",
    lastUpdateAt: "Last update:",
    aggregationLevelTitle: "Data resolution describes the amount of time represented by one cell",
    dnsResponsePrbId: "Probe ID",
    dnsResponseRt: "Response time",
    dnsResponseNsId: "NSID",
    dnsResponseDate: "Date",
    notYourConfig: "This permalink is temporarily overriding your personal configurations",
    fullScreenTitle: "Full screen",


    minimumSelectionImposed: "Sorry, the selection was too small    ",
    tooZoomedMessage: "Sorry, we don't have more details. Try to click on a row's name",
    clickToRemoveRow: "Click on a row's name to exclude it from the displayed results",
    bottomInfoSection: "Use your mouse wheel or click and drag a selection to zoom, press the left/right arrow keys to shift the time window, press the shift key to remove rows from the displayed results",

    noDataForRow: "We don't have data for this server in the selected time period",

    hostBindResponsePrbId: "Probe ID",
    hostBindResponseRt: "Response time",
    hostBindResponseMsmId: "Measurement ID",
    hostBindResponseDate: "Date",
    hostBindResponseNoAnswer: "The response has no answer",

    tab1Title: 'DNS response',
    tab2Title: 'Traceroute',
    tab3Title: 'hostname.bind',

    thresholdsDescritions: {
      pls: "Change the unanswered queries colours range: these thresholds are used to colours the cells based on the percentage of packets lost.",
      rtt: "Change the response time colours range: these thresholds are used to colours the cells based on the response time.",
      "relative-rtt": "Change the relative response time colours range: these thresholds are used to colours the cells based on the increase in the response time related to the minimum available for the row."
    },


    /*not revised*/
    filterSelectionTitle: "Filter the represented data:",

    protocol3SelectionFilterLabel: "Layer 3 protocol",
    protocol4SelectionFilterLabel: "Layer 4 protocol"
  }
});
define('lib.jquery-libs',[],function(){!function(t,e){function i(t){var e=t.length,i=ue.type(t);return ue.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===i||"function"!==i&&(0===e||"number"==typeof e&&e>0&&e-1 in t)}function n(t){var e=Ce[t]={};return ue.each(t.match(de)||[],function(t,i){e[i]=!0}),e}function s(t,i,n,s){if(ue.acceptData(t)){var a,o,r=ue.expando,l=t.nodeType,h=l?ue.cache:t,u=l?t[r]:t[r]&&r;if(u&&h[u]&&(s||h[u].data)||n!==e||"string"!=typeof i)return u||(u=l?t[r]=ee.pop()||ue.guid++:r),h[u]||(h[u]=l?{}:{toJSON:ue.noop}),("object"==typeof i||"function"==typeof i)&&(s?h[u]=ue.extend(h[u],i):h[u].data=ue.extend(h[u].data,i)),o=h[u],s||(o.data||(o.data={}),o=o.data),n!==e&&(o[ue.camelCase(i)]=n),"string"==typeof i?(a=o[i],null==a&&(a=o[ue.camelCase(i)])):a=o,a}}function a(t,e,i){if(ue.acceptData(t)){var n,s,a=t.nodeType,o=a?ue.cache:t,l=a?t[ue.expando]:ue.expando;if(o[l]){if(e&&(n=i?o[l]:o[l].data)){ue.isArray(e)?e=e.concat(ue.map(e,ue.camelCase)):e in n?e=[e]:(e=ue.camelCase(e),e=e in n?[e]:e.split(" ")),s=e.length;for(;s--;)delete n[e[s]];if(i?!r(n):!ue.isEmptyObject(n))return}(i||(delete o[l].data,r(o[l])))&&(a?ue.cleanData([t],!0):ue.support.deleteExpando||o!=o.window?delete o[l]:o[l]=null)}}}function o(t,i,n){if(n===e&&1===t.nodeType){var s="data-"+i.replace(Me,"-$1").toLowerCase();if(n=t.getAttribute(s),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:Te.test(n)?ue.parseJSON(n):n}catch(a){}ue.data(t,i,n)}else n=e}return n}function r(t){var e;for(e in t)if(("data"!==e||!ue.isEmptyObject(t[e]))&&"toJSON"!==e)return!1;return!0}function l(){return!0}function h(){return!1}function u(){try{return Q.activeElement}catch(t){}}function c(t,e){do t=t[e];while(t&&1!==t.nodeType);return t}function d(t,e,i){if(ue.isFunction(e))return ue.grep(t,function(t,n){return!!e.call(t,n,t)!==i});if(e.nodeType)return ue.grep(t,function(t){return t===e!==i});if("string"==typeof e){if(Re.test(e))return ue.filter(e,t,i);e=ue.filter(e,t)}return ue.grep(t,function(t){return ue.inArray(t,e)>=0!==i})}function p(t){var e=Ue.split("|"),i=t.createDocumentFragment();if(i.createElement)for(;e.length;)i.createElement(e.pop());return i}function f(t,e){return ue.nodeName(t,"table")&&ue.nodeName(1===e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function m(t){return t.type=(null!==ue.find.attr(t,"type"))+"/"+t.type,t}function g(t){var e=si.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function v(t,e){for(var i,n=0;null!=(i=t[n]);n++)ue._data(i,"globalEval",!e||ue._data(e[n],"globalEval"))}function _(t,e){if(1===e.nodeType&&ue.hasData(t)){var i,n,s,a=ue._data(t),o=ue._data(e,a),r=a.events;if(r){delete o.handle,o.events={};for(i in r)for(n=0,s=r[i].length;s>n;n++)ue.event.add(e,i,r[i][n])}o.data&&(o.data=ue.extend({},o.data))}}function b(t,e){var i,n,s;if(1===e.nodeType){if(i=e.nodeName.toLowerCase(),!ue.support.noCloneEvent&&e[ue.expando]){s=ue._data(e);for(n in s.events)ue.removeEvent(e,n,s.handle);e.removeAttribute(ue.expando)}"script"===i&&e.text!==t.text?(m(e).text=t.text,g(e)):"object"===i?(e.parentNode&&(e.outerHTML=t.outerHTML),ue.support.html5Clone&&t.innerHTML&&!ue.trim(e.innerHTML)&&(e.innerHTML=t.innerHTML)):"input"===i&&ei.test(t.type)?(e.defaultChecked=e.checked=t.checked,e.value!==t.value&&(e.value=t.value)):"option"===i?e.defaultSelected=e.selected=t.defaultSelected:("input"===i||"textarea"===i)&&(e.defaultValue=t.defaultValue)}}function y(t,i){var n,s,a=0,o=typeof t.getElementsByTagName!==V?t.getElementsByTagName(i||"*"):typeof t.querySelectorAll!==V?t.querySelectorAll(i||"*"):e;if(!o)for(o=[],n=t.childNodes||t;null!=(s=n[a]);a++)!i||ue.nodeName(s,i)?o.push(s):ue.merge(o,y(s,i));return i===e||i&&ue.nodeName(t,i)?ue.merge([t],o):o}function x(t){ei.test(t.type)&&(t.defaultChecked=t.checked)}function w(t,e){if(e in t)return e;for(var i=e.charAt(0).toUpperCase()+e.slice(1),n=e,s=Di.length;s--;)if(e=Di[s]+i,e in t)return e;return n}function k(t,e){return t=e||t,"none"===ue.css(t,"display")||!ue.contains(t.ownerDocument,t)}function D(t,e){for(var i,n,s,a=[],o=0,r=t.length;r>o;o++)n=t[o],n.style&&(a[o]=ue._data(n,"olddisplay"),i=n.style.display,e?(a[o]||"none"!==i||(n.style.display=""),""===n.style.display&&k(n)&&(a[o]=ue._data(n,"olddisplay",S(n.nodeName)))):a[o]||(s=k(n),(i&&"none"!==i||!s)&&ue._data(n,"olddisplay",s?i:ue.css(n,"display"))));for(o=0;r>o;o++)n=t[o],n.style&&(e&&"none"!==n.style.display&&""!==n.style.display||(n.style.display=e?a[o]||"":"none"));return t}function C(t,e,i){var n=vi.exec(e);return n?Math.max(0,n[1]-(i||0))+(n[2]||"px"):e}function T(t,e,i,n,s){for(var a=i===(n?"border":"content")?4:"width"===e?1:0,o=0;4>a;a+=2)"margin"===i&&(o+=ue.css(t,i+ki[a],!0,s)),n?("content"===i&&(o-=ue.css(t,"padding"+ki[a],!0,s)),"margin"!==i&&(o-=ue.css(t,"border"+ki[a]+"Width",!0,s))):(o+=ue.css(t,"padding"+ki[a],!0,s),"padding"!==i&&(o+=ue.css(t,"border"+ki[a]+"Width",!0,s)));return o}function M(t,e,i){var n=!0,s="width"===e?t.offsetWidth:t.offsetHeight,a=ui(t),o=ue.support.boxSizing&&"border-box"===ue.css(t,"boxSizing",!1,a);if(0>=s||null==s){if(s=ci(t,e,a),(0>s||null==s)&&(s=t.style[e]),_i.test(s))return s;n=o&&(ue.support.boxSizingReliable||s===t.style[e]),s=parseFloat(s)||0}return s+T(t,e,i||(o?"border":"content"),n,a)+"px"}function S(t){var e=Q,i=yi[t];return i||(i=I(t,e),"none"!==i&&i||(hi=(hi||ue("<iframe frameborder='0' width='0' height='0'/>").css("cssText","display:block !important")).appendTo(e.documentElement),e=(hi[0].contentWindow||hi[0].contentDocument).document,e.write("<!doctype html><html><body>"),e.close(),i=I(t,e),hi.detach()),yi[t]=i),i}function I(t,e){var i=ue(e.createElement(t)).appendTo(e.body),n=ue.css(i[0],"display");return i.remove(),n}function N(t,e,i,n){var s;if(ue.isArray(e))ue.each(e,function(e,s){i||Ti.test(t)?n(t,s):N(t+"["+("object"==typeof s?e:"")+"]",s,i,n)});else if(i||"object"!==ue.type(e))n(t,e);else for(s in e)N(t+"["+s+"]",e[s],i,n)}function P(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,s=0,a=e.toLowerCase().match(de)||[];if(ue.isFunction(i))for(;n=a[s++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function z(t,i,n,s){function a(l){var h;return o[l]=!0,ue.each(t[l]||[],function(t,l){var u=l(i,n,s);return"string"!=typeof u||r||o[u]?r?!(h=u):e:(i.dataTypes.unshift(u),a(u),!1)}),h}var o={},r=t===Bi;return a(i.dataTypes[0])||!o["*"]&&a("*")}function A(t,i){var n,s,a=ue.ajaxSettings.flatOptions||{};for(s in i)i[s]!==e&&((a[s]?t:n||(n={}))[s]=i[s]);return n&&ue.extend(!0,t,n),t}function E(t,i,n){for(var s,a,o,r,l=t.contents,h=t.dataTypes;"*"===h[0];)h.shift(),a===e&&(a=t.mimeType||i.getResponseHeader("Content-Type"));if(a)for(r in l)if(l[r]&&l[r].test(a)){h.unshift(r);break}if(h[0]in n)o=h[0];else{for(r in n){if(!h[0]||t.converters[r+" "+h[0]]){o=r;break}s||(s=r)}o=o||s}return o?(o!==h[0]&&h.unshift(o),n[o]):e}function O(t,e,i,n){var s,a,o,r,l,h={},u=t.dataTypes.slice();if(u[1])for(o in t.converters)h[o.toLowerCase()]=t.converters[o];for(a=u.shift();a;)if(t.responseFields[a]&&(i[t.responseFields[a]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=a,a=u.shift())if("*"===a)a=l;else if("*"!==l&&l!==a){if(o=h[l+" "+a]||h["* "+a],!o)for(s in h)if(r=s.split(" "),r[1]===a&&(o=h[l+" "+r[0]]||h["* "+r[0]])){o===!0?o=h[s]:h[s]!==!0&&(a=r[0],u.unshift(r[1]));break}if(o!==!0)if(o&&t["throws"])e=o(e);else try{e=o(e)}catch(c){return{state:"parsererror",error:o?c:"No conversion from "+l+" to "+a}}}return{state:"success",data:e}}function H(){try{return new t.XMLHttpRequest}catch(e){}}function W(){try{return new t.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}function F(){return setTimeout(function(){Ji=e}),Ji=ue.now()}function j(t,e,i){for(var n,s=(an[e]||[]).concat(an["*"]),a=0,o=s.length;o>a;a++)if(n=s[a].call(i,e,t))return n}function $(t,e,i){var n,s,a=0,o=sn.length,r=ue.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=Ji||F(),i=Math.max(0,h.startTime+h.duration-e),n=i/h.duration||0,a=1-n,o=0,l=h.tweens.length;l>o;o++)h.tweens[o].run(a);return r.notifyWith(t,[h,a,i]),1>a&&l?i:(r.resolveWith(t,[h]),!1)},h=r.promise({elem:t,props:ue.extend({},e),opts:ue.extend(!0,{specialEasing:{}},i),originalProperties:e,originalOptions:i,startTime:Ji||F(),duration:i.duration,tweens:[],createTween:function(e,i){var n=ue.Tween(t,h.opts,e,i,h.opts.specialEasing[e]||h.opts.easing);return h.tweens.push(n),n},stop:function(e){var i=0,n=e?h.tweens.length:0;if(s)return this;for(s=!0;n>i;i++)h.tweens[i].run(1);return e?r.resolveWith(t,[h,e]):r.rejectWith(t,[h,e]),this}}),u=h.props;for(L(u,h.opts.specialEasing);o>a;a++)if(n=sn[a].call(h,t,u,h.opts))return n;return ue.map(u,j,h),ue.isFunction(h.opts.start)&&h.opts.start.call(t,h),ue.fx.timer(ue.extend(l,{elem:t,anim:h,queue:h.opts.queue})),h.progress(h.opts.progress).done(h.opts.done,h.opts.complete).fail(h.opts.fail).always(h.opts.always)}function L(t,e){var i,n,s,a,o;for(i in t)if(n=ue.camelCase(i),s=e[n],a=t[i],ue.isArray(a)&&(s=a[1],a=t[i]=a[0]),i!==n&&(t[n]=a,delete t[i]),o=ue.cssHooks[n],o&&"expand"in o){a=o.expand(a),delete t[n];for(i in a)i in t||(t[i]=a[i],e[i]=s)}else e[n]=s}function R(t,e,i){var n,s,a,o,r,l,h=this,u={},c=t.style,d=t.nodeType&&k(t),p=ue._data(t,"fxshow");i.queue||(r=ue._queueHooks(t,"fx"),null==r.unqueued&&(r.unqueued=0,l=r.empty.fire,r.empty.fire=function(){r.unqueued||l()}),r.unqueued++,h.always(function(){h.always(function(){r.unqueued--,ue.queue(t,"fx").length||r.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(i.overflow=[c.overflow,c.overflowX,c.overflowY],"inline"===ue.css(t,"display")&&"none"===ue.css(t,"float")&&(ue.support.inlineBlockNeedsLayout&&"inline"!==S(t.nodeName)?c.zoom=1:c.display="inline-block")),i.overflow&&(c.overflow="hidden",ue.support.shrinkWrapBlocks||h.always(function(){c.overflow=i.overflow[0],c.overflowX=i.overflow[1],c.overflowY=i.overflow[2]}));for(n in e)if(s=e[n],tn.exec(s)){if(delete e[n],a=a||"toggle"===s,s===(d?"hide":"show"))continue;u[n]=p&&p[n]||ue.style(t,n)}if(!ue.isEmptyObject(u)){p?"hidden"in p&&(d=p.hidden):p=ue._data(t,"fxshow",{}),a&&(p.hidden=!d),d?ue(t).show():h.done(function(){ue(t).hide()}),h.done(function(){var e;ue._removeData(t,"fxshow");for(e in u)ue.style(t,e,u[e])});for(n in u)o=j(d?p[n]:0,n,h),n in p||(p[n]=o.start,d&&(o.end=o.start,o.start="width"===n||"height"===n?1:0))}}function B(t,e,i,n,s){return new B.prototype.init(t,e,i,n,s)}function q(t,e){var i,n={height:t},s=0;for(e=e?1:0;4>s;s+=2-e)i=ki[s],n["margin"+i]=n["padding"+i]=t;return e&&(n.opacity=n.width=t),n}function Y(t){return ue.isWindow(t)?t:9===t.nodeType?t.defaultView||t.parentWindow:!1}var U,K,V=typeof e,X=t.location,Q=t.document,G=Q.documentElement,J=t.jQuery,Z=t.$,te={},ee=[],ie="1.10.2",ne=ee.concat,se=ee.push,ae=ee.slice,oe=ee.indexOf,re=te.toString,le=te.hasOwnProperty,he=ie.trim,ue=function(t,e){return new ue.fn.init(t,e,K)},ce=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,de=/\S+/g,pe=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,fe=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,me=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,ge=/^[\],:{}\s]*$/,ve=/(?:^|:|,)(?:\s*\[)+/g,_e=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,be=/"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,ye=/^-ms-/,xe=/-([\da-z])/gi,we=function(t,e){return e.toUpperCase()},ke=function(t){(Q.addEventListener||"load"===t.type||"complete"===Q.readyState)&&(De(),ue.ready())},De=function(){Q.addEventListener?(Q.removeEventListener("DOMContentLoaded",ke,!1),t.removeEventListener("load",ke,!1)):(Q.detachEvent("onreadystatechange",ke),t.detachEvent("onload",ke))};ue.fn=ue.prototype={jquery:ie,constructor:ue,init:function(t,i,n){var s,a;if(!t)return this;if("string"==typeof t){if(s="<"===t.charAt(0)&&">"===t.charAt(t.length-1)&&t.length>=3?[null,t,null]:fe.exec(t),!s||!s[1]&&i)return!i||i.jquery?(i||n).find(t):this.constructor(i).find(t);if(s[1]){if(i=i instanceof ue?i[0]:i,ue.merge(this,ue.parseHTML(s[1],i&&i.nodeType?i.ownerDocument||i:Q,!0)),me.test(s[1])&&ue.isPlainObject(i))for(s in i)ue.isFunction(this[s])?this[s](i[s]):this.attr(s,i[s]);return this}if(a=Q.getElementById(s[2]),a&&a.parentNode){if(a.id!==s[2])return n.find(t);this.length=1,this[0]=a}return this.context=Q,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):ue.isFunction(t)?n.ready(t):(t.selector!==e&&(this.selector=t.selector,this.context=t.context),ue.makeArray(t,this))},selector:"",length:0,toArray:function(){return ae.call(this)},get:function(t){return null==t?this.toArray():0>t?this[this.length+t]:this[t]},pushStack:function(t){var e=ue.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return ue.each(this,t,e)},ready:function(t){return ue.ready.promise().done(t),this},slice:function(){return this.pushStack(ae.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(0>t?e:0);return this.pushStack(i>=0&&e>i?[this[i]]:[])},map:function(t){return this.pushStack(ue.map(this,function(e,i){return t.call(e,i,e)}))},end:function(){return this.prevObject||this.constructor(null)},push:se,sort:[].sort,splice:[].splice},ue.fn.init.prototype=ue.fn,ue.extend=ue.fn.extend=function(){var t,i,n,s,a,o,r=arguments[0]||{},l=1,h=arguments.length,u=!1;for("boolean"==typeof r&&(u=r,r=arguments[1]||{},l=2),"object"==typeof r||ue.isFunction(r)||(r={}),h===l&&(r=this,--l);h>l;l++)if(null!=(a=arguments[l]))for(s in a)t=r[s],n=a[s],r!==n&&(u&&n&&(ue.isPlainObject(n)||(i=ue.isArray(n)))?(i?(i=!1,o=t&&ue.isArray(t)?t:[]):o=t&&ue.isPlainObject(t)?t:{},r[s]=ue.extend(u,o,n)):n!==e&&(r[s]=n));return r},ue.extend({expando:"jQuery"+(ie+Math.random()).replace(/\D/g,""),noConflict:function(e){return t.$===ue&&(t.$=Z),e&&t.jQuery===ue&&(t.jQuery=J),ue},isReady:!1,readyWait:1,holdReady:function(t){t?ue.readyWait++:ue.ready(!0)},ready:function(t){if(t===!0?!--ue.readyWait:!ue.isReady){if(!Q.body)return setTimeout(ue.ready);ue.isReady=!0,t!==!0&&--ue.readyWait>0||(U.resolveWith(Q,[ue]),ue.fn.trigger&&ue(Q).trigger("ready").off("ready"))}},isFunction:function(t){return"function"===ue.type(t)},isArray:Array.isArray||function(t){return"array"===ue.type(t)},isWindow:function(t){return null!=t&&t==t.window},isNumeric:function(t){return!isNaN(parseFloat(t))&&isFinite(t)},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?te[re.call(t)]||"object":typeof t},isPlainObject:function(t){var i;if(!t||"object"!==ue.type(t)||t.nodeType||ue.isWindow(t))return!1;try{if(t.constructor&&!le.call(t,"constructor")&&!le.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}if(ue.support.ownLast)for(i in t)return le.call(t,i);for(i in t);return i===e||le.call(t,i)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},error:function(t){throw Error(t)},parseHTML:function(t,e,i){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(i=e,e=!1),e=e||Q;var n=me.exec(t),s=!i&&[];return n?[e.createElement(n[1])]:(n=ue.buildFragment([t],e,s),s&&ue(s).remove(),ue.merge([],n.childNodes))},parseJSON:function(i){return t.JSON&&t.JSON.parse?t.JSON.parse(i):null===i?i:"string"==typeof i&&(i=ue.trim(i),i&&ge.test(i.replace(_e,"@").replace(be,"]").replace(ve,"")))?Function("return "+i)():(ue.error("Invalid JSON: "+i),e)},parseXML:function(i){var n,s;if(!i||"string"!=typeof i)return null;try{t.DOMParser?(s=new DOMParser,n=s.parseFromString(i,"text/xml")):(n=new ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(i))}catch(a){n=e}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||ue.error("Invalid XML: "+i),n},noop:function(){},globalEval:function(e){e&&ue.trim(e)&&(t.execScript||function(e){t.eval.call(t,e)})(e)},camelCase:function(t){return t.replace(ye,"ms-").replace(xe,we)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,n){var s,a=0,o=t.length,r=i(t);if(n){if(r)for(;o>a&&(s=e.apply(t[a],n),s!==!1);a++);else for(a in t)if(s=e.apply(t[a],n),s===!1)break}else if(r)for(;o>a&&(s=e.call(t[a],a,t[a]),s!==!1);a++);else for(a in t)if(s=e.call(t[a],a,t[a]),s===!1)break;return t},trim:he&&!he.call("﻿ ")?function(t){return null==t?"":he.call(t)}:function(t){return null==t?"":(t+"").replace(pe,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(i(Object(t))?ue.merge(n,"string"==typeof t?[t]:t):se.call(n,t)),n},inArray:function(t,e,i){var n;if(e){if(oe)return oe.call(e,t,i);for(n=e.length,i=i?0>i?Math.max(0,n+i):i:0;n>i;i++)if(i in e&&e[i]===t)return i}return-1},merge:function(t,i){var n=i.length,s=t.length,a=0;if("number"==typeof n)for(;n>a;a++)t[s++]=i[a];else for(;i[a]!==e;)t[s++]=i[a++];return t.length=s,t},grep:function(t,e,i){var n,s=[],a=0,o=t.length;for(i=!!i;o>a;a++)n=!!e(t[a],a),i!==n&&s.push(t[a]);return s},map:function(t,e,n){var s,a=0,o=t.length,r=i(t),l=[];if(r)for(;o>a;a++)s=e(t[a],a,n),null!=s&&(l[l.length]=s);else for(a in t)s=e(t[a],a,n),null!=s&&(l[l.length]=s);return ne.apply([],l)},guid:1,proxy:function(t,i){var n,s,a;return"string"==typeof i&&(a=t[i],i=t,t=a),ue.isFunction(t)?(n=ae.call(arguments,2),s=function(){return t.apply(i||this,n.concat(ae.call(arguments)))},s.guid=t.guid=t.guid||ue.guid++,s):e},access:function(t,i,n,s,a,o,r){var l=0,h=t.length,u=null==n;if("object"===ue.type(n)){a=!0;for(l in n)ue.access(t,i,l,n[l],!0,o,r)}else if(s!==e&&(a=!0,ue.isFunction(s)||(r=!0),u&&(r?(i.call(t,s),i=null):(u=i,i=function(t,e,i){return u.call(ue(t),i)})),i))for(;h>l;l++)i(t[l],n,r?s:s.call(t[l],l,i(t[l],n)));return a?t:u?i.call(t):h?i(t[0],n):o},now:function(){return(new Date).getTime()},swap:function(t,e,i,n){var s,a,o={};for(a in e)o[a]=t.style[a],t.style[a]=e[a];s=i.apply(t,n||[]);for(a in e)t.style[a]=o[a];return s}}),ue.ready.promise=function(e){if(!U)if(U=ue.Deferred(),"complete"===Q.readyState)setTimeout(ue.ready);else if(Q.addEventListener)Q.addEventListener("DOMContentLoaded",ke,!1),t.addEventListener("load",ke,!1);else{Q.attachEvent("onreadystatechange",ke),t.attachEvent("onload",ke);var i=!1;try{i=null==t.frameElement&&Q.documentElement}catch(n){}i&&i.doScroll&&function s(){if(!ue.isReady){try{i.doScroll("left")}catch(t){return setTimeout(s,50)}De(),ue.ready()}}()}return U.promise(e)},ue.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){te["[object "+e+"]"]=e.toLowerCase()}),K=ue(Q),function(t,e){function i(t,e,i,n){var s,a,o,r,l,h,u,c,f,m;if((e?e.ownerDocument||e:$)!==z&&P(e),e=e||z,i=i||[],!t||"string"!=typeof t)return i;if(1!==(r=e.nodeType)&&9!==r)return[];if(E&&!n){if(s=be.exec(t))if(o=s[1]){if(9===r){if(a=e.getElementById(o),!a||!a.parentNode)return i;if(a.id===o)return i.push(a),i}else if(e.ownerDocument&&(a=e.ownerDocument.getElementById(o))&&F(e,a)&&a.id===o)return i.push(a),i}else{if(s[2])return te.apply(i,e.getElementsByTagName(t)),i;if((o=s[3])&&k.getElementsByClassName&&e.getElementsByClassName)return te.apply(i,e.getElementsByClassName(o)),i}if(k.qsa&&(!O||!O.test(t))){if(c=u=j,f=e,m=9===r&&t,1===r&&"object"!==e.nodeName.toLowerCase()){for(h=d(t),(u=e.getAttribute("id"))?c=u.replace(we,"\\$&"):e.setAttribute("id",c),c="[id='"+c+"'] ",l=h.length;l--;)h[l]=c+p(h[l]);f=pe.test(t)&&e.parentNode||e,m=h.join(",")}if(m)try{return te.apply(i,f.querySelectorAll(m)),i}catch(g){}finally{u||e.removeAttribute("id")}}}return x(t.replace(he,"$1"),e,i,n)}function n(){function t(i,n){return e.push(i+=" ")>C.cacheLength&&delete t[e.shift()],t[i]=n}var e=[];return t}function s(t){return t[j]=!0,t}function a(t){var e=z.createElement("div");try{return!!t(e)}catch(i){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var i=t.split("|"),n=t.length;n--;)C.attrHandle[i[n]]=e}function r(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||X)-(~t.sourceIndex||X);if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function l(t){return function(e){var i=e.nodeName.toLowerCase();return"input"===i&&e.type===t}}function h(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function u(t){return s(function(e){return e=+e,s(function(i,n){for(var s,a=t([],i.length,e),o=a.length;o--;)i[s=a[o]]&&(i[s]=!(n[s]=i[s]))})})}function c(){}function d(t,e){var n,s,a,o,r,l,h,u=q[t+" "];if(u)return e?0:u.slice(0);for(r=t,l=[],h=C.preFilter;r;){(!n||(s=ce.exec(r)))&&(s&&(r=r.slice(s[0].length)||r),l.push(a=[])),n=!1,(s=de.exec(r))&&(n=s.shift(),a.push({value:n,type:s[0].replace(he," ")}),r=r.slice(n.length));for(o in C.filter)!(s=ve[o].exec(r))||h[o]&&!(s=h[o](s))||(n=s.shift(),a.push({value:n,type:o,matches:s}),r=r.slice(n.length));if(!n)break}return e?r.length:r?i.error(t):q(t,l).slice(0)}function p(t){for(var e=0,i=t.length,n="";i>e;e++)n+=t[e].value;return n}function f(t,e,i){var n=e.dir,s=i&&"parentNode"===n,a=R++;return e.first?function(e,i,a){for(;e=e[n];)if(1===e.nodeType||s)return t(e,i,a)}:function(e,i,o){var r,l,h,u=L+" "+a;if(o){for(;e=e[n];)if((1===e.nodeType||s)&&t(e,i,o))return!0}else for(;e=e[n];)if(1===e.nodeType||s)if(h=e[j]||(e[j]={}),(l=h[n])&&l[0]===u){if((r=l[1])===!0||r===D)return r===!0}else if(l=h[n]=[u],l[1]=t(e,i,o)||D,l[1]===!0)return!0}}function m(t){return t.length>1?function(e,i,n){for(var s=t.length;s--;)if(!t[s](e,i,n))return!1;return!0}:t[0]}function g(t,e,i,n,s){for(var a,o=[],r=0,l=t.length,h=null!=e;l>r;r++)(a=t[r])&&(!i||i(a,n,s))&&(o.push(a),h&&e.push(r));return o}function v(t,e,i,n,a,o){return n&&!n[j]&&(n=v(n)),a&&!a[j]&&(a=v(a,o)),s(function(s,o,r,l){var h,u,c,d=[],p=[],f=o.length,m=s||y(e||"*",r.nodeType?[r]:r,[]),v=!t||!s&&e?m:g(m,d,t,r,l),_=i?a||(s?t:f||n)?[]:o:v;if(i&&i(v,_,r,l),n)for(h=g(_,p),n(h,[],r,l),u=h.length;u--;)(c=h[u])&&(_[p[u]]=!(v[p[u]]=c));if(s){if(a||t){if(a){for(h=[],u=_.length;u--;)(c=_[u])&&h.push(v[u]=c);a(null,_=[],h,l)}for(u=_.length;u--;)(c=_[u])&&(h=a?ie.call(s,c):d[u])>-1&&(s[h]=!(o[h]=c))}}else _=g(_===o?_.splice(f,_.length):_),a?a(null,o,_,l):te.apply(o,_)})}function _(t){for(var e,i,n,s=t.length,a=C.relative[t[0].type],o=a||C.relative[" "],r=a?1:0,l=f(function(t){return t===e},o,!0),h=f(function(t){return ie.call(e,t)>-1},o,!0),u=[function(t,i,n){return!a&&(n||i!==I)||((e=i).nodeType?l(t,i,n):h(t,i,n))}];s>r;r++)if(i=C.relative[t[r].type])u=[f(m(u),i)];else{if(i=C.filter[t[r].type].apply(null,t[r].matches),i[j]){for(n=++r;s>n&&!C.relative[t[n].type];n++);return v(r>1&&m(u),r>1&&p(t.slice(0,r-1).concat({value:" "===t[r-2].type?"*":""})).replace(he,"$1"),i,n>r&&_(t.slice(r,n)),s>n&&_(t=t.slice(n)),s>n&&p(t))}u.push(i)}return m(u)}function b(t,e){var n=0,a=e.length>0,o=t.length>0,r=function(s,r,l,h,u){var c,d,p,f=[],m=0,v="0",_=s&&[],b=null!=u,y=I,x=s||o&&C.find.TAG("*",u&&r.parentNode||r),w=L+=null==y?1:Math.random()||.1;for(b&&(I=r!==z&&r,D=n);null!=(c=x[v]);v++){if(o&&c){for(d=0;p=t[d++];)if(p(c,r,l)){h.push(c);break}b&&(L=w,D=++n)}a&&((c=!p&&c)&&m--,s&&_.push(c))}if(m+=v,a&&v!==m){for(d=0;p=e[d++];)p(_,f,r,l);if(s){if(m>0)for(;v--;)_[v]||f[v]||(f[v]=J.call(h));f=g(f)}te.apply(h,f),b&&!s&&f.length>0&&m+e.length>1&&i.uniqueSort(h)}return b&&(L=w,I=y),_};return a?s(r):r}function y(t,e,n){for(var s=0,a=e.length;a>s;s++)i(t,e[s],n);return n}function x(t,e,i,n){var s,a,o,r,l,h=d(t);if(!n&&1===h.length){if(a=h[0]=h[0].slice(0),a.length>2&&"ID"===(o=a[0]).type&&k.getById&&9===e.nodeType&&E&&C.relative[a[1].type]){if(e=(C.find.ID(o.matches[0].replace(ke,De),e)||[])[0],!e)return i;t=t.slice(a.shift().value.length)}for(s=ve.needsContext.test(t)?0:a.length;s--&&(o=a[s],!C.relative[r=o.type]);)if((l=C.find[r])&&(n=l(o.matches[0].replace(ke,De),pe.test(a[0].type)&&e.parentNode||e))){if(a.splice(s,1),t=n.length&&p(a),!t)return te.apply(i,n),i;break}}return S(t,h)(n,e,!E,i,pe.test(t)),i}var w,k,D,C,T,M,S,I,N,P,z,A,E,O,H,W,F,j="sizzle"+-new Date,$=t.document,L=0,R=0,B=n(),q=n(),Y=n(),U=!1,K=function(t,e){return t===e?(U=!0,0):0},V=typeof e,X=1<<31,Q={}.hasOwnProperty,G=[],J=G.pop,Z=G.push,te=G.push,ee=G.slice,ie=G.indexOf||function(t){for(var e=0,i=this.length;i>e;e++)if(this[e]===t)return e;return-1},ne="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",se="[\\x20\\t\\r\\n\\f]",ae="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",oe=ae.replace("w","w#"),re="\\["+se+"*("+ae+")"+se+"*(?:([*^$|!~]?=)"+se+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+oe+")|)|)"+se+"*\\]",le=":("+ae+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+re.replace(3,8)+")*)|.*)\\)|)",he=RegExp("^"+se+"+|((?:^|[^\\\\])(?:\\\\.)*)"+se+"+$","g"),ce=RegExp("^"+se+"*,"+se+"*"),de=RegExp("^"+se+"*([>+~]|"+se+")"+se+"*"),pe=RegExp(se+"*[+~]"),fe=RegExp("="+se+"*([^\\]'\"]*)"+se+"*\\]","g"),me=RegExp(le),ge=RegExp("^"+oe+"$"),ve={ID:RegExp("^#("+ae+")"),CLASS:RegExp("^\\.("+ae+")"),TAG:RegExp("^("+ae.replace("w","w*")+")"),ATTR:RegExp("^"+re),PSEUDO:RegExp("^"+le),CHILD:RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+se+"*(even|odd|(([+-]|)(\\d*)n|)"+se+"*(?:([+-]|)"+se+"*(\\d+)|))"+se+"*\\)|)","i"),bool:RegExp("^(?:"+ne+")$","i"),needsContext:RegExp("^"+se+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+se+"*((?:-\\d)?\\d*)"+se+"*\\)|)(?=[^-]|$)","i")},_e=/^[^{]+\{\s*\[native \w/,be=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/^(?:input|select|textarea|button)$/i,xe=/^h\d$/i,we=/'|\\/g,ke=RegExp("\\\\([\\da-f]{1,6}"+se+"?|("+se+")|.)","ig"),De=function(t,e,i){var n="0x"+e-65536;return n!==n||i?e:0>n?String.fromCharCode(n+65536):String.fromCharCode(55296|n>>10,56320|1023&n)};try{te.apply(G=ee.call($.childNodes),$.childNodes),G[$.childNodes.length].nodeType}catch(Ce){te={apply:G.length?function(t,e){Z.apply(t,ee.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}M=i.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},k=i.support={},P=i.setDocument=function(t){var i=t?t.ownerDocument||t:$,n=i.defaultView;return i!==z&&9===i.nodeType&&i.documentElement?(z=i,A=i.documentElement,E=!M(i),n&&n.attachEvent&&n!==n.top&&n.attachEvent("onbeforeunload",function(){P()}),k.attributes=a(function(t){return t.className="i",!t.getAttribute("className")}),k.getElementsByTagName=a(function(t){return t.appendChild(i.createComment("")),!t.getElementsByTagName("*").length}),k.getElementsByClassName=a(function(t){return t.innerHTML="<div class='a'></div><div class='a i'></div>",t.firstChild.className="i",2===t.getElementsByClassName("i").length}),k.getById=a(function(t){return A.appendChild(t).id=j,!i.getElementsByName||!i.getElementsByName(j).length}),k.getById?(C.find.ID=function(t,e){if(typeof e.getElementById!==V&&E){var i=e.getElementById(t);return i&&i.parentNode?[i]:[]}},C.filter.ID=function(t){var e=t.replace(ke,De);return function(t){return t.getAttribute("id")===e}}):(delete C.find.ID,C.filter.ID=function(t){var e=t.replace(ke,De);return function(t){var i=typeof t.getAttributeNode!==V&&t.getAttributeNode("id");return i&&i.value===e}}),C.find.TAG=k.getElementsByTagName?function(t,i){return typeof i.getElementsByTagName!==V?i.getElementsByTagName(t):e}:function(t,e){var i,n=[],s=0,a=e.getElementsByTagName(t);if("*"===t){for(;i=a[s++];)1===i.nodeType&&n.push(i);return n}return a},C.find.CLASS=k.getElementsByClassName&&function(t,i){return typeof i.getElementsByClassName!==V&&E?i.getElementsByClassName(t):e},H=[],O=[],(k.qsa=_e.test(i.querySelectorAll))&&(a(function(t){t.innerHTML="<select><option selected=''></option></select>",t.querySelectorAll("[selected]").length||O.push("\\["+se+"*(?:value|"+ne+")"),t.querySelectorAll(":checked").length||O.push(":checked")}),a(function(t){var e=i.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("t",""),t.querySelectorAll("[t^='']").length&&O.push("[*^$]="+se+"*(?:''|\"\")"),t.querySelectorAll(":enabled").length||O.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),O.push(",.*:")})),(k.matchesSelector=_e.test(W=A.webkitMatchesSelector||A.mozMatchesSelector||A.oMatchesSelector||A.msMatchesSelector))&&a(function(t){k.disconnectedMatch=W.call(t,"div"),W.call(t,"[s!='']:x"),H.push("!=",le)}),O=O.length&&RegExp(O.join("|")),H=H.length&&RegExp(H.join("|")),F=_e.test(A.contains)||A.compareDocumentPosition?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},K=A.compareDocumentPosition?function(t,e){if(t===e)return U=!0,0;var n=e.compareDocumentPosition&&t.compareDocumentPosition&&t.compareDocumentPosition(e);return n?1&n||!k.sortDetached&&e.compareDocumentPosition(t)===n?t===i||F($,t)?-1:e===i||F($,e)?1:N?ie.call(N,t)-ie.call(N,e):0:4&n?-1:1:t.compareDocumentPosition?-1:1}:function(t,e){var n,s=0,a=t.parentNode,o=e.parentNode,l=[t],h=[e];if(t===e)return U=!0,0;if(!a||!o)return t===i?-1:e===i?1:a?-1:o?1:N?ie.call(N,t)-ie.call(N,e):0;if(a===o)return r(t,e);for(n=t;n=n.parentNode;)l.unshift(n);for(n=e;n=n.parentNode;)h.unshift(n);for(;l[s]===h[s];)s++;return s?r(l[s],h[s]):l[s]===$?-1:h[s]===$?1:0},i):z},i.matches=function(t,e){return i(t,null,null,e)},i.matchesSelector=function(t,e){if((t.ownerDocument||t)!==z&&P(t),e=e.replace(fe,"='$1']"),!(!k.matchesSelector||!E||H&&H.test(e)||O&&O.test(e)))try{var n=W.call(t,e);if(n||k.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(s){}return i(e,z,null,[t]).length>0},i.contains=function(t,e){return(t.ownerDocument||t)!==z&&P(t),F(t,e)},i.attr=function(t,i){(t.ownerDocument||t)!==z&&P(t);var n=C.attrHandle[i.toLowerCase()],s=n&&Q.call(C.attrHandle,i.toLowerCase())?n(t,i,!E):e;return s===e?k.attributes||!E?t.getAttribute(i):(s=t.getAttributeNode(i))&&s.specified?s.value:null:s},i.error=function(t){throw Error("Syntax error, unrecognized expression: "+t)},i.uniqueSort=function(t){var e,i=[],n=0,s=0;if(U=!k.detectDuplicates,N=!k.sortStable&&t.slice(0),t.sort(K),U){for(;e=t[s++];)e===t[s]&&(n=i.push(s));for(;n--;)t.splice(i[n],1)}return t},T=i.getText=function(t){var e,i="",n=0,s=t.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=T(t)}else if(3===s||4===s)return t.nodeValue}else for(;e=t[n];n++)i+=T(e);return i},C=i.selectors={cacheLength:50,createPseudo:s,match:ve,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(ke,De),t[3]=(t[4]||t[5]||"").replace(ke,De),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||i.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&i.error(t[0]),t},PSEUDO:function(t){var i,n=!t[5]&&t[2];return ve.CHILD.test(t[0])?null:(t[3]&&t[4]!==e?t[2]=t[4]:n&&me.test(n)&&(i=d(n,!0))&&(i=n.indexOf(")",n.length-i)-n.length)&&(t[0]=t[0].slice(0,i),t[2]=n.slice(0,i)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(ke,De).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=B[t+" "];return e||(e=RegExp("(^|"+se+")"+t+"("+se+"|$)"))&&B(t,function(t){return e.test("string"==typeof t.className&&t.className||typeof t.getAttribute!==V&&t.getAttribute("class")||"")})},ATTR:function(t,e,n){return function(s){var a=i.attr(s,t);return null==a?"!="===e:e?(a+="","="===e?a===n:"!="===e?a!==n:"^="===e?n&&0===a.indexOf(n):"*="===e?n&&a.indexOf(n)>-1:"$="===e?n&&a.slice(-n.length)===n:"~="===e?(" "+a+" ").indexOf(n)>-1:"|="===e?a===n||a.slice(0,n.length+1)===n+"-":!1):!0}},CHILD:function(t,e,i,n,s){var a="nth"!==t.slice(0,3),o="last"!==t.slice(-4),r="of-type"===e;return 1===n&&0===s?function(t){return!!t.parentNode}:function(e,i,l){var h,u,c,d,p,f,m=a!==o?"nextSibling":"previousSibling",g=e.parentNode,v=r&&e.nodeName.toLowerCase(),_=!l&&!r;
if(g){if(a){for(;m;){for(c=e;c=c[m];)if(r?c.nodeName.toLowerCase()===v:1===c.nodeType)return!1;f=m="only"===t&&!f&&"nextSibling"}return!0}if(f=[o?g.firstChild:g.lastChild],o&&_){for(u=g[j]||(g[j]={}),h=u[t]||[],p=h[0]===L&&h[1],d=h[0]===L&&h[2],c=p&&g.childNodes[p];c=++p&&c&&c[m]||(d=p=0)||f.pop();)if(1===c.nodeType&&++d&&c===e){u[t]=[L,p,d];break}}else if(_&&(h=(e[j]||(e[j]={}))[t])&&h[0]===L)d=h[1];else for(;(c=++p&&c&&c[m]||(d=p=0)||f.pop())&&((r?c.nodeName.toLowerCase()!==v:1!==c.nodeType)||!++d||(_&&((c[j]||(c[j]={}))[t]=[L,d]),c!==e)););return d-=s,d===n||0===d%n&&d/n>=0}}},PSEUDO:function(t,e){var n,a=C.pseudos[t]||C.setFilters[t.toLowerCase()]||i.error("unsupported pseudo: "+t);return a[j]?a(e):a.length>1?(n=[t,t,"",e],C.setFilters.hasOwnProperty(t.toLowerCase())?s(function(t,i){for(var n,s=a(t,e),o=s.length;o--;)n=ie.call(t,s[o]),t[n]=!(i[n]=s[o])}):function(t){return a(t,0,n)}):a}},pseudos:{not:s(function(t){var e=[],i=[],n=S(t.replace(he,"$1"));return n[j]?s(function(t,e,i,s){for(var a,o=n(t,null,s,[]),r=t.length;r--;)(a=o[r])&&(t[r]=!(e[r]=a))}):function(t,s,a){return e[0]=t,n(e,null,a,i),!i.pop()}}),has:s(function(t){return function(e){return i(t,e).length>0}}),contains:s(function(t){return function(e){return(e.textContent||e.innerText||T(e)).indexOf(t)>-1}}),lang:s(function(t){return ge.test(t||"")||i.error("unsupported lang: "+t),t=t.replace(ke,De).toLowerCase(),function(e){var i;do if(i=E?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return i=i.toLowerCase(),i===t||0===i.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===A},focus:function(t){return t===z.activeElement&&(!z.hasFocus||z.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeName>"@"||3===t.nodeType||4===t.nodeType)return!1;return!0},parent:function(t){return!C.pseudos.empty(t)},header:function(t){return xe.test(t.nodeName)},input:function(t){return ye.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||e.toLowerCase()===t.type)},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,i){return[0>i?i+e:i]}),even:u(function(t,e){for(var i=0;e>i;i+=2)t.push(i);return t}),odd:u(function(t,e){for(var i=1;e>i;i+=2)t.push(i);return t}),lt:u(function(t,e,i){for(var n=0>i?i+e:i;--n>=0;)t.push(n);return t}),gt:u(function(t,e,i){for(var n=0>i?i+e:i;e>++n;)t.push(n);return t})}},C.pseudos.nth=C.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[w]=l(w);for(w in{submit:!0,reset:!0})C.pseudos[w]=h(w);c.prototype=C.filters=C.pseudos,C.setFilters=new c,S=i.compile=function(t,e){var i,n=[],s=[],a=Y[t+" "];if(!a){for(e||(e=d(t)),i=e.length;i--;)a=_(e[i]),a[j]?n.push(a):s.push(a);a=Y(t,b(s,n))}return a},k.sortStable=j.split("").sort(K).join("")===j,k.detectDuplicates=U,P(),k.sortDetached=a(function(t){return 1&t.compareDocumentPosition(z.createElement("div"))}),a(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,i,n){return n?e:t.getAttribute(i,"type"===i.toLowerCase()?1:2)}),k.attributes&&a(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,i,n){return n||"input"!==t.nodeName.toLowerCase()?e:t.defaultValue}),a(function(t){return null==t.getAttribute("disabled")})||o(ne,function(t,i,n){var s;return n?e:(s=t.getAttributeNode(i))&&s.specified?s.value:t[i]===!0?i.toLowerCase():null}),ue.find=i,ue.expr=i.selectors,ue.expr[":"]=ue.expr.pseudos,ue.unique=i.uniqueSort,ue.text=i.getText,ue.isXMLDoc=i.isXML,ue.contains=i.contains}(t);var Ce={};ue.Callbacks=function(t){t="string"==typeof t?Ce[t]||n(t):ue.extend({},t);var i,s,a,o,r,l,h=[],u=!t.once&&[],c=function(e){for(s=t.memory&&e,a=!0,r=l||0,l=0,o=h.length,i=!0;h&&o>r;r++)if(h[r].apply(e[0],e[1])===!1&&t.stopOnFalse){s=!1;break}i=!1,h&&(u?u.length&&c(u.shift()):s?h=[]:d.disable())},d={add:function(){if(h){var e=h.length;!function n(e){ue.each(e,function(e,i){var s=ue.type(i);"function"===s?t.unique&&d.has(i)||h.push(i):i&&i.length&&"string"!==s&&n(i)})}(arguments),i?o=h.length:s&&(l=e,c(s))}return this},remove:function(){return h&&ue.each(arguments,function(t,e){for(var n;(n=ue.inArray(e,h,n))>-1;)h.splice(n,1),i&&(o>=n&&o--,r>=n&&r--)}),this},has:function(t){return t?ue.inArray(t,h)>-1:!(!h||!h.length)},empty:function(){return h=[],o=0,this},disable:function(){return h=u=s=e,this},disabled:function(){return!h},lock:function(){return u=e,s||d.disable(),this},locked:function(){return!u},fireWith:function(t,e){return!h||a&&!u||(e=e||[],e=[t,e.slice?e.slice():e],i?u.push(e):c(e)),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!a}};return d},ue.extend({Deferred:function(t){var e=[["resolve","done",ue.Callbacks("once memory"),"resolved"],["reject","fail",ue.Callbacks("once memory"),"rejected"],["notify","progress",ue.Callbacks("memory")]],i="pending",n={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},then:function(){var t=arguments;return ue.Deferred(function(i){ue.each(e,function(e,a){var o=a[0],r=ue.isFunction(t[e])&&t[e];s[a[1]](function(){var t=r&&r.apply(this,arguments);t&&ue.isFunction(t.promise)?t.promise().done(i.resolve).fail(i.reject).progress(i.notify):i[o+"With"](this===n?i.promise():this,r?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?ue.extend(t,n):n}},s={};return n.pipe=n.then,ue.each(e,function(t,a){var o=a[2],r=a[3];n[a[1]]=o.add,r&&o.add(function(){i=r},e[1^t][2].disable,e[2][2].lock),s[a[0]]=function(){return s[a[0]+"With"](this===s?n:this,arguments),this},s[a[0]+"With"]=o.fireWith}),n.promise(s),t&&t.call(s,s),s},when:function(t){var e,i,n,s=0,a=ae.call(arguments),o=a.length,r=1!==o||t&&ue.isFunction(t.promise)?o:0,l=1===r?t:ue.Deferred(),h=function(t,i,n){return function(s){i[t]=this,n[t]=arguments.length>1?ae.call(arguments):s,n===e?l.notifyWith(i,n):--r||l.resolveWith(i,n)}};if(o>1)for(e=Array(o),i=Array(o),n=Array(o);o>s;s++)a[s]&&ue.isFunction(a[s].promise)?a[s].promise().done(h(s,n,a)).fail(l.reject).progress(h(s,i,e)):--r;return r||l.resolveWith(n,a),l.promise()}}),ue.support=function(e){var i,n,s,a,o,r,l,h,u,c=Q.createElement("div");if(c.setAttribute("className","t"),c.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",i=c.getElementsByTagName("*")||[],n=c.getElementsByTagName("a")[0],!n||!n.style||!i.length)return e;a=Q.createElement("select"),r=a.appendChild(Q.createElement("option")),s=c.getElementsByTagName("input")[0],n.style.cssText="top:1px;float:left;opacity:.5",e.getSetAttribute="t"!==c.className,e.leadingWhitespace=3===c.firstChild.nodeType,e.tbody=!c.getElementsByTagName("tbody").length,e.htmlSerialize=!!c.getElementsByTagName("link").length,e.style=/top/.test(n.getAttribute("style")),e.hrefNormalized="/a"===n.getAttribute("href"),e.opacity=/^0.5/.test(n.style.opacity),e.cssFloat=!!n.style.cssFloat,e.checkOn=!!s.value,e.optSelected=r.selected,e.enctype=!!Q.createElement("form").enctype,e.html5Clone="<:nav></:nav>"!==Q.createElement("nav").cloneNode(!0).outerHTML,e.inlineBlockNeedsLayout=!1,e.shrinkWrapBlocks=!1,e.pixelPosition=!1,e.deleteExpando=!0,e.noCloneEvent=!0,e.reliableMarginRight=!0,e.boxSizingReliable=!0,s.checked=!0,e.noCloneChecked=s.cloneNode(!0).checked,a.disabled=!0,e.optDisabled=!r.disabled;try{delete c.test}catch(d){e.deleteExpando=!1}s=Q.createElement("input"),s.setAttribute("value",""),e.input=""===s.getAttribute("value"),s.value="t",s.setAttribute("type","radio"),e.radioValue="t"===s.value,s.setAttribute("checked","t"),s.setAttribute("name","t"),o=Q.createDocumentFragment(),o.appendChild(s),e.appendChecked=s.checked,e.checkClone=o.cloneNode(!0).cloneNode(!0).lastChild.checked,c.attachEvent&&(c.attachEvent("onclick",function(){e.noCloneEvent=!1}),c.cloneNode(!0).click());for(u in{submit:!0,change:!0,focusin:!0})c.setAttribute(l="on"+u,"t"),e[u+"Bubbles"]=l in t||c.attributes[l].expando===!1;c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",e.clearCloneStyle="content-box"===c.style.backgroundClip;for(u in ue(e))break;return e.ownLast="0"!==u,ue(function(){var i,n,s,a="padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",o=Q.getElementsByTagName("body")[0];o&&(i=Q.createElement("div"),i.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",o.appendChild(i).appendChild(c),c.innerHTML="<table><tr><td></td><td>t</td></tr></table>",s=c.getElementsByTagName("td"),s[0].style.cssText="padding:0;margin:0;border:0;display:none",h=0===s[0].offsetHeight,s[0].style.display="",s[1].style.display="none",e.reliableHiddenOffsets=h&&0===s[0].offsetHeight,c.innerHTML="",c.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",ue.swap(o,null!=o.style.zoom?{zoom:1}:{},function(){e.boxSizing=4===c.offsetWidth}),t.getComputedStyle&&(e.pixelPosition="1%"!==(t.getComputedStyle(c,null)||{}).top,e.boxSizingReliable="4px"===(t.getComputedStyle(c,null)||{width:"4px"}).width,n=c.appendChild(Q.createElement("div")),n.style.cssText=c.style.cssText=a,n.style.marginRight=n.style.width="0",c.style.width="1px",e.reliableMarginRight=!parseFloat((t.getComputedStyle(n,null)||{}).marginRight)),typeof c.style.zoom!==V&&(c.innerHTML="",c.style.cssText=a+"width:1px;padding:1px;display:inline;zoom:1",e.inlineBlockNeedsLayout=3===c.offsetWidth,c.style.display="block",c.innerHTML="<div></div>",c.firstChild.style.width="5px",e.shrinkWrapBlocks=3!==c.offsetWidth,e.inlineBlockNeedsLayout&&(o.style.zoom=1)),o.removeChild(i),i=c=s=n=null)}),i=a=o=r=n=s=null,e}({});var Te=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,Me=/([A-Z])/g;ue.extend({cache:{},noData:{applet:!0,embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(t){return t=t.nodeType?ue.cache[t[ue.expando]]:t[ue.expando],!!t&&!r(t)},data:function(t,e,i){return s(t,e,i)},removeData:function(t,e){return a(t,e)},_data:function(t,e,i){return s(t,e,i,!0)},_removeData:function(t,e){return a(t,e,!0)},acceptData:function(t){if(t.nodeType&&1!==t.nodeType&&9!==t.nodeType)return!1;var e=t.nodeName&&ue.noData[t.nodeName.toLowerCase()];return!e||e!==!0&&t.getAttribute("classid")===e}}),ue.fn.extend({data:function(t,i){var n,s,a=null,r=0,l=this[0];if(t===e){if(this.length&&(a=ue.data(l),1===l.nodeType&&!ue._data(l,"parsedAttrs"))){for(n=l.attributes;n.length>r;r++)s=n[r].name,0===s.indexOf("data-")&&(s=ue.camelCase(s.slice(5)),o(l,s,a[s]));ue._data(l,"parsedAttrs",!0)}return a}return"object"==typeof t?this.each(function(){ue.data(this,t)}):arguments.length>1?this.each(function(){ue.data(this,t,i)}):l?o(l,t,ue.data(l,t)):null},removeData:function(t){return this.each(function(){ue.removeData(this,t)})}}),ue.extend({queue:function(t,i,n){var s;return t?(i=(i||"fx")+"queue",s=ue._data(t,i),n&&(!s||ue.isArray(n)?s=ue._data(t,i,ue.makeArray(n)):s.push(n)),s||[]):e},dequeue:function(t,e){e=e||"fx";var i=ue.queue(t,e),n=i.length,s=i.shift(),a=ue._queueHooks(t,e),o=function(){ue.dequeue(t,e)};"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===e&&i.unshift("inprogress"),delete a.stop,s.call(t,o,a)),!n&&a&&a.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return ue._data(t,i)||ue._data(t,i,{empty:ue.Callbacks("once memory").add(function(){ue._removeData(t,e+"queue"),ue._removeData(t,i)})})}}),ue.fn.extend({queue:function(t,i){var n=2;return"string"!=typeof t&&(i=t,t="fx",n--),n>arguments.length?ue.queue(this[0],t):i===e?this:this.each(function(){var e=ue.queue(this,t,i);ue._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&ue.dequeue(this,t)})},dequeue:function(t){return this.each(function(){ue.dequeue(this,t)})},delay:function(t,e){return t=ue.fx?ue.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,i){var n=setTimeout(e,t);i.stop=function(){clearTimeout(n)}})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,i){var n,s=1,a=ue.Deferred(),o=this,r=this.length,l=function(){--s||a.resolveWith(o,[o])};for("string"!=typeof t&&(i=t,t=e),t=t||"fx";r--;)n=ue._data(o[r],t+"queueHooks"),n&&n.empty&&(s++,n.empty.add(l));return l(),a.promise(i)}});var Se,Ie,Ne=/[\t\r\n\f]/g,Pe=/\r/g,ze=/^(?:input|select|textarea|button|object)$/i,Ae=/^(?:a|area)$/i,Ee=/^(?:checked|selected)$/i,Oe=ue.support.getSetAttribute,He=ue.support.input;ue.fn.extend({attr:function(t,e){return ue.access(this,ue.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){ue.removeAttr(this,t)})},prop:function(t,e){return ue.access(this,ue.prop,t,e,arguments.length>1)},removeProp:function(t){return t=ue.propFix[t]||t,this.each(function(){try{this[t]=e,delete this[t]}catch(i){}})},addClass:function(t){var e,i,n,s,a,o=0,r=this.length,l="string"==typeof t&&t;if(ue.isFunction(t))return this.each(function(e){ue(this).addClass(t.call(this,e,this.className))});if(l)for(e=(t||"").match(de)||[];r>o;o++)if(i=this[o],n=1===i.nodeType&&(i.className?(" "+i.className+" ").replace(Ne," "):" ")){for(a=0;s=e[a++];)0>n.indexOf(" "+s+" ")&&(n+=s+" ");i.className=ue.trim(n)}return this},removeClass:function(t){var e,i,n,s,a,o=0,r=this.length,l=0===arguments.length||"string"==typeof t&&t;if(ue.isFunction(t))return this.each(function(e){ue(this).removeClass(t.call(this,e,this.className))});if(l)for(e=(t||"").match(de)||[];r>o;o++)if(i=this[o],n=1===i.nodeType&&(i.className?(" "+i.className+" ").replace(Ne," "):"")){for(a=0;s=e[a++];)for(;n.indexOf(" "+s+" ")>=0;)n=n.replace(" "+s+" "," ");i.className=t?ue.trim(n):""}return this},toggleClass:function(t,e){var i=typeof t;return"boolean"==typeof e&&"string"===i?e?this.addClass(t):this.removeClass(t):this.each(ue.isFunction(t)?function(i){ue(this).toggleClass(t.call(this,i,this.className,e),e)}:function(){if("string"===i)for(var e,n=0,s=ue(this),a=t.match(de)||[];e=a[n++];)s.hasClass(e)?s.removeClass(e):s.addClass(e);else(i===V||"boolean"===i)&&(this.className&&ue._data(this,"__className__",this.className),this.className=this.className||t===!1?"":ue._data(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",i=0,n=this.length;n>i;i++)if(1===this[i].nodeType&&(" "+this[i].className+" ").replace(Ne," ").indexOf(e)>=0)return!0;return!1},val:function(t){var i,n,s,a=this[0];return arguments.length?(s=ue.isFunction(t),this.each(function(i){var a;1===this.nodeType&&(a=s?t.call(this,i,ue(this).val()):t,null==a?a="":"number"==typeof a?a+="":ue.isArray(a)&&(a=ue.map(a,function(t){return null==t?"":t+""})),n=ue.valHooks[this.type]||ue.valHooks[this.nodeName.toLowerCase()],n&&"set"in n&&n.set(this,a,"value")!==e||(this.value=a))})):a?(n=ue.valHooks[a.type]||ue.valHooks[a.nodeName.toLowerCase()],n&&"get"in n&&(i=n.get(a,"value"))!==e?i:(i=a.value,"string"==typeof i?i.replace(Pe,""):null==i?"":i)):void 0}}),ue.extend({valHooks:{option:{get:function(t){var e=ue.find.attr(t,"value");return null!=e?e:t.text}},select:{get:function(t){for(var e,i,n=t.options,s=t.selectedIndex,a="select-one"===t.type||0>s,o=a?null:[],r=a?s+1:n.length,l=0>s?r:a?s:0;r>l;l++)if(i=n[l],!(!i.selected&&l!==s||(ue.support.optDisabled?i.disabled:null!==i.getAttribute("disabled"))||i.parentNode.disabled&&ue.nodeName(i.parentNode,"optgroup"))){if(e=ue(i).val(),a)return e;o.push(e)}return o},set:function(t,e){for(var i,n,s=t.options,a=ue.makeArray(e),o=s.length;o--;)n=s[o],(n.selected=ue.inArray(ue(n).val(),a)>=0)&&(i=!0);return i||(t.selectedIndex=-1),a}}},attr:function(t,i,n){var s,a,o=t.nodeType;return t&&3!==o&&8!==o&&2!==o?typeof t.getAttribute===V?ue.prop(t,i,n):(1===o&&ue.isXMLDoc(t)||(i=i.toLowerCase(),s=ue.attrHooks[i]||(ue.expr.match.bool.test(i)?Ie:Se)),n===e?s&&"get"in s&&null!==(a=s.get(t,i))?a:(a=ue.find.attr(t,i),null==a?e:a):null!==n?s&&"set"in s&&(a=s.set(t,n,i))!==e?a:(t.setAttribute(i,n+""),n):(ue.removeAttr(t,i),e)):void 0},removeAttr:function(t,e){var i,n,s=0,a=e&&e.match(de);if(a&&1===t.nodeType)for(;i=a[s++];)n=ue.propFix[i]||i,ue.expr.match.bool.test(i)?He&&Oe||!Ee.test(i)?t[n]=!1:t[ue.camelCase("default-"+i)]=t[n]=!1:ue.attr(t,i,""),t.removeAttribute(Oe?i:n)},attrHooks:{type:{set:function(t,e){if(!ue.support.radioValue&&"radio"===e&&ue.nodeName(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},propFix:{"for":"htmlFor","class":"className"},prop:function(t,i,n){var s,a,o,r=t.nodeType;return t&&3!==r&&8!==r&&2!==r?(o=1!==r||!ue.isXMLDoc(t),o&&(i=ue.propFix[i]||i,a=ue.propHooks[i]),n!==e?a&&"set"in a&&(s=a.set(t,n,i))!==e?s:t[i]=n:a&&"get"in a&&null!==(s=a.get(t,i))?s:t[i]):void 0},propHooks:{tabIndex:{get:function(t){var e=ue.find.attr(t,"tabindex");return e?parseInt(e,10):ze.test(t.nodeName)||Ae.test(t.nodeName)&&t.href?0:-1}}}}),Ie={set:function(t,e,i){return e===!1?ue.removeAttr(t,i):He&&Oe||!Ee.test(i)?t.setAttribute(!Oe&&ue.propFix[i]||i,i):t[ue.camelCase("default-"+i)]=t[i]=!0,i}},ue.each(ue.expr.match.bool.source.match(/\w+/g),function(t,i){var n=ue.expr.attrHandle[i]||ue.find.attr;ue.expr.attrHandle[i]=He&&Oe||!Ee.test(i)?function(t,i,s){var a=ue.expr.attrHandle[i],o=s?e:(ue.expr.attrHandle[i]=e)!=n(t,i,s)?i.toLowerCase():null;return ue.expr.attrHandle[i]=a,o}:function(t,i,n){return n?e:t[ue.camelCase("default-"+i)]?i.toLowerCase():null}}),He&&Oe||(ue.attrHooks.value={set:function(t,i,n){return ue.nodeName(t,"input")?(t.defaultValue=i,e):Se&&Se.set(t,i,n)}}),Oe||(Se={set:function(t,i,n){var s=t.getAttributeNode(n);return s||t.setAttributeNode(s=t.ownerDocument.createAttribute(n)),s.value=i+="","value"===n||i===t.getAttribute(n)?i:e}},ue.expr.attrHandle.id=ue.expr.attrHandle.name=ue.expr.attrHandle.coords=function(t,i,n){var s;return n?e:(s=t.getAttributeNode(i))&&""!==s.value?s.value:null},ue.valHooks.button={get:function(t,i){var n=t.getAttributeNode(i);return n&&n.specified?n.value:e},set:Se.set},ue.attrHooks.contenteditable={set:function(t,e,i){Se.set(t,""===e?!1:e,i)}},ue.each(["width","height"],function(t,i){ue.attrHooks[i]={set:function(t,n){return""===n?(t.setAttribute(i,"auto"),n):e}}})),ue.support.hrefNormalized||ue.each(["href","src"],function(t,e){ue.propHooks[e]={get:function(t){return t.getAttribute(e,4)}}}),ue.support.style||(ue.attrHooks.style={get:function(t){return t.style.cssText||e},set:function(t,e){return t.style.cssText=e+""}}),ue.support.optSelected||(ue.propHooks.selected={get:function(t){var e=t.parentNode;return e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex),null}}),ue.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ue.propFix[this.toLowerCase()]=this}),ue.support.enctype||(ue.propFix.enctype="encoding"),ue.each(["radio","checkbox"],function(){ue.valHooks[this]={set:function(t,i){return ue.isArray(i)?t.checked=ue.inArray(ue(t).val(),i)>=0:e}},ue.support.checkOn||(ue.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var We=/^(?:input|select|textarea)$/i,Fe=/^key/,je=/^(?:mouse|contextmenu)|click/,$e=/^(?:focusinfocus|focusoutblur)$/,Le=/^([^.]*)(?:\.(.+)|)$/;ue.event={global:{},add:function(t,i,n,s,a){var o,r,l,h,u,c,d,p,f,m,g,v=ue._data(t);if(v){for(n.handler&&(h=n,n=h.handler,a=h.selector),n.guid||(n.guid=ue.guid++),(r=v.events)||(r=v.events={}),(c=v.handle)||(c=v.handle=function(t){return typeof ue===V||t&&ue.event.triggered===t.type?e:ue.event.dispatch.apply(c.elem,arguments)},c.elem=t),i=(i||"").match(de)||[""],l=i.length;l--;)o=Le.exec(i[l])||[],f=g=o[1],m=(o[2]||"").split(".").sort(),f&&(u=ue.event.special[f]||{},f=(a?u.delegateType:u.bindType)||f,u=ue.event.special[f]||{},d=ue.extend({type:f,origType:g,data:s,handler:n,guid:n.guid,selector:a,needsContext:a&&ue.expr.match.needsContext.test(a),namespace:m.join(".")},h),(p=r[f])||(p=r[f]=[],p.delegateCount=0,u.setup&&u.setup.call(t,s,m,c)!==!1||(t.addEventListener?t.addEventListener(f,c,!1):t.attachEvent&&t.attachEvent("on"+f,c))),u.add&&(u.add.call(t,d),d.handler.guid||(d.handler.guid=n.guid)),a?p.splice(p.delegateCount++,0,d):p.push(d),ue.event.global[f]=!0);t=null}},remove:function(t,e,i,n,s){var a,o,r,l,h,u,c,d,p,f,m,g=ue.hasData(t)&&ue._data(t);if(g&&(u=g.events)){for(e=(e||"").match(de)||[""],h=e.length;h--;)if(r=Le.exec(e[h])||[],p=m=r[1],f=(r[2]||"").split(".").sort(),p){for(c=ue.event.special[p]||{},p=(n?c.delegateType:c.bindType)||p,d=u[p]||[],r=r[2]&&RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=a=d.length;a--;)o=d[a],!s&&m!==o.origType||i&&i.guid!==o.guid||r&&!r.test(o.namespace)||n&&n!==o.selector&&("**"!==n||!o.selector)||(d.splice(a,1),o.selector&&d.delegateCount--,c.remove&&c.remove.call(t,o));l&&!d.length&&(c.teardown&&c.teardown.call(t,f,g.handle)!==!1||ue.removeEvent(t,p,g.handle),delete u[p])}else for(p in u)ue.event.remove(t,p+e[h],i,n,!0);ue.isEmptyObject(u)&&(delete g.handle,ue._removeData(t,"events"))}},trigger:function(i,n,s,a){var o,r,l,h,u,c,d,p=[s||Q],f=le.call(i,"type")?i.type:i,m=le.call(i,"namespace")?i.namespace.split("."):[];if(l=c=s=s||Q,3!==s.nodeType&&8!==s.nodeType&&!$e.test(f+ue.event.triggered)&&(f.indexOf(".")>=0&&(m=f.split("."),f=m.shift(),m.sort()),r=0>f.indexOf(":")&&"on"+f,i=i[ue.expando]?i:new ue.Event(f,"object"==typeof i&&i),i.isTrigger=a?2:3,i.namespace=m.join("."),i.namespace_re=i.namespace?RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,i.result=e,i.target||(i.target=s),n=null==n?[i]:ue.makeArray(n,[i]),u=ue.event.special[f]||{},a||!u.trigger||u.trigger.apply(s,n)!==!1)){if(!a&&!u.noBubble&&!ue.isWindow(s)){for(h=u.delegateType||f,$e.test(h+f)||(l=l.parentNode);l;l=l.parentNode)p.push(l),c=l;c===(s.ownerDocument||Q)&&p.push(c.defaultView||c.parentWindow||t)}for(d=0;(l=p[d++])&&!i.isPropagationStopped();)i.type=d>1?h:u.bindType||f,o=(ue._data(l,"events")||{})[i.type]&&ue._data(l,"handle"),o&&o.apply(l,n),o=r&&l[r],o&&ue.acceptData(l)&&o.apply&&o.apply(l,n)===!1&&i.preventDefault();if(i.type=f,!a&&!i.isDefaultPrevented()&&(!u._default||u._default.apply(p.pop(),n)===!1)&&ue.acceptData(s)&&r&&s[f]&&!ue.isWindow(s)){c=s[r],c&&(s[r]=null),ue.event.triggered=f;try{s[f]()}catch(g){}ue.event.triggered=e,c&&(s[r]=c)}return i.result}},dispatch:function(t){t=ue.event.fix(t);var i,n,s,a,o,r=[],l=ae.call(arguments),h=(ue._data(this,"events")||{})[t.type]||[],u=ue.event.special[t.type]||{};if(l[0]=t,t.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,t)!==!1){for(r=ue.event.handlers.call(this,t,h),i=0;(a=r[i++])&&!t.isPropagationStopped();)for(t.currentTarget=a.elem,o=0;(s=a.handlers[o++])&&!t.isImmediatePropagationStopped();)(!t.namespace_re||t.namespace_re.test(s.namespace))&&(t.handleObj=s,t.data=s.data,n=((ue.event.special[s.origType]||{}).handle||s.handler).apply(a.elem,l),n!==e&&(t.result=n)===!1&&(t.preventDefault(),t.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,t),t.result}},handlers:function(t,i){var n,s,a,o,r=[],l=i.delegateCount,h=t.target;if(l&&h.nodeType&&(!t.button||"click"!==t.type))for(;h!=this;h=h.parentNode||this)if(1===h.nodeType&&(h.disabled!==!0||"click"!==t.type)){for(a=[],o=0;l>o;o++)s=i[o],n=s.selector+" ",a[n]===e&&(a[n]=s.needsContext?ue(n,this).index(h)>=0:ue.find(n,this,null,[h]).length),a[n]&&a.push(s);a.length&&r.push({elem:h,handlers:a})}return i.length>l&&r.push({elem:this,handlers:i.slice(l)}),r},fix:function(t){if(t[ue.expando])return t;var e,i,n,s=t.type,a=t,o=this.fixHooks[s];for(o||(this.fixHooks[s]=o=je.test(s)?this.mouseHooks:Fe.test(s)?this.keyHooks:{}),n=o.props?this.props.concat(o.props):this.props,t=new ue.Event(a),e=n.length;e--;)i=n[e],t[i]=a[i];return t.target||(t.target=a.srcElement||Q),3===t.target.nodeType&&(t.target=t.target.parentNode),t.metaKey=!!t.metaKey,o.filter?o.filter(t,a):t},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,i){var n,s,a,o=i.button,r=i.fromElement;return null==t.pageX&&null!=i.clientX&&(s=t.target.ownerDocument||Q,a=s.documentElement,n=s.body,t.pageX=i.clientX+(a&&a.scrollLeft||n&&n.scrollLeft||0)-(a&&a.clientLeft||n&&n.clientLeft||0),t.pageY=i.clientY+(a&&a.scrollTop||n&&n.scrollTop||0)-(a&&a.clientTop||n&&n.clientTop||0)),!t.relatedTarget&&r&&(t.relatedTarget=r===t.target?i.toElement:r),t.which||o===e||(t.which=1&o?1:2&o?3:4&o?2:0),t}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==u()&&this.focus)try{return this.focus(),!1}catch(t){}},delegateType:"focusin"},blur:{trigger:function(){return this===u()&&this.blur?(this.blur(),!1):e},delegateType:"focusout"},click:{trigger:function(){return ue.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):e},_default:function(t){return ue.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){t.result!==e&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,i,n){var s=ue.extend(new ue.Event,i,{type:t,isSimulated:!0,originalEvent:{}});n?ue.event.trigger(s,null,e):ue.event.dispatch.call(e,s),s.isDefaultPrevented()&&i.preventDefault()}},ue.removeEvent=Q.removeEventListener?function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i,!1)}:function(t,e,i){var n="on"+e;t.detachEvent&&(typeof t[n]===V&&(t[n]=null),t.detachEvent(n,i))},ue.Event=function(t,i){return this instanceof ue.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||t.returnValue===!1||t.getPreventDefault&&t.getPreventDefault()?l:h):this.type=t,i&&ue.extend(this,i),this.timeStamp=t&&t.timeStamp||ue.now(),this[ue.expando]=!0,e):new ue.Event(t,i)},ue.Event.prototype={isDefaultPrevented:h,isPropagationStopped:h,isImmediatePropagationStopped:h,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=l,t&&(t.preventDefault?t.preventDefault():t.returnValue=!1)},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=l,t&&(t.stopPropagation&&t.stopPropagation(),t.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=l,this.stopPropagation()}},ue.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(t,e){ue.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=this,s=t.relatedTarget,a=t.handleObj;return(!s||s!==n&&!ue.contains(n,s))&&(t.type=a.origType,i=a.handler.apply(this,arguments),t.type=e),i}}}),ue.support.submitBubbles||(ue.event.special.submit={setup:function(){return ue.nodeName(this,"form")?!1:(ue.event.add(this,"click._submit keypress._submit",function(t){var i=t.target,n=ue.nodeName(i,"input")||ue.nodeName(i,"button")?i.form:e;n&&!ue._data(n,"submitBubbles")&&(ue.event.add(n,"submit._submit",function(t){t._submit_bubble=!0}),ue._data(n,"submitBubbles",!0))}),e)},postDispatch:function(t){t._submit_bubble&&(delete t._submit_bubble,this.parentNode&&!t.isTrigger&&ue.event.simulate("submit",this.parentNode,t,!0))},teardown:function(){return ue.nodeName(this,"form")?!1:(ue.event.remove(this,"._submit"),e)}}),ue.support.changeBubbles||(ue.event.special.change={setup:function(){return We.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(ue.event.add(this,"propertychange._change",function(t){"checked"===t.originalEvent.propertyName&&(this._just_changed=!0)}),ue.event.add(this,"click._change",function(t){this._just_changed&&!t.isTrigger&&(this._just_changed=!1),ue.event.simulate("change",this,t,!0)})),!1):(ue.event.add(this,"beforeactivate._change",function(t){var e=t.target;We.test(e.nodeName)&&!ue._data(e,"changeBubbles")&&(ue.event.add(e,"change._change",function(t){!this.parentNode||t.isSimulated||t.isTrigger||ue.event.simulate("change",this.parentNode,t,!0)}),ue._data(e,"changeBubbles",!0))}),e)},handle:function(t){var i=t.target;return this!==i||t.isSimulated||t.isTrigger||"radio"!==i.type&&"checkbox"!==i.type?t.handleObj.handler.apply(this,arguments):e},teardown:function(){return ue.event.remove(this,"._change"),!We.test(this.nodeName)}}),ue.support.focusinBubbles||ue.each({focus:"focusin",blur:"focusout"},function(t,e){var i=0,n=function(t){ue.event.simulate(e,t.target,ue.event.fix(t),!0)};ue.event.special[e]={setup:function(){0===i++&&Q.addEventListener(t,n,!0)},teardown:function(){0===--i&&Q.removeEventListener(t,n,!0)}}}),ue.fn.extend({on:function(t,i,n,s,a){var o,r;if("object"==typeof t){"string"!=typeof i&&(n=n||i,i=e);for(o in t)this.on(o,i,n,t[o],a);return this}if(null==n&&null==s?(s=i,n=i=e):null==s&&("string"==typeof i?(s=n,n=e):(s=n,n=i,i=e)),s===!1)s=h;else if(!s)return this;return 1===a&&(r=s,s=function(t){return ue().off(t),r.apply(this,arguments)},s.guid=r.guid||(r.guid=ue.guid++)),this.each(function(){ue.event.add(this,t,s,n,i)})},one:function(t,e,i,n){return this.on(t,e,i,n,1)},off:function(t,i,n){var s,a;if(t&&t.preventDefault&&t.handleObj)return s=t.handleObj,ue(t.delegateTarget).off(s.namespace?s.origType+"."+s.namespace:s.origType,s.selector,s.handler),this;if("object"==typeof t){for(a in t)this.off(a,i,t[a]);return this}return(i===!1||"function"==typeof i)&&(n=i,i=e),n===!1&&(n=h),this.each(function(){ue.event.remove(this,t,n,i)})},trigger:function(t,e){return this.each(function(){ue.event.trigger(t,e,this)})},triggerHandler:function(t,i){var n=this[0];return n?ue.event.trigger(t,i,n,!0):e}});var Re=/^.[^:#\[\.,]*$/,Be=/^(?:parents|prev(?:Until|All))/,qe=ue.expr.match.needsContext,Ye={children:!0,contents:!0,next:!0,prev:!0};ue.fn.extend({find:function(t){var e,i=[],n=this,s=n.length;if("string"!=typeof t)return this.pushStack(ue(t).filter(function(){for(e=0;s>e;e++)if(ue.contains(n[e],this))return!0}));for(e=0;s>e;e++)ue.find(t,n[e],i);return i=this.pushStack(s>1?ue.unique(i):i),i.selector=this.selector?this.selector+" "+t:t,i},has:function(t){var e,i=ue(t,this),n=i.length;return this.filter(function(){for(e=0;n>e;e++)if(ue.contains(this,i[e]))return!0})},not:function(t){return this.pushStack(d(this,t||[],!0))},filter:function(t){return this.pushStack(d(this,t||[],!1))},is:function(t){return!!d(this,"string"==typeof t&&qe.test(t)?ue(t):t||[],!1).length},closest:function(t,e){for(var i,n=0,s=this.length,a=[],o=qe.test(t)||"string"!=typeof t?ue(t,e||this.context):0;s>n;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(11>i.nodeType&&(o?o.index(i)>-1:1===i.nodeType&&ue.find.matchesSelector(i,t))){i=a.push(i);break}return this.pushStack(a.length>1?ue.unique(a):a)},index:function(t){return t?"string"==typeof t?ue.inArray(this[0],ue(t)):ue.inArray(t.jquery?t[0]:t,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){var i="string"==typeof t?ue(t,e):ue.makeArray(t&&t.nodeType?[t]:t),n=ue.merge(this.get(),i);return this.pushStack(ue.unique(n))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),ue.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return ue.dir(t,"parentNode")},parentsUntil:function(t,e,i){return ue.dir(t,"parentNode",i)},next:function(t){return c(t,"nextSibling")},prev:function(t){return c(t,"previousSibling")},nextAll:function(t){return ue.dir(t,"nextSibling")
},prevAll:function(t){return ue.dir(t,"previousSibling")},nextUntil:function(t,e,i){return ue.dir(t,"nextSibling",i)},prevUntil:function(t,e,i){return ue.dir(t,"previousSibling",i)},siblings:function(t){return ue.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return ue.sibling(t.firstChild)},contents:function(t){return ue.nodeName(t,"iframe")?t.contentDocument||t.contentWindow.document:ue.merge([],t.childNodes)}},function(t,e){ue.fn[t]=function(i,n){var s=ue.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(s=ue.filter(n,s)),this.length>1&&(Ye[t]||(s=ue.unique(s)),Be.test(t)&&(s=s.reverse())),this.pushStack(s)}}),ue.extend({filter:function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?ue.find.matchesSelector(n,t)?[n]:[]:ue.find.matches(t,ue.grep(e,function(t){return 1===t.nodeType}))},dir:function(t,i,n){for(var s=[],a=t[i];a&&9!==a.nodeType&&(n===e||1!==a.nodeType||!ue(a).is(n));)1===a.nodeType&&s.push(a),a=a[i];return s},sibling:function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i}});var Ue="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",Ke=/ jQuery\d+="(?:null|\d+)"/g,Ve=RegExp("<(?:"+Ue+")[\\s/>]","i"),Xe=/^\s+/,Qe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Ge=/<([\w:]+)/,Je=/<tbody/i,Ze=/<|&#?\w+;/,ti=/<(?:script|style|link)/i,ei=/^(?:checkbox|radio)$/i,ii=/checked\s*(?:[^=]|=\s*.checked.)/i,ni=/^$|\/(?:java|ecma)script/i,si=/^true\/(.*)/,ai=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,oi={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:ue.support.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},ri=p(Q),li=ri.appendChild(Q.createElement("div"));oi.optgroup=oi.option,oi.tbody=oi.tfoot=oi.colgroup=oi.caption=oi.thead,oi.th=oi.td,ue.fn.extend({text:function(t){return ue.access(this,function(t){return t===e?ue.text(this):this.empty().append((this[0]&&this[0].ownerDocument||Q).createTextNode(t))},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=f(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=f(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var i,n=t?ue.filter(t,this):this,s=0;null!=(i=n[s]);s++)e||1!==i.nodeType||ue.cleanData(y(i)),i.parentNode&&(e&&ue.contains(i.ownerDocument,i)&&v(y(i,"script")),i.parentNode.removeChild(i));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++){for(1===t.nodeType&&ue.cleanData(y(t,!1));t.firstChild;)t.removeChild(t.firstChild);t.options&&ue.nodeName(t,"select")&&(t.options.length=0)}return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return ue.clone(this,t,e)})},html:function(t){return ue.access(this,function(t){var i=this[0]||{},n=0,s=this.length;if(t===e)return 1===i.nodeType?i.innerHTML.replace(Ke,""):e;if(!("string"!=typeof t||ti.test(t)||!ue.support.htmlSerialize&&Ve.test(t)||!ue.support.leadingWhitespace&&Xe.test(t)||oi[(Ge.exec(t)||["",""])[1].toLowerCase()])){t=t.replace(Qe,"<$1></$2>");try{for(;s>n;n++)i=this[n]||{},1===i.nodeType&&(ue.cleanData(y(i,!1)),i.innerHTML=t);i=0}catch(a){}}i&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=ue.map(this,function(t){return[t.nextSibling,t.parentNode]}),e=0;return this.domManip(arguments,function(i){var n=t[e++],s=t[e++];s&&(n&&n.parentNode!==s&&(n=this.nextSibling),ue(this).remove(),s.insertBefore(i,n))},!0),e?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e,i){t=ne.apply([],t);var n,s,a,o,r,l,h=0,u=this.length,c=this,d=u-1,p=t[0],f=ue.isFunction(p);if(f||!(1>=u||"string"!=typeof p||ue.support.checkClone)&&ii.test(p))return this.each(function(n){var s=c.eq(n);f&&(t[0]=p.call(this,n,s.html())),s.domManip(t,e,i)});if(u&&(l=ue.buildFragment(t,this[0].ownerDocument,!1,!i&&this),n=l.firstChild,1===l.childNodes.length&&(l=n),n)){for(o=ue.map(y(l,"script"),m),a=o.length;u>h;h++)s=l,h!==d&&(s=ue.clone(s,!0,!0),a&&ue.merge(o,y(s,"script"))),e.call(this[h],s,h);if(a)for(r=o[o.length-1].ownerDocument,ue.map(o,g),h=0;a>h;h++)s=o[h],ni.test(s.type||"")&&!ue._data(s,"globalEval")&&ue.contains(r,s)&&(s.src?ue._evalUrl(s.src):ue.globalEval((s.text||s.textContent||s.innerHTML||"").replace(ai,"")));l=n=null}return this}}),ue.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){ue.fn[t]=function(t){for(var i,n=0,s=[],a=ue(t),o=a.length-1;o>=n;n++)i=n===o?this:this.clone(!0),ue(a[n])[e](i),se.apply(s,i.get());return this.pushStack(s)}}),ue.extend({clone:function(t,e,i){var n,s,a,o,r,l=ue.contains(t.ownerDocument,t);if(ue.support.html5Clone||ue.isXMLDoc(t)||!Ve.test("<"+t.nodeName+">")?a=t.cloneNode(!0):(li.innerHTML=t.outerHTML,li.removeChild(a=li.firstChild)),!(ue.support.noCloneEvent&&ue.support.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||ue.isXMLDoc(t)))for(n=y(a),r=y(t),o=0;null!=(s=r[o]);++o)n[o]&&b(s,n[o]);if(e)if(i)for(r=r||y(t),n=n||y(a),o=0;null!=(s=r[o]);o++)_(s,n[o]);else _(t,a);return n=y(a,"script"),n.length>0&&v(n,!l&&y(t,"script")),n=r=s=null,a},buildFragment:function(t,e,i,n){for(var s,a,o,r,l,h,u,c=t.length,d=p(e),f=[],m=0;c>m;m++)if(a=t[m],a||0===a)if("object"===ue.type(a))ue.merge(f,a.nodeType?[a]:a);else if(Ze.test(a)){for(r=r||d.appendChild(e.createElement("div")),l=(Ge.exec(a)||["",""])[1].toLowerCase(),u=oi[l]||oi._default,r.innerHTML=u[1]+a.replace(Qe,"<$1></$2>")+u[2],s=u[0];s--;)r=r.lastChild;if(!ue.support.leadingWhitespace&&Xe.test(a)&&f.push(e.createTextNode(Xe.exec(a)[0])),!ue.support.tbody)for(a="table"!==l||Je.test(a)?"<table>"!==u[1]||Je.test(a)?0:r:r.firstChild,s=a&&a.childNodes.length;s--;)ue.nodeName(h=a.childNodes[s],"tbody")&&!h.childNodes.length&&a.removeChild(h);for(ue.merge(f,r.childNodes),r.textContent="";r.firstChild;)r.removeChild(r.firstChild);r=d.lastChild}else f.push(e.createTextNode(a));for(r&&d.removeChild(r),ue.support.appendChecked||ue.grep(y(f,"input"),x),m=0;a=f[m++];)if((!n||-1===ue.inArray(a,n))&&(o=ue.contains(a.ownerDocument,a),r=y(d.appendChild(a),"script"),o&&v(r),i))for(s=0;a=r[s++];)ni.test(a.type||"")&&i.push(a);return r=null,d},cleanData:function(t,e){for(var i,n,s,a,o=0,r=ue.expando,l=ue.cache,h=ue.support.deleteExpando,u=ue.event.special;null!=(i=t[o]);o++)if((e||ue.acceptData(i))&&(s=i[r],a=s&&l[s])){if(a.events)for(n in a.events)u[n]?ue.event.remove(i,n):ue.removeEvent(i,n,a.handle);l[s]&&(delete l[s],h?delete i[r]:typeof i.removeAttribute!==V?i.removeAttribute(r):i[r]=null,ee.push(s))}},_evalUrl:function(t){return ue.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})}}),ue.fn.extend({wrapAll:function(t){if(ue.isFunction(t))return this.each(function(e){ue(this).wrapAll(t.call(this,e))});if(this[0]){var e=ue(t,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstChild&&1===t.firstChild.nodeType;)t=t.firstChild;return t}).append(this)}return this},wrapInner:function(t){return this.each(ue.isFunction(t)?function(e){ue(this).wrapInner(t.call(this,e))}:function(){var e=ue(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=ue.isFunction(t);return this.each(function(i){ue(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(){return this.parent().each(function(){ue.nodeName(this,"body")||ue(this).replaceWith(this.childNodes)}).end()}});var hi,ui,ci,di=/alpha\([^)]*\)/i,pi=/opacity\s*=\s*([^)]*)/,fi=/^(top|right|bottom|left)$/,mi=/^(none|table(?!-c[ea]).+)/,gi=/^margin/,vi=RegExp("^("+ce+")(.*)$","i"),_i=RegExp("^("+ce+")(?!px)[a-z%]+$","i"),bi=RegExp("^([+-])=("+ce+")","i"),yi={BODY:"block"},xi={position:"absolute",visibility:"hidden",display:"block"},wi={letterSpacing:0,fontWeight:400},ki=["Top","Right","Bottom","Left"],Di=["Webkit","O","Moz","ms"];ue.fn.extend({css:function(t,i){return ue.access(this,function(t,i,n){var s,a,o={},r=0;if(ue.isArray(i)){for(a=ui(t),s=i.length;s>r;r++)o[i[r]]=ue.css(t,i[r],!1,a);return o}return n!==e?ue.style(t,i,n):ue.css(t,i)},t,i,arguments.length>1)},show:function(){return D(this,!0)},hide:function(){return D(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){k(this)?ue(this).show():ue(this).hide()})}}),ue.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=ci(t,"opacity");return""===i?"1":i}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":ue.support.cssFloat?"cssFloat":"styleFloat"},style:function(t,i,n,s){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var a,o,r,l=ue.camelCase(i),h=t.style;if(i=ue.cssProps[l]||(ue.cssProps[l]=w(h,l)),r=ue.cssHooks[i]||ue.cssHooks[l],n===e)return r&&"get"in r&&(a=r.get(t,!1,s))!==e?a:h[i];if(o=typeof n,"string"===o&&(a=bi.exec(n))&&(n=(a[1]+1)*a[2]+parseFloat(ue.css(t,i)),o="number"),!(null==n||"number"===o&&isNaN(n)||("number"!==o||ue.cssNumber[l]||(n+="px"),ue.support.clearCloneStyle||""!==n||0!==i.indexOf("background")||(h[i]="inherit"),r&&"set"in r&&(n=r.set(t,n,s))===e)))try{h[i]=n}catch(u){}}},css:function(t,i,n,s){var a,o,r,l=ue.camelCase(i);return i=ue.cssProps[l]||(ue.cssProps[l]=w(t.style,l)),r=ue.cssHooks[i]||ue.cssHooks[l],r&&"get"in r&&(o=r.get(t,!0,n)),o===e&&(o=ci(t,i,s)),"normal"===o&&i in wi&&(o=wi[i]),""===n||n?(a=parseFloat(o),n===!0||ue.isNumeric(a)?a||0:o):o}}),t.getComputedStyle?(ui=function(e){return t.getComputedStyle(e,null)},ci=function(t,i,n){var s,a,o,r=n||ui(t),l=r?r.getPropertyValue(i)||r[i]:e,h=t.style;return r&&(""!==l||ue.contains(t.ownerDocument,t)||(l=ue.style(t,i)),_i.test(l)&&gi.test(i)&&(s=h.width,a=h.minWidth,o=h.maxWidth,h.minWidth=h.maxWidth=h.width=l,l=r.width,h.width=s,h.minWidth=a,h.maxWidth=o)),l}):Q.documentElement.currentStyle&&(ui=function(t){return t.currentStyle},ci=function(t,i,n){var s,a,o,r=n||ui(t),l=r?r[i]:e,h=t.style;return null==l&&h&&h[i]&&(l=h[i]),_i.test(l)&&!fi.test(i)&&(s=h.left,a=t.runtimeStyle,o=a&&a.left,o&&(a.left=t.currentStyle.left),h.left="fontSize"===i?"1em":l,l=h.pixelLeft+"px",h.left=s,o&&(a.left=o)),""===l?"auto":l}),ue.each(["height","width"],function(t,i){ue.cssHooks[i]={get:function(t,n,s){return n?0===t.offsetWidth&&mi.test(ue.css(t,"display"))?ue.swap(t,xi,function(){return M(t,i,s)}):M(t,i,s):e},set:function(t,e,n){var s=n&&ui(t);return C(t,e,n?T(t,i,n,ue.support.boxSizing&&"border-box"===ue.css(t,"boxSizing",!1,s),s):0)}}}),ue.support.opacity||(ue.cssHooks.opacity={get:function(t,e){return pi.test((e&&t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":e?"1":""},set:function(t,e){var i=t.style,n=t.currentStyle,s=ue.isNumeric(e)?"alpha(opacity="+100*e+")":"",a=n&&n.filter||i.filter||"";i.zoom=1,(e>=1||""===e)&&""===ue.trim(a.replace(di,""))&&i.removeAttribute&&(i.removeAttribute("filter"),""===e||n&&!n.filter)||(i.filter=di.test(a)?a.replace(di,s):a+" "+s)}}),ue(function(){ue.support.reliableMarginRight||(ue.cssHooks.marginRight={get:function(t,i){return i?ue.swap(t,{display:"inline-block"},ci,[t,"marginRight"]):e}}),!ue.support.pixelPosition&&ue.fn.position&&ue.each(["top","left"],function(t,i){ue.cssHooks[i]={get:function(t,n){return n?(n=ci(t,i),_i.test(n)?ue(t).position()[i]+"px":n):e}}})}),ue.expr&&ue.expr.filters&&(ue.expr.filters.hidden=function(t){return 0>=t.offsetWidth&&0>=t.offsetHeight||!ue.support.reliableHiddenOffsets&&"none"===(t.style&&t.style.display||ue.css(t,"display"))},ue.expr.filters.visible=function(t){return!ue.expr.filters.hidden(t)}),ue.each({margin:"",padding:"",border:"Width"},function(t,e){ue.cssHooks[t+e]={expand:function(i){for(var n=0,s={},a="string"==typeof i?i.split(" "):[i];4>n;n++)s[t+ki[n]+e]=a[n]||a[n-2]||a[0];return s}},gi.test(t)||(ue.cssHooks[t+e].set=C)});var Ci=/%20/g,Ti=/\[\]$/,Mi=/\r?\n/g,Si=/^(?:submit|button|image|reset|file)$/i,Ii=/^(?:input|select|textarea|keygen)/i;ue.fn.extend({serialize:function(){return ue.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=ue.prop(this,"elements");return t?ue.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!ue(this).is(":disabled")&&Ii.test(this.nodeName)&&!Si.test(t)&&(this.checked||!ei.test(t))}).map(function(t,e){var i=ue(this).val();return null==i?null:ue.isArray(i)?ue.map(i,function(t){return{name:e.name,value:t.replace(Mi,"\r\n")}}):{name:e.name,value:i.replace(Mi,"\r\n")}}).get()}}),ue.param=function(t,i){var n,s=[],a=function(t,e){e=ue.isFunction(e)?e():null==e?"":e,s[s.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(i===e&&(i=ue.ajaxSettings&&ue.ajaxSettings.traditional),ue.isArray(t)||t.jquery&&!ue.isPlainObject(t))ue.each(t,function(){a(this.name,this.value)});else for(n in t)N(n,t[n],i,a);return s.join("&").replace(Ci,"+")},ue.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){ue.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),ue.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)}});var Ni,Pi,zi=ue.now(),Ai=/\?/,Ei=/#.*$/,Oi=/([?&])_=[^&]*/,Hi=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Wi=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Fi=/^(?:GET|HEAD)$/,ji=/^\/\//,$i=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,Li=ue.fn.load,Ri={},Bi={},qi="*/".concat("*");try{Pi=X.href}catch(Yi){Pi=Q.createElement("a"),Pi.href="",Pi=Pi.href}Ni=$i.exec(Pi.toLowerCase())||[],ue.fn.load=function(t,i,n){if("string"!=typeof t&&Li)return Li.apply(this,arguments);var s,a,o,r=this,l=t.indexOf(" ");return l>=0&&(s=t.slice(l,t.length),t=t.slice(0,l)),ue.isFunction(i)?(n=i,i=e):i&&"object"==typeof i&&(o="POST"),r.length>0&&ue.ajax({url:t,type:o,dataType:"html",data:i}).done(function(t){a=arguments,r.html(s?ue("<div>").append(ue.parseHTML(t)).find(s):t)}).complete(n&&function(t,e){r.each(n,a||[t.responseText,e,t])}),this},ue.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){ue.fn[e]=function(t){return this.on(e,t)}}),ue.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Pi,type:"GET",isLocal:Wi.test(Ni[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qi,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":ue.parseJSON,"text xml":ue.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?A(A(t,ue.ajaxSettings),e):A(ue.ajaxSettings,t)},ajaxPrefilter:P(Ri),ajaxTransport:P(Bi),ajax:function(t,i){function n(t,i,n,s){var a,c,_,b,x,k=i;2!==y&&(y=2,l&&clearTimeout(l),u=e,r=s||"",w.readyState=t>0?4:0,a=t>=200&&300>t||304===t,n&&(b=E(d,w,n)),b=O(d,b,w,a),a?(d.ifModified&&(x=w.getResponseHeader("Last-Modified"),x&&(ue.lastModified[o]=x),x=w.getResponseHeader("etag"),x&&(ue.etag[o]=x)),204===t||"HEAD"===d.type?k="nocontent":304===t?k="notmodified":(k=b.state,c=b.data,_=b.error,a=!_)):(_=k,(t||!k)&&(k="error",0>t&&(t=0))),w.status=t,w.statusText=(i||k)+"",a?m.resolveWith(p,[c,k,w]):m.rejectWith(p,[w,k,_]),w.statusCode(v),v=e,h&&f.trigger(a?"ajaxSuccess":"ajaxError",[w,d,a?c:_]),g.fireWith(p,[w,k]),h&&(f.trigger("ajaxComplete",[w,d]),--ue.active||ue.event.trigger("ajaxStop")))}"object"==typeof t&&(i=t,t=e),i=i||{};var s,a,o,r,l,h,u,c,d=ue.ajaxSetup({},i),p=d.context||d,f=d.context&&(p.nodeType||p.jquery)?ue(p):ue.event,m=ue.Deferred(),g=ue.Callbacks("once memory"),v=d.statusCode||{},_={},b={},y=0,x="canceled",w={readyState:0,getResponseHeader:function(t){var e;if(2===y){if(!c)for(c={};e=Hi.exec(r);)c[e[1].toLowerCase()]=e[2];e=c[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===y?r:null},setRequestHeader:function(t,e){var i=t.toLowerCase();return y||(t=b[i]=b[i]||t,_[t]=e),this},overrideMimeType:function(t){return y||(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>y)for(e in t)v[e]=[v[e],t[e]];else w.always(t[w.status]);return this},abort:function(t){var e=t||x;return u&&u.abort(e),n(0,e),this}};if(m.promise(w).complete=g.add,w.success=w.done,w.error=w.fail,d.url=((t||d.url||Pi)+"").replace(Ei,"").replace(ji,Ni[1]+"//"),d.type=i.method||i.type||d.method||d.type,d.dataTypes=ue.trim(d.dataType||"*").toLowerCase().match(de)||[""],null==d.crossDomain&&(s=$i.exec(d.url.toLowerCase()),d.crossDomain=!(!s||s[1]===Ni[1]&&s[2]===Ni[2]&&(s[3]||("http:"===s[1]?"80":"443"))===(Ni[3]||("http:"===Ni[1]?"80":"443")))),d.data&&d.processData&&"string"!=typeof d.data&&(d.data=ue.param(d.data,d.traditional)),z(Ri,d,i,w),2===y)return w;h=d.global,h&&0===ue.active++&&ue.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Fi.test(d.type),o=d.url,d.hasContent||(d.data&&(o=d.url+=(Ai.test(o)?"&":"?")+d.data,delete d.data),d.cache===!1&&(d.url=Oi.test(o)?o.replace(Oi,"$1_="+zi++):o+(Ai.test(o)?"&":"?")+"_="+zi++)),d.ifModified&&(ue.lastModified[o]&&w.setRequestHeader("If-Modified-Since",ue.lastModified[o]),ue.etag[o]&&w.setRequestHeader("If-None-Match",ue.etag[o])),(d.data&&d.hasContent&&d.contentType!==!1||i.contentType)&&w.setRequestHeader("Content-Type",d.contentType),w.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+qi+"; q=0.01":""):d.accepts["*"]);for(a in d.headers)w.setRequestHeader(a,d.headers[a]);if(d.beforeSend&&(d.beforeSend.call(p,w,d)===!1||2===y))return w.abort();x="abort";for(a in{success:1,error:1,complete:1})w[a](d[a]);if(u=z(Bi,d,i,w)){w.readyState=1,h&&f.trigger("ajaxSend",[w,d]),d.async&&d.timeout>0&&(l=setTimeout(function(){w.abort("timeout")},d.timeout));try{y=1,u.send(_,n)}catch(k){if(!(2>y))throw k;n(-1,k)}}else n(-1,"No Transport");return w},getJSON:function(t,e,i){return ue.get(t,e,i,"json")},getScript:function(t,i){return ue.get(t,e,i,"script")}}),ue.each(["get","post"],function(t,i){ue[i]=function(t,n,s,a){return ue.isFunction(n)&&(a=a||s,s=n,n=e),ue.ajax({url:t,type:i,dataType:a,data:n,success:s})}}),ue.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return ue.globalEval(t),t}}}),ue.ajaxPrefilter("script",function(t){t.cache===e&&(t.cache=!1),t.crossDomain&&(t.type="GET",t.global=!1)}),ue.ajaxTransport("script",function(t){if(t.crossDomain){var i,n=Q.head||ue("head")[0]||Q.documentElement;return{send:function(e,s){i=Q.createElement("script"),i.async=!0,t.scriptCharset&&(i.charset=t.scriptCharset),i.src=t.url,i.onload=i.onreadystatechange=function(t,e){(e||!i.readyState||/loaded|complete/.test(i.readyState))&&(i.onload=i.onreadystatechange=null,i.parentNode&&i.parentNode.removeChild(i),i=null,e||s(200,"success"))},n.insertBefore(i,n.firstChild)},abort:function(){i&&i.onload(e,!0)}}}});var Ui=[],Ki=/(=)\?(?=&|$)|\?\?/;ue.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ui.pop()||ue.expando+"_"+zi++;return this[t]=!0,t}}),ue.ajaxPrefilter("json jsonp",function(i,n,s){var a,o,r,l=i.jsonp!==!1&&(Ki.test(i.url)?"url":"string"==typeof i.data&&!(i.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ki.test(i.data)&&"data");return l||"jsonp"===i.dataTypes[0]?(a=i.jsonpCallback=ue.isFunction(i.jsonpCallback)?i.jsonpCallback():i.jsonpCallback,l?i[l]=i[l].replace(Ki,"$1"+a):i.jsonp!==!1&&(i.url+=(Ai.test(i.url)?"&":"?")+i.jsonp+"="+a),i.converters["script json"]=function(){return r||ue.error(a+" was not called"),r[0]},i.dataTypes[0]="json",o=t[a],t[a]=function(){r=arguments},s.always(function(){t[a]=o,i[a]&&(i.jsonpCallback=n.jsonpCallback,Ui.push(a)),r&&ue.isFunction(o)&&o(r[0]),r=o=e}),"script"):e});var Vi,Xi,Qi=0,Gi=t.ActiveXObject&&function(){var t;for(t in Vi)Vi[t](e,!0)};ue.ajaxSettings.xhr=t.ActiveXObject?function(){return!this.isLocal&&H()||W()}:H,Xi=ue.ajaxSettings.xhr(),ue.support.cors=!!Xi&&"withCredentials"in Xi,Xi=ue.support.ajax=!!Xi,Xi&&ue.ajaxTransport(function(i){if(!i.crossDomain||ue.support.cors){var n;return{send:function(s,a){var o,r,l=i.xhr();if(i.username?l.open(i.type,i.url,i.async,i.username,i.password):l.open(i.type,i.url,i.async),i.xhrFields)for(r in i.xhrFields)l[r]=i.xhrFields[r];i.mimeType&&l.overrideMimeType&&l.overrideMimeType(i.mimeType),i.crossDomain||s["X-Requested-With"]||(s["X-Requested-With"]="XMLHttpRequest");try{for(r in s)l.setRequestHeader(r,s[r])}catch(h){}l.send(i.hasContent&&i.data||null),n=function(t,s){var r,h,u,c;try{if(n&&(s||4===l.readyState))if(n=e,o&&(l.onreadystatechange=ue.noop,Gi&&delete Vi[o]),s)4!==l.readyState&&l.abort();else{c={},r=l.status,h=l.getAllResponseHeaders(),"string"==typeof l.responseText&&(c.text=l.responseText);try{u=l.statusText}catch(d){u=""}r||!i.isLocal||i.crossDomain?1223===r&&(r=204):r=c.text?200:404}}catch(p){s||a(-1,p)}c&&a(r,u,c,h)},i.async?4===l.readyState?setTimeout(n):(o=++Qi,Gi&&(Vi||(Vi={},ue(t).unload(Gi)),Vi[o]=n),l.onreadystatechange=n):n()},abort:function(){n&&n(e,!0)}}}});var Ji,Zi,tn=/^(?:toggle|show|hide)$/,en=RegExp("^(?:([+-])=|)("+ce+")([a-z%]*)$","i"),nn=/queueHooks$/,sn=[R],an={"*":[function(t,e){var i=this.createTween(t,e),n=i.cur(),s=en.exec(e),a=s&&s[3]||(ue.cssNumber[t]?"":"px"),o=(ue.cssNumber[t]||"px"!==a&&+n)&&en.exec(ue.css(i.elem,t)),r=1,l=20;if(o&&o[3]!==a){a=a||o[3],s=s||[],o=+n||1;do r=r||".5",o/=r,ue.style(i.elem,t,o+a);while(r!==(r=i.cur()/n)&&1!==r&&--l)}return s&&(o=i.start=+o||+n||0,i.unit=a,i.end=s[1]?o+(s[1]+1)*s[2]:+s[2]),i}]};ue.Animation=ue.extend($,{tweener:function(t,e){ue.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var i,n=0,s=t.length;s>n;n++)i=t[n],an[i]=an[i]||[],an[i].unshift(e)},prefilter:function(t,e){e?sn.unshift(t):sn.push(t)}}),ue.Tween=B,B.prototype={constructor:B,init:function(t,e,i,n,s,a){this.elem=t,this.prop=i,this.easing=s||"swing",this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=a||(ue.cssNumber[i]?"":"px")},cur:function(){var t=B.propHooks[this.prop];return t&&t.get?t.get(this):B.propHooks._default.get(this)},run:function(t){var e,i=B.propHooks[this.prop];return this.pos=e=this.options.duration?ue.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):B.propHooks._default.set(this),this}},B.prototype.init.prototype=B.prototype,B.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=ue.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){ue.fx.step[t.prop]?ue.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[ue.cssProps[t.prop]]||ue.cssHooks[t.prop])?ue.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},B.propHooks.scrollTop=B.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},ue.each(["toggle","show","hide"],function(t,e){var i=ue.fn[e];ue.fn[e]=function(t,n,s){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(q(e,!0),t,n,s)}}),ue.fn.extend({fadeTo:function(t,e,i,n){return this.filter(k).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var s=ue.isEmptyObject(t),a=ue.speed(e,i,n),o=function(){var e=$(this,ue.extend({},t),a);(s||ue._data(this,"finish"))&&e.stop(!0)};return o.finish=o,s||a.queue===!1?this.each(o):this.queue(a.queue,o)},stop:function(t,i,n){var s=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=i,i=t,t=e),i&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,i=null!=t&&t+"queueHooks",a=ue.timers,o=ue._data(this);if(i)o[i]&&o[i].stop&&s(o[i]);else for(i in o)o[i]&&o[i].stop&&nn.test(i)&&s(o[i]);for(i=a.length;i--;)a[i].elem!==this||null!=t&&a[i].queue!==t||(a[i].anim.stop(n),e=!1,a.splice(i,1));(e||!n)&&ue.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,i=ue._data(this),n=i[t+"queue"],s=i[t+"queueHooks"],a=ue.timers,o=n?n.length:0;for(i.finish=!0,ue.queue(this,t,[]),s&&s.stop&&s.stop.call(this,!0),e=a.length;e--;)a[e].elem===this&&a[e].queue===t&&(a[e].anim.stop(!0),a.splice(e,1));for(e=0;o>e;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish})}}),ue.each({slideDown:q("show"),slideUp:q("hide"),slideToggle:q("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){ue.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}}),ue.speed=function(t,e,i){var n=t&&"object"==typeof t?ue.extend({},t):{complete:i||!i&&e||ue.isFunction(t)&&t,duration:t,easing:i&&e||e&&!ue.isFunction(e)&&e};return n.duration=ue.fx.off?0:"number"==typeof n.duration?n.duration:n.duration in ue.fx.speeds?ue.fx.speeds[n.duration]:ue.fx.speeds._default,(null==n.queue||n.queue===!0)&&(n.queue="fx"),n.old=n.complete,n.complete=function(){ue.isFunction(n.old)&&n.old.call(this),n.queue&&ue.dequeue(this,n.queue)},n},ue.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},ue.timers=[],ue.fx=B.prototype.init,ue.fx.tick=function(){var t,i=ue.timers,n=0;for(Ji=ue.now();i.length>n;n++)t=i[n],t()||i[n]!==t||i.splice(n--,1);i.length||ue.fx.stop(),Ji=e},ue.fx.timer=function(t){t()&&ue.timers.push(t)&&ue.fx.start()},ue.fx.interval=13,ue.fx.start=function(){Zi||(Zi=setInterval(ue.fx.tick,ue.fx.interval))},ue.fx.stop=function(){clearInterval(Zi),Zi=null},ue.fx.speeds={slow:600,fast:200,_default:400},ue.fx.step={},ue.expr&&ue.expr.filters&&(ue.expr.filters.animated=function(t){return ue.grep(ue.timers,function(e){return t===e.elem}).length}),ue.fn.offset=function(t){if(arguments.length)return t===e?this:this.each(function(e){ue.offset.setOffset(this,t,e)});var i,n,s={top:0,left:0},a=this[0],o=a&&a.ownerDocument;return o?(i=o.documentElement,ue.contains(i,a)?(typeof a.getBoundingClientRect!==V&&(s=a.getBoundingClientRect()),n=Y(o),{top:s.top+(n.pageYOffset||i.scrollTop)-(i.clientTop||0),left:s.left+(n.pageXOffset||i.scrollLeft)-(i.clientLeft||0)}):s):void 0},ue.offset={setOffset:function(t,e,i){var n=ue.css(t,"position");"static"===n&&(t.style.position="relative");var s,a,o=ue(t),r=o.offset(),l=ue.css(t,"top"),h=ue.css(t,"left"),u=("absolute"===n||"fixed"===n)&&ue.inArray("auto",[l,h])>-1,c={},d={};u?(d=o.position(),s=d.top,a=d.left):(s=parseFloat(l)||0,a=parseFloat(h)||0),ue.isFunction(e)&&(e=e.call(t,i,r)),null!=e.top&&(c.top=e.top-r.top+s),null!=e.left&&(c.left=e.left-r.left+a),"using"in e?e.using.call(t,c):o.css(c)}},ue.fn.extend({position:function(){if(this[0]){var t,e,i={top:0,left:0},n=this[0];return"fixed"===ue.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),ue.nodeName(t[0],"html")||(i=t.offset()),i.top+=ue.css(t[0],"borderTopWidth",!0),i.left+=ue.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-ue.css(n,"marginTop",!0),left:e.left-i.left-ue.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||G;t&&!ue.nodeName(t,"html")&&"static"===ue.css(t,"position");)t=t.offsetParent;return t||G})}}),ue.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var n=/Y/.test(i);ue.fn[t]=function(s){return ue.access(this,function(t,s,a){var o=Y(t);return a===e?o?i in o?o[i]:o.document.documentElement[s]:t[s]:(o?o.scrollTo(n?ue(o).scrollLeft():a,n?a:ue(o).scrollTop()):t[s]=a,e)},t,s,arguments.length,null)}}),ue.each({Height:"height",Width:"width"},function(t,i){ue.each({padding:"inner"+t,content:i,"":"outer"+t},function(n,s){ue.fn[s]=function(s,a){var o=arguments.length&&(n||"boolean"!=typeof s),r=n||(s===!0||a===!0?"margin":"border");return ue.access(this,function(i,n,s){var a;return ue.isWindow(i)?i.document.documentElement["client"+t]:9===i.nodeType?(a=i.documentElement,Math.max(i.body["scroll"+t],a["scroll"+t],i.body["offset"+t],a["offset"+t],a["client"+t])):s===e?ue.css(i,n,r):ue.style(i,n,s,r)},i,o?s:e,o,null)}})}),ue.fn.size=function(){return this.length},ue.fn.andSelf=ue.fn.addBack,"object"==typeof module&&module&&"object"==typeof module.exports?module.exports=ue:(t.jQuery=t.$=ue,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ue}))}(window),define("lib.jquery",function(){}),function(t,e){function i(e,i){var s,a,o,r=e.nodeName.toLowerCase();return"area"===r?(s=e.parentNode,a=s.name,e.href&&a&&"map"===s.nodeName.toLowerCase()?(o=t("img[usemap=#"+a+"]")[0],!!o&&n(o)):!1):(/input|select|textarea|button|object/.test(r)?!e.disabled:"a"===r?e.href||i:i)&&n(e)}function n(e){return t.expr.filters.visible(e)&&!t(e).parents().addBack().filter(function(){return"hidden"===t.css(this,"visibility")}).length}var s=0,a=/^ui-id-\d+$/;t.ui=t.ui||{},t.extend(t.ui,{version:"1.10.4",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),t.fn.extend({focus:function(e){return function(i,n){return"number"==typeof i?this.each(function(){var e=this;setTimeout(function(){t(e).focus(),n&&n.call(e)},i)}):e.apply(this,arguments)}}(t.fn.focus),scrollParent:function(){var e;return e=t.ui.ie&&/(static|relative)/.test(this.css("position"))||/absolute/.test(this.css("position"))?this.parents().filter(function(){return/(relative|absolute|fixed)/.test(t.css(this,"position"))&&/(auto|scroll)/.test(t.css(this,"overflow")+t.css(this,"overflow-y")+t.css(this,"overflow-x"))}).eq(0):this.parents().filter(function(){return/(auto|scroll)/.test(t.css(this,"overflow")+t.css(this,"overflow-y")+t.css(this,"overflow-x"))}).eq(0),/fixed/.test(this.css("position"))||!e.length?t(document):e},zIndex:function(i){if(i!==e)return this.css("zIndex",i);if(this.length)for(var n,s,a=t(this[0]);a.length&&a[0]!==document;){if(n=a.css("position"),("absolute"===n||"relative"===n||"fixed"===n)&&(s=parseInt(a.css("zIndex"),10),!isNaN(s)&&0!==s))return s;a=a.parent()}return 0},uniqueId:function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++s)})},removeUniqueId:function(){return this.each(function(){a.test(this.id)&&t(this).removeAttr("id")})}}),t.extend(t.expr[":"],{data:t.expr.createPseudo?t.expr.createPseudo(function(e){return function(i){return!!t.data(i,e)}}):function(e,i,n){return!!t.data(e,n[3])},focusable:function(e){return i(e,!isNaN(t.attr(e,"tabindex")))},tabbable:function(e){var n=t.attr(e,"tabindex"),s=isNaN(n);return(s||n>=0)&&i(e,!s)}}),t("<a>").outerWidth(1).jquery||t.each(["Width","Height"],function(i,n){function s(e,i,n,s){return t.each(a,function(){i-=parseFloat(t.css(e,"padding"+this))||0,n&&(i-=parseFloat(t.css(e,"border"+this+"Width"))||0),s&&(i-=parseFloat(t.css(e,"margin"+this))||0)
}),i}var a="Width"===n?["Left","Right"]:["Top","Bottom"],o=n.toLowerCase(),r={innerWidth:t.fn.innerWidth,innerHeight:t.fn.innerHeight,outerWidth:t.fn.outerWidth,outerHeight:t.fn.outerHeight};t.fn["inner"+n]=function(i){return i===e?r["inner"+n].call(this):this.each(function(){t(this).css(o,s(this,i)+"px")})},t.fn["outer"+n]=function(e,i){return"number"!=typeof e?r["outer"+n].call(this,e):this.each(function(){t(this).css(o,s(this,e,!0,i)+"px")})}}),t.fn.addBack||(t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(t.fn.removeData=function(e){return function(i){return arguments.length?e.call(this,t.camelCase(i)):e.call(this)}}(t.fn.removeData)),t.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()),t.support.selectstart="onselectstart"in document.createElement("div"),t.fn.extend({disableSelection:function(){return this.bind((t.support.selectstart?"selectstart":"mousedown")+".ui-disableSelection",function(t){t.preventDefault()})},enableSelection:function(){return this.unbind(".ui-disableSelection")}}),t.extend(t.ui,{plugin:{add:function(e,i,n){var s,a=t.ui[e].prototype;for(s in n)a.plugins[s]=a.plugins[s]||[],a.plugins[s].push([i,n[s]])},call:function(t,e,i){var n,s=t.plugins[e];if(s&&t.element[0].parentNode&&11!==t.element[0].parentNode.nodeType)for(n=0;s.length>n;n++)t.options[s[n][0]]&&s[n][1].apply(t.element,i)}},hasScroll:function(e,i){if("hidden"===t(e).css("overflow"))return!1;var n=i&&"left"===i?"scrollLeft":"scrollTop",s=!1;return e[n]>0?!0:(e[n]=1,s=e[n]>0,e[n]=0,s)}})}(jQuery),function(t,e){var i=0,n=Array.prototype.slice,s=t.cleanData;t.cleanData=function(e){for(var i,n=0;null!=(i=e[n]);n++)try{t(i).triggerHandler("remove")}catch(a){}s(e)},t.widget=function(i,n,s){var a,o,r,l,h={},u=i.split(".")[0];i=i.split(".")[1],a=u+"-"+i,s||(s=n,n=t.Widget),t.expr[":"][a.toLowerCase()]=function(e){return!!t.data(e,a)},t[u]=t[u]||{},o=t[u][i],r=t[u][i]=function(t,i){return this._createWidget?(arguments.length&&this._createWidget(t,i),e):new r(t,i)},t.extend(r,o,{version:s.version,_proto:t.extend({},s),_childConstructors:[]}),l=new n,l.options=t.widget.extend({},l.options),t.each(s,function(i,s){return t.isFunction(s)?(h[i]=function(){var t=function(){return n.prototype[i].apply(this,arguments)},e=function(t){return n.prototype[i].apply(this,t)};return function(){var i,n=this._super,a=this._superApply;return this._super=t,this._superApply=e,i=s.apply(this,arguments),this._super=n,this._superApply=a,i}}(),e):(h[i]=s,e)}),r.prototype=t.widget.extend(l,{widgetEventPrefix:o?l.widgetEventPrefix||i:i},h,{constructor:r,namespace:u,widgetName:i,widgetFullName:a}),o?(t.each(o._childConstructors,function(e,i){var n=i.prototype;t.widget(n.namespace+"."+n.widgetName,r,i._proto)}),delete o._childConstructors):n._childConstructors.push(r),t.widget.bridge(i,r)},t.widget.extend=function(i){for(var s,a,o=n.call(arguments,1),r=0,l=o.length;l>r;r++)for(s in o[r])a=o[r][s],o[r].hasOwnProperty(s)&&a!==e&&(i[s]=t.isPlainObject(a)?t.isPlainObject(i[s])?t.widget.extend({},i[s],a):t.widget.extend({},a):a);return i},t.widget.bridge=function(i,s){var a=s.prototype.widgetFullName||i;t.fn[i]=function(o){var r="string"==typeof o,l=n.call(arguments,1),h=this;return o=!r&&l.length?t.widget.extend.apply(null,[o].concat(l)):o,this.each(r?function(){var n,s=t.data(this,a);return s?t.isFunction(s[o])&&"_"!==o.charAt(0)?(n=s[o].apply(s,l),n!==s&&n!==e?(h=n&&n.jquery?h.pushStack(n.get()):n,!1):e):t.error("no such method '"+o+"' for "+i+" widget instance"):t.error("cannot call methods on "+i+" prior to initialization; attempted to call method '"+o+"'")}:function(){var e=t.data(this,a);e?e.option(o||{})._init():t.data(this,a,new s(o,this))}),h}},t.Widget=function(){},t.Widget._childConstructors=[],t.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(e,n){n=t(n||this.defaultElement||this)[0],this.element=t(n),this.uuid=i++,this.eventNamespace="."+this.widgetName+this.uuid,this.options=t.widget.extend({},this.options,this._getCreateOptions(),e),this.bindings=t(),this.hoverable=t(),this.focusable=t(),n!==this&&(t.data(n,this.widgetFullName,this),this._on(!0,this.element,{remove:function(t){t.target===n&&this.destroy()}}),this.document=t(n.style?n.ownerDocument:n.document||n),this.window=t(this.document[0].defaultView||this.document[0].parentWindow)),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:t.noop,_getCreateEventData:t.noop,_create:t.noop,_init:t.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData(t.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:t.noop,widget:function(){return this.element},option:function(i,n){var s,a,o,r=i;if(0===arguments.length)return t.widget.extend({},this.options);if("string"==typeof i)if(r={},s=i.split("."),i=s.shift(),s.length){for(a=r[i]=t.widget.extend({},this.options[i]),o=0;s.length-1>o;o++)a[s[o]]=a[s[o]]||{},a=a[s[o]];if(i=s.pop(),1===arguments.length)return a[i]===e?null:a[i];a[i]=n}else{if(1===arguments.length)return this.options[i]===e?null:this.options[i];r[i]=n}return this._setOptions(r),this},_setOptions:function(t){var e;for(e in t)this._setOption(e,t[e]);return this},_setOption:function(t,e){return this.options[t]=e,"disabled"===t&&(this.widget().toggleClass(this.widgetFullName+"-disabled ui-state-disabled",!!e).attr("aria-disabled",e),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")),this},enable:function(){return this._setOption("disabled",!1)},disable:function(){return this._setOption("disabled",!0)},_on:function(i,n,s){var a,o=this;"boolean"!=typeof i&&(s=n,n=i,i=!1),s?(n=a=t(n),this.bindings=this.bindings.add(n)):(s=n,n=this.element,a=this.widget()),t.each(s,function(s,r){function l(){return i||o.options.disabled!==!0&&!t(this).hasClass("ui-state-disabled")?("string"==typeof r?o[r]:r).apply(o,arguments):e}"string"!=typeof r&&(l.guid=r.guid=r.guid||l.guid||t.guid++);var h=s.match(/^(\w+)\s*(.*)$/),u=h[1]+o.eventNamespace,c=h[2];c?a.delegate(c,u,l):n.bind(u,l)})},_off:function(t,e){e=(e||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,t.unbind(e).undelegate(e)},_delay:function(t,e){function i(){return("string"==typeof t?n[t]:t).apply(n,arguments)}var n=this;return setTimeout(i,e||0)},_hoverable:function(e){this.hoverable=this.hoverable.add(e),this._on(e,{mouseenter:function(e){t(e.currentTarget).addClass("ui-state-hover")},mouseleave:function(e){t(e.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(e){this.focusable=this.focusable.add(e),this._on(e,{focusin:function(e){t(e.currentTarget).addClass("ui-state-focus")},focusout:function(e){t(e.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(e,i,n){var s,a,o=this.options[e];if(n=n||{},i=t.Event(i),i.type=(e===this.widgetEventPrefix?e:this.widgetEventPrefix+e).toLowerCase(),i.target=this.element[0],a=i.originalEvent)for(s in a)s in i||(i[s]=a[s]);return this.element.trigger(i,n),!(t.isFunction(o)&&o.apply(this.element[0],[i].concat(n))===!1||i.isDefaultPrevented())}},t.each({show:"fadeIn",hide:"fadeOut"},function(e,i){t.Widget.prototype["_"+e]=function(n,s,a){"string"==typeof s&&(s={effect:s});var o,r=s?s===!0||"number"==typeof s?i:s.effect||i:e;s=s||{},"number"==typeof s&&(s={duration:s}),o=!t.isEmptyObject(s),s.complete=a,s.delay&&n.delay(s.delay),o&&t.effects&&t.effects.effect[r]?n[e](s):r!==e&&n[r]?n[r](s.duration,s.easing,a):n.queue(function(i){t(this)[e](),a&&a.call(n[0]),i()})}})}(jQuery),function(t){var e=!1;t(document).mouseup(function(){e=!1}),t.widget("ui.mouse",{version:"1.10.4",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var e=this;this.element.bind("mousedown."+this.widgetName,function(t){return e._mouseDown(t)}).bind("click."+this.widgetName,function(i){return!0===t.data(i.target,e.widgetName+".preventClickEvent")?(t.removeData(i.target,e.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):void 0}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&t(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(i){if(!e){this._mouseStarted&&this._mouseUp(i),this._mouseDownEvent=i;var n=this,s=1===i.which,a="string"==typeof this.options.cancel&&i.target.nodeName?t(i.target).closest(this.options.cancel).length:!1;return s&&!a&&this._mouseCapture(i)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){n.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(i)&&this._mouseDelayMet(i)&&(this._mouseStarted=this._mouseStart(i)!==!1,!this._mouseStarted)?(i.preventDefault(),!0):(!0===t.data(i.target,this.widgetName+".preventClickEvent")&&t.removeData(i.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(t){return n._mouseMove(t)},this._mouseUpDelegate=function(t){return n._mouseUp(t)},t(document).bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),i.preventDefault(),e=!0,!0)):!0}},_mouseMove:function(e){return t.ui.ie&&(!document.documentMode||9>document.documentMode)&&!e.button?this._mouseUp(e):this._mouseStarted?(this._mouseDrag(e),e.preventDefault()):(this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,e)!==!1,this._mouseStarted?this._mouseDrag(e):this._mouseUp(e)),!this._mouseStarted)},_mouseUp:function(e){return t(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,e.target===this._mouseDownEvent.target&&t.data(e.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(e)),!1},_mouseDistanceMet:function(t){return Math.max(Math.abs(this._mouseDownEvent.pageX-t.pageX),Math.abs(this._mouseDownEvent.pageY-t.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}})}(jQuery),function(t,e){function i(t,e,i){return[parseFloat(t[0])*(p.test(t[0])?e/100:1),parseFloat(t[1])*(p.test(t[1])?i/100:1)]}function n(e,i){return parseInt(t.css(e,i),10)||0}function s(e){var i=e[0];return 9===i.nodeType?{width:e.width(),height:e.height(),offset:{top:0,left:0}}:t.isWindow(i)?{width:e.width(),height:e.height(),offset:{top:e.scrollTop(),left:e.scrollLeft()}}:i.preventDefault?{width:0,height:0,offset:{top:i.pageY,left:i.pageX}}:{width:e.outerWidth(),height:e.outerHeight(),offset:e.offset()}}t.ui=t.ui||{};var a,o=Math.max,r=Math.abs,l=Math.round,h=/left|center|right/,u=/top|center|bottom/,c=/[\+\-]\d+(\.[\d]+)?%?/,d=/^\w+/,p=/%$/,f=t.fn.position;t.position={scrollbarWidth:function(){if(a!==e)return a;var i,n,s=t("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),o=s.children()[0];return t("body").append(s),i=o.offsetWidth,s.css("overflow","scroll"),n=o.offsetWidth,i===n&&(n=s[0].clientWidth),s.remove(),a=i-n},getScrollInfo:function(e){var i=e.isWindow||e.isDocument?"":e.element.css("overflow-x"),n=e.isWindow||e.isDocument?"":e.element.css("overflow-y"),s="scroll"===i||"auto"===i&&e.width<e.element[0].scrollWidth,a="scroll"===n||"auto"===n&&e.height<e.element[0].scrollHeight;return{width:a?t.position.scrollbarWidth():0,height:s?t.position.scrollbarWidth():0}},getWithinInfo:function(e){var i=t(e||window),n=t.isWindow(i[0]),s=!!i[0]&&9===i[0].nodeType;return{element:i,isWindow:n,isDocument:s,offset:i.offset()||{left:0,top:0},scrollLeft:i.scrollLeft(),scrollTop:i.scrollTop(),width:n?i.width():i.outerWidth(),height:n?i.height():i.outerHeight()}}},t.fn.position=function(e){if(!e||!e.of)return f.apply(this,arguments);e=t.extend({},e);var a,p,m,g,v,_,b=t(e.of),y=t.position.getWithinInfo(e.within),x=t.position.getScrollInfo(y),w=(e.collision||"flip").split(" "),k={};return _=s(b),b[0].preventDefault&&(e.at="left top"),p=_.width,m=_.height,g=_.offset,v=t.extend({},g),t.each(["my","at"],function(){var t,i,n=(e[this]||"").split(" ");1===n.length&&(n=h.test(n[0])?n.concat(["center"]):u.test(n[0])?["center"].concat(n):["center","center"]),n[0]=h.test(n[0])?n[0]:"center",n[1]=u.test(n[1])?n[1]:"center",t=c.exec(n[0]),i=c.exec(n[1]),k[this]=[t?t[0]:0,i?i[0]:0],e[this]=[d.exec(n[0])[0],d.exec(n[1])[0]]}),1===w.length&&(w[1]=w[0]),"right"===e.at[0]?v.left+=p:"center"===e.at[0]&&(v.left+=p/2),"bottom"===e.at[1]?v.top+=m:"center"===e.at[1]&&(v.top+=m/2),a=i(k.at,p,m),v.left+=a[0],v.top+=a[1],this.each(function(){var s,h,u=t(this),c=u.outerWidth(),d=u.outerHeight(),f=n(this,"marginLeft"),_=n(this,"marginTop"),D=c+f+n(this,"marginRight")+x.width,C=d+_+n(this,"marginBottom")+x.height,T=t.extend({},v),M=i(k.my,u.outerWidth(),u.outerHeight());"right"===e.my[0]?T.left-=c:"center"===e.my[0]&&(T.left-=c/2),"bottom"===e.my[1]?T.top-=d:"center"===e.my[1]&&(T.top-=d/2),T.left+=M[0],T.top+=M[1],t.support.offsetFractions||(T.left=l(T.left),T.top=l(T.top)),s={marginLeft:f,marginTop:_},t.each(["left","top"],function(i,n){t.ui.position[w[i]]&&t.ui.position[w[i]][n](T,{targetWidth:p,targetHeight:m,elemWidth:c,elemHeight:d,collisionPosition:s,collisionWidth:D,collisionHeight:C,offset:[a[0]+M[0],a[1]+M[1]],my:e.my,at:e.at,within:y,elem:u})}),e.using&&(h=function(t){var i=g.left-T.left,n=i+p-c,s=g.top-T.top,a=s+m-d,l={target:{element:b,left:g.left,top:g.top,width:p,height:m},element:{element:u,left:T.left,top:T.top,width:c,height:d},horizontal:0>n?"left":i>0?"right":"center",vertical:0>a?"top":s>0?"bottom":"middle"};c>p&&p>r(i+n)&&(l.horizontal="center"),d>m&&m>r(s+a)&&(l.vertical="middle"),l.important=o(r(i),r(n))>o(r(s),r(a))?"horizontal":"vertical",e.using.call(this,t,l)}),u.offset(t.extend(T,{using:h}))})},t.ui.position={fit:{left:function(t,e){var i,n=e.within,s=n.isWindow?n.scrollLeft:n.offset.left,a=n.width,r=t.left-e.collisionPosition.marginLeft,l=s-r,h=r+e.collisionWidth-a-s;e.collisionWidth>a?l>0&&0>=h?(i=t.left+l+e.collisionWidth-a-s,t.left+=l-i):t.left=h>0&&0>=l?s:l>h?s+a-e.collisionWidth:s:l>0?t.left+=l:h>0?t.left-=h:t.left=o(t.left-r,t.left)},top:function(t,e){var i,n=e.within,s=n.isWindow?n.scrollTop:n.offset.top,a=e.within.height,r=t.top-e.collisionPosition.marginTop,l=s-r,h=r+e.collisionHeight-a-s;e.collisionHeight>a?l>0&&0>=h?(i=t.top+l+e.collisionHeight-a-s,t.top+=l-i):t.top=h>0&&0>=l?s:l>h?s+a-e.collisionHeight:s:l>0?t.top+=l:h>0?t.top-=h:t.top=o(t.top-r,t.top)}},flip:{left:function(t,e){var i,n,s=e.within,a=s.offset.left+s.scrollLeft,o=s.width,l=s.isWindow?s.scrollLeft:s.offset.left,h=t.left-e.collisionPosition.marginLeft,u=h-l,c=h+e.collisionWidth-o-l,d="left"===e.my[0]?-e.elemWidth:"right"===e.my[0]?e.elemWidth:0,p="left"===e.at[0]?e.targetWidth:"right"===e.at[0]?-e.targetWidth:0,f=-2*e.offset[0];0>u?(i=t.left+d+p+f+e.collisionWidth-o-a,(0>i||r(u)>i)&&(t.left+=d+p+f)):c>0&&(n=t.left-e.collisionPosition.marginLeft+d+p+f-l,(n>0||c>r(n))&&(t.left+=d+p+f))},top:function(t,e){var i,n,s=e.within,a=s.offset.top+s.scrollTop,o=s.height,l=s.isWindow?s.scrollTop:s.offset.top,h=t.top-e.collisionPosition.marginTop,u=h-l,c=h+e.collisionHeight-o-l,d="top"===e.my[1],p=d?-e.elemHeight:"bottom"===e.my[1]?e.elemHeight:0,f="top"===e.at[1]?e.targetHeight:"bottom"===e.at[1]?-e.targetHeight:0,m=-2*e.offset[1];0>u?(n=t.top+p+f+m+e.collisionHeight-o-a,t.top+p+f+m>u&&(0>n||r(u)>n)&&(t.top+=p+f+m)):c>0&&(i=t.top-e.collisionPosition.marginTop+p+f+m-l,t.top+p+f+m>c&&(i>0||c>r(i))&&(t.top+=p+f+m))}},flipfit:{left:function(){t.ui.position.flip.left.apply(this,arguments),t.ui.position.fit.left.apply(this,arguments)},top:function(){t.ui.position.flip.top.apply(this,arguments),t.ui.position.fit.top.apply(this,arguments)}}},function(){var e,i,n,s,a,o=document.getElementsByTagName("body")[0],r=document.createElement("div");e=document.createElement(o?"div":"body"),n={visibility:"hidden",width:0,height:0,border:0,margin:0,background:"none"},o&&t.extend(n,{position:"absolute",left:"-1000px",top:"-1000px"});for(a in n)e.style[a]=n[a];e.appendChild(r),i=o||document.documentElement,i.insertBefore(e,i.firstChild),r.style.cssText="position: absolute; left: 10.7432222px;",s=t(r).offset().left,t.support.offsetFractions=s>10&&11>s,e.innerHTML="",i.removeChild(e)}()}(jQuery),function(t){var e=0,i={},n={};i.height=i.paddingTop=i.paddingBottom=i.borderTopWidth=i.borderBottomWidth="hide",n.height=n.paddingTop=n.paddingBottom=n.borderTopWidth=n.borderBottomWidth="show",t.widget("ui.accordion",{version:"1.10.4",options:{active:0,animate:{},collapsible:!1,event:"click",header:"> li > :first-child,> :not(li):even",heightStyle:"auto",icons:{activeHeader:"ui-icon-triangle-1-s",header:"ui-icon-triangle-1-e"},activate:null,beforeActivate:null},_create:function(){var e=this.options;this.prevShow=this.prevHide=t(),this.element.addClass("ui-accordion ui-widget ui-helper-reset").attr("role","tablist"),e.collapsible||e.active!==!1&&null!=e.active||(e.active=0),this._processPanels(),0>e.active&&(e.active+=this.headers.length),this._refresh()},_getCreateEventData:function(){return{header:this.active,panel:this.active.length?this.active.next():t(),content:this.active.length?this.active.next():t()}},_createIcons:function(){var e=this.options.icons;e&&(t("<span>").addClass("ui-accordion-header-icon ui-icon "+e.header).prependTo(this.headers),this.active.children(".ui-accordion-header-icon").removeClass(e.header).addClass(e.activeHeader),this.headers.addClass("ui-accordion-icons"))},_destroyIcons:function(){this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove()},_destroy:function(){var t;this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role"),this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").each(function(){/^ui-accordion/.test(this.id)&&this.removeAttribute("id")}),this._destroyIcons(),t=this.headers.next().css("display","").removeAttr("role").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").each(function(){/^ui-accordion/.test(this.id)&&this.removeAttribute("id")}),"content"!==this.options.heightStyle&&t.css("height","")},_setOption:function(t,e){return"active"===t?void this._activate(e):("event"===t&&(this.options.event&&this._off(this.headers,this.options.event),this._setupEvents(e)),this._super(t,e),"collapsible"!==t||e||this.options.active!==!1||this._activate(0),"icons"===t&&(this._destroyIcons(),e&&this._createIcons()),void("disabled"===t&&this.headers.add(this.headers.next()).toggleClass("ui-state-disabled",!!e)))},_keydown:function(e){if(!e.altKey&&!e.ctrlKey){var i=t.ui.keyCode,n=this.headers.length,s=this.headers.index(e.target),a=!1;switch(e.keyCode){case i.RIGHT:case i.DOWN:a=this.headers[(s+1)%n];break;case i.LEFT:case i.UP:a=this.headers[(s-1+n)%n];break;case i.SPACE:case i.ENTER:this._eventHandler(e);break;case i.HOME:a=this.headers[0];break;case i.END:a=this.headers[n-1]}a&&(t(e.target).attr("tabIndex",-1),t(a).attr("tabIndex",0),a.focus(),e.preventDefault())}},_panelKeyDown:function(e){e.keyCode===t.ui.keyCode.UP&&e.ctrlKey&&t(e.currentTarget).prev().focus()},refresh:function(){var e=this.options;this._processPanels(),e.active===!1&&e.collapsible===!0||!this.headers.length?(e.active=!1,this.active=t()):e.active===!1?this._activate(0):this.active.length&&!t.contains(this.element[0],this.active[0])?this.headers.length===this.headers.find(".ui-state-disabled").length?(e.active=!1,this.active=t()):this._activate(Math.max(0,e.active-1)):e.active=this.headers.index(this.active),this._destroyIcons(),this._refresh()},_processPanels:function(){this.headers=this.element.find(this.options.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all"),this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").filter(":not(.ui-accordion-content-active)").hide()},_refresh:function(){var i,n=this.options,s=n.heightStyle,a=this.element.parent(),o=this.accordionId="ui-accordion-"+(this.element.attr("id")||++e);this.active=this._findActive(n.active).addClass("ui-accordion-header-active ui-state-active ui-corner-top").removeClass("ui-corner-all"),this.active.next().addClass("ui-accordion-content-active").show(),this.headers.attr("role","tab").each(function(e){var i=t(this),n=i.attr("id"),s=i.next(),a=s.attr("id");n||(n=o+"-header-"+e,i.attr("id",n)),a||(a=o+"-panel-"+e,s.attr("id",a)),i.attr("aria-controls",a),s.attr("aria-labelledby",n)}).next().attr("role","tabpanel"),this.headers.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1}).next().attr({"aria-hidden":"true"}).hide(),this.active.length?this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0}).next().attr({"aria-hidden":"false"}):this.headers.eq(0).attr("tabIndex",0),this._createIcons(),this._setupEvents(n.event),"fill"===s?(i=a.height(),this.element.siblings(":visible").each(function(){var e=t(this),n=e.css("position");"absolute"!==n&&"fixed"!==n&&(i-=e.outerHeight(!0))}),this.headers.each(function(){i-=t(this).outerHeight(!0)}),this.headers.next().each(function(){t(this).height(Math.max(0,i-t(this).innerHeight()+t(this).height()))}).css("overflow","auto")):"auto"===s&&(i=0,this.headers.next().each(function(){i=Math.max(i,t(this).css("height","").height())}).height(i))},_activate:function(e){var i=this._findActive(e)[0];i!==this.active[0]&&(i=i||this.active[0],this._eventHandler({target:i,currentTarget:i,preventDefault:t.noop}))},_findActive:function(e){return"number"==typeof e?this.headers.eq(e):t()},_setupEvents:function(e){var i={keydown:"_keydown"};e&&t.each(e.split(" "),function(t,e){i[e]="_eventHandler"}),this._off(this.headers.add(this.headers.next())),this._on(this.headers,i),this._on(this.headers.next(),{keydown:"_panelKeyDown"}),this._hoverable(this.headers),this._focusable(this.headers)},_eventHandler:function(e){var i=this.options,n=this.active,s=t(e.currentTarget),a=s[0]===n[0],o=a&&i.collapsible,r=o?t():s.next(),l=n.next(),h={oldHeader:n,oldPanel:l,newHeader:o?t():s,newPanel:r};e.preventDefault(),a&&!i.collapsible||this._trigger("beforeActivate",e,h)===!1||(i.active=o?!1:this.headers.index(s),this.active=a?t():s,this._toggle(h),n.removeClass("ui-accordion-header-active ui-state-active"),i.icons&&n.children(".ui-accordion-header-icon").removeClass(i.icons.activeHeader).addClass(i.icons.header),a||(s.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top"),i.icons&&s.children(".ui-accordion-header-icon").removeClass(i.icons.header).addClass(i.icons.activeHeader),s.next().addClass("ui-accordion-content-active")))},_toggle:function(e){var i=e.newPanel,n=this.prevShow.length?this.prevShow:e.oldPanel;this.prevShow.add(this.prevHide).stop(!0,!0),this.prevShow=i,this.prevHide=n,this.options.animate?this._animate(i,n,e):(n.hide(),i.show(),this._toggleComplete(e)),n.attr({"aria-hidden":"true"}),n.prev().attr("aria-selected","false"),i.length&&n.length?n.prev().attr({tabIndex:-1,"aria-expanded":"false"}):i.length&&this.headers.filter(function(){return 0===t(this).attr("tabIndex")}).attr("tabIndex",-1),i.attr("aria-hidden","false").prev().attr({"aria-selected":"true",tabIndex:0,"aria-expanded":"true"})},_animate:function(t,e,s){var a,o,r,l=this,h=0,u=t.length&&(!e.length||t.index()<e.index()),c=this.options.animate||{},d=u&&c.down||c,p=function(){l._toggleComplete(s)};return"number"==typeof d&&(r=d),"string"==typeof d&&(o=d),o=o||d.easing||c.easing,r=r||d.duration||c.duration,e.length?t.length?(a=t.show().outerHeight(),e.animate(i,{duration:r,easing:o,step:function(t,e){e.now=Math.round(t)}}),void t.hide().animate(n,{duration:r,easing:o,complete:p,step:function(t,i){i.now=Math.round(t),"height"!==i.prop?h+=i.now:"content"!==l.options.heightStyle&&(i.now=Math.round(a-e.outerHeight()-h),h=0)}})):e.animate(i,r,o,p):t.animate(n,r,o,p)},_toggleComplete:function(t){var e=t.oldPanel;e.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all"),e.length&&(e.parent()[0].className=e.parent()[0].className),this._trigger("activate",null,t)}})}(jQuery),function(t){t.widget("ui.autocomplete",{version:"1.10.4",defaultElement:"<input>",options:{appendTo:null,autoFocus:!1,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null,change:null,close:null,focus:null,open:null,response:null,search:null,select:null},requestIndex:0,pending:0,_create:function(){var e,i,n,s=this.element[0].nodeName.toLowerCase(),a="textarea"===s,o="input"===s;this.isMultiLine=a?!0:o?!1:this.element.prop("isContentEditable"),this.valueMethod=this.element[a||o?"val":"text"],this.isNewMenu=!0,this.element.addClass("ui-autocomplete-input").attr("autocomplete","off"),this._on(this.element,{keydown:function(s){if(this.element.prop("readOnly"))return e=!0,n=!0,void(i=!0);e=!1,n=!1,i=!1;var a=t.ui.keyCode;switch(s.keyCode){case a.PAGE_UP:e=!0,this._move("previousPage",s);break;case a.PAGE_DOWN:e=!0,this._move("nextPage",s);break;case a.UP:e=!0,this._keyEvent("previous",s);break;case a.DOWN:e=!0,this._keyEvent("next",s);break;case a.ENTER:case a.NUMPAD_ENTER:this.menu.active&&(e=!0,s.preventDefault(),this.menu.select(s));break;case a.TAB:this.menu.active&&this.menu.select(s);break;case a.ESCAPE:this.menu.element.is(":visible")&&(this._value(this.term),this.close(s),s.preventDefault());break;default:i=!0,this._searchTimeout(s)}},keypress:function(n){if(e)return e=!1,void((!this.isMultiLine||this.menu.element.is(":visible"))&&n.preventDefault());if(!i){var s=t.ui.keyCode;switch(n.keyCode){case s.PAGE_UP:this._move("previousPage",n);break;case s.PAGE_DOWN:this._move("nextPage",n);break;case s.UP:this._keyEvent("previous",n);break;case s.DOWN:this._keyEvent("next",n)}}},input:function(t){return n?(n=!1,void t.preventDefault()):void this._searchTimeout(t)},focus:function(){this.selectedItem=null,this.previous=this._value()},blur:function(t){return this.cancelBlur?void delete this.cancelBlur:(clearTimeout(this.searching),this.close(t),void this._change(t))}}),this._initSource(),this.menu=t("<ul>").addClass("ui-autocomplete ui-front").appendTo(this._appendTo()).menu({role:null}).hide().data("ui-menu"),this._on(this.menu.element,{mousedown:function(e){e.preventDefault(),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur});var i=this.menu.element[0];t(e.target).closest(".ui-menu-item").length||this._delay(function(){var e=this;this.document.one("mousedown",function(n){n.target===e.element[0]||n.target===i||t.contains(i,n.target)||e.close()})})},menufocus:function(e,i){if(this.isNewMenu&&(this.isNewMenu=!1,e.originalEvent&&/^mouse/.test(e.originalEvent.type)))return this.menu.blur(),void this.document.one("mousemove",function(){t(e.target).trigger(e.originalEvent)});var n=i.item.data("ui-autocomplete-item");!1!==this._trigger("focus",e,{item:n})?e.originalEvent&&/^key/.test(e.originalEvent.type)&&this._value(n.value):this.liveRegion.text(n.value)},menuselect:function(t,e){var i=e.item.data("ui-autocomplete-item"),n=this.previous;this.element[0]!==this.document[0].activeElement&&(this.element.focus(),this.previous=n,this._delay(function(){this.previous=n,this.selectedItem=i})),!1!==this._trigger("select",t,{item:i})&&this._value(i.value),this.term=this._value(),this.close(t),this.selectedItem=i}}),this.liveRegion=t("<span>",{role:"status","aria-live":"polite"}).addClass("ui-helper-hidden-accessible").insertBefore(this.element),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_destroy:function(){clearTimeout(this.searching),this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete"),this.menu.element.remove(),this.liveRegion.remove()},_setOption:function(t,e){this._super(t,e),"source"===t&&this._initSource(),"appendTo"===t&&this.menu.element.appendTo(this._appendTo()),"disabled"===t&&e&&this.xhr&&this.xhr.abort()},_appendTo:function(){var e=this.options.appendTo;return e&&(e=e.jquery||e.nodeType?t(e):this.document.find(e).eq(0)),e||(e=this.element.closest(".ui-front")),e.length||(e=this.document[0].body),e},_initSource:function(){var e,i,n=this;t.isArray(this.options.source)?(e=this.options.source,this.source=function(i,n){n(t.ui.autocomplete.filter(e,i.term))}):"string"==typeof this.options.source?(i=this.options.source,this.source=function(e,s){n.xhr&&n.xhr.abort(),n.xhr=t.ajax({url:i,data:e,dataType:"json",success:function(t){s(t)},error:function(){s([])}})}):this.source=this.options.source},_searchTimeout:function(t){clearTimeout(this.searching),this.searching=this._delay(function(){this.term!==this._value()&&(this.selectedItem=null,this.search(null,t))},this.options.delay)},search:function(t,e){return t=null!=t?t:this._value(),this.term=this._value(),t.length<this.options.minLength?this.close(e):this._trigger("search",e)!==!1?this._search(t):void 0},_search:function(t){this.pending++,this.element.addClass("ui-autocomplete-loading"),this.cancelSearch=!1,this.source({term:t},this._response())},_response:function(){var e=++this.requestIndex;return t.proxy(function(t){e===this.requestIndex&&this.__response(t),this.pending--,this.pending||this.element.removeClass("ui-autocomplete-loading")},this)},__response:function(t){t&&(t=this._normalize(t)),this._trigger("response",null,{content:t}),!this.options.disabled&&t&&t.length&&!this.cancelSearch?(this._suggest(t),this._trigger("open")):this._close()},close:function(t){this.cancelSearch=!0,this._close(t)},_close:function(t){this.menu.element.is(":visible")&&(this.menu.element.hide(),this.menu.blur(),this.isNewMenu=!0,this._trigger("close",t))},_change:function(t){this.previous!==this._value()&&this._trigger("change",t,{item:this.selectedItem})},_normalize:function(e){return e.length&&e[0].label&&e[0].value?e:t.map(e,function(e){return"string"==typeof e?{label:e,value:e}:t.extend({label:e.label||e.value,value:e.value||e.label},e)})},_suggest:function(e){var i=this.menu.element.empty();this._renderMenu(i,e),this.isNewMenu=!0,this.menu.refresh(),i.show(),this._resizeMenu(),i.position(t.extend({of:this.element},this.options.position)),this.options.autoFocus&&this.menu.next()},_resizeMenu:function(){var t=this.menu.element;t.outerWidth(Math.max(t.width("").outerWidth()+1,this.element.outerWidth()))},_renderMenu:function(e,i){var n=this;t.each(i,function(t,i){n._renderItemData(e,i)})},_renderItemData:function(t,e){return this._renderItem(t,e).data("ui-autocomplete-item",e)},_renderItem:function(e,i){return t("<li>").append(t("<a>").text(i.label)).appendTo(e)},_move:function(t,e){return this.menu.element.is(":visible")?this.menu.isFirstItem()&&/^previous/.test(t)||this.menu.isLastItem()&&/^next/.test(t)?(this._value(this.term),void this.menu.blur()):void this.menu[t](e):void this.search(null,e)},widget:function(){return this.menu.element},_value:function(){return this.valueMethod.apply(this.element,arguments)},_keyEvent:function(t,e){(!this.isMultiLine||this.menu.element.is(":visible"))&&(this._move(t,e),e.preventDefault())
}}),t.extend(t.ui.autocomplete,{escapeRegex:function(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")},filter:function(e,i){var n=RegExp(t.ui.autocomplete.escapeRegex(i),"i");return t.grep(e,function(t){return n.test(t.label||t.value||t)})}}),t.widget("ui.autocomplete",t.ui.autocomplete,{options:{messages:{noResults:"No search results.",results:function(t){return t+(t>1?" results are":" result is")+" available, use up and down arrow keys to navigate."}}},__response:function(t){var e;this._superApply(arguments),this.options.disabled||this.cancelSearch||(e=t&&t.length?this.options.messages.results(t.length):this.options.messages.noResults,this.liveRegion.text(e))}})}(jQuery),function(t){var e,i="ui-button ui-widget ui-state-default ui-corner-all",n="ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",s=function(){var e=t(this);setTimeout(function(){e.find(":ui-button").button("refresh")},1)},a=function(e){var i=e.name,n=e.form,s=t([]);return i&&(i=i.replace(/'/g,"\\'"),s=n?t(n).find("[name='"+i+"']"):t("[name='"+i+"']",e.ownerDocument).filter(function(){return!this.form})),s};t.widget("ui.button",{version:"1.10.4",defaultElement:"<button>",options:{disabled:null,text:!0,label:null,icons:{primary:null,secondary:null}},_create:function(){this.element.closest("form").unbind("reset"+this.eventNamespace).bind("reset"+this.eventNamespace,s),"boolean"!=typeof this.options.disabled?this.options.disabled=!!this.element.prop("disabled"):this.element.prop("disabled",this.options.disabled),this._determineButtonType(),this.hasTitle=!!this.buttonElement.attr("title");var n=this,o=this.options,r="checkbox"===this.type||"radio"===this.type,l=r?"":"ui-state-active";null===o.label&&(o.label="input"===this.type?this.buttonElement.val():this.buttonElement.html()),this._hoverable(this.buttonElement),this.buttonElement.addClass(i).attr("role","button").bind("mouseenter"+this.eventNamespace,function(){o.disabled||this===e&&t(this).addClass("ui-state-active")}).bind("mouseleave"+this.eventNamespace,function(){o.disabled||t(this).removeClass(l)}).bind("click"+this.eventNamespace,function(t){o.disabled&&(t.preventDefault(),t.stopImmediatePropagation())}),this._on({focus:function(){this.buttonElement.addClass("ui-state-focus")},blur:function(){this.buttonElement.removeClass("ui-state-focus")}}),r&&this.element.bind("change"+this.eventNamespace,function(){n.refresh()}),"checkbox"===this.type?this.buttonElement.bind("click"+this.eventNamespace,function(){return o.disabled?!1:void 0}):"radio"===this.type?this.buttonElement.bind("click"+this.eventNamespace,function(){if(o.disabled)return!1;t(this).addClass("ui-state-active"),n.buttonElement.attr("aria-pressed","true");var e=n.element[0];a(e).not(e).map(function(){return t(this).button("widget")[0]}).removeClass("ui-state-active").attr("aria-pressed","false")}):(this.buttonElement.bind("mousedown"+this.eventNamespace,function(){return o.disabled?!1:(t(this).addClass("ui-state-active"),e=this,void n.document.one("mouseup",function(){e=null}))}).bind("mouseup"+this.eventNamespace,function(){return o.disabled?!1:void t(this).removeClass("ui-state-active")}).bind("keydown"+this.eventNamespace,function(e){return o.disabled?!1:void((e.keyCode===t.ui.keyCode.SPACE||e.keyCode===t.ui.keyCode.ENTER)&&t(this).addClass("ui-state-active"))}).bind("keyup"+this.eventNamespace+" blur"+this.eventNamespace,function(){t(this).removeClass("ui-state-active")}),this.buttonElement.is("a")&&this.buttonElement.keyup(function(e){e.keyCode===t.ui.keyCode.SPACE&&t(this).click()})),this._setOption("disabled",o.disabled),this._resetButton()},_determineButtonType:function(){var t,e,i;this.type=this.element.is("[type=checkbox]")?"checkbox":this.element.is("[type=radio]")?"radio":this.element.is("input")?"input":"button","checkbox"===this.type||"radio"===this.type?(t=this.element.parents().last(),e="label[for='"+this.element.attr("id")+"']",this.buttonElement=t.find(e),this.buttonElement.length||(t=t.length?t.siblings():this.element.siblings(),this.buttonElement=t.filter(e),this.buttonElement.length||(this.buttonElement=t.find(e))),this.element.addClass("ui-helper-hidden-accessible"),i=this.element.is(":checked"),i&&this.buttonElement.addClass("ui-state-active"),this.buttonElement.prop("aria-pressed",i)):this.buttonElement=this.element},widget:function(){return this.buttonElement},_destroy:function(){this.element.removeClass("ui-helper-hidden-accessible"),this.buttonElement.removeClass(i+" ui-state-active "+n).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html()),this.hasTitle||this.buttonElement.removeAttr("title")},_setOption:function(t,e){return this._super(t,e),"disabled"===t?(this.element.prop("disabled",!!e),void(e&&this.buttonElement.removeClass("ui-state-focus"))):void this._resetButton()},refresh:function(){var e=this.element.is("input, button")?this.element.is(":disabled"):this.element.hasClass("ui-button-disabled");e!==this.options.disabled&&this._setOption("disabled",e),"radio"===this.type?a(this.element[0]).each(function(){t(this).is(":checked")?t(this).button("widget").addClass("ui-state-active").attr("aria-pressed","true"):t(this).button("widget").removeClass("ui-state-active").attr("aria-pressed","false")}):"checkbox"===this.type&&(this.element.is(":checked")?this.buttonElement.addClass("ui-state-active").attr("aria-pressed","true"):this.buttonElement.removeClass("ui-state-active").attr("aria-pressed","false"))},_resetButton:function(){if("input"===this.type)return void(this.options.label&&this.element.val(this.options.label));var e=this.buttonElement.removeClass(n),i=t("<span></span>",this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(e.empty()).text(),s=this.options.icons,a=s.primary&&s.secondary,o=[];s.primary||s.secondary?(this.options.text&&o.push("ui-button-text-icon"+(a?"s":s.primary?"-primary":"-secondary")),s.primary&&e.prepend("<span class='ui-button-icon-primary ui-icon "+s.primary+"'></span>"),s.secondary&&e.append("<span class='ui-button-icon-secondary ui-icon "+s.secondary+"'></span>"),this.options.text||(o.push(a?"ui-button-icons-only":"ui-button-icon-only"),this.hasTitle||e.attr("title",t.trim(i)))):o.push("ui-button-text-only"),e.addClass(o.join(" "))}}),t.widget("ui.buttonset",{version:"1.10.4",options:{items:"button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"},_create:function(){this.element.addClass("ui-buttonset")},_init:function(){this.refresh()},_setOption:function(t,e){"disabled"===t&&this.buttons.button("option",t,e),this._super(t,e)},refresh:function(){var e="rtl"===this.element.css("direction");this.buttons=this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function(){return t(this).button("widget")[0]}).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(e?"ui-corner-right":"ui-corner-left").end().filter(":last").addClass(e?"ui-corner-left":"ui-corner-right").end().end()},_destroy:function(){this.element.removeClass("ui-buttonset"),this.buttons.map(function(){return t(this).button("widget")[0]}).removeClass("ui-corner-left ui-corner-right").end().button("destroy")}})}(jQuery),function(t,e){function i(){this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="ui-datepicker-div",this._inlineClass="ui-datepicker-inline",this._appendClass="ui-datepicker-append",this._triggerClass="ui-datepicker-trigger",this._dialogClass="ui-datepicker-dialog",this._disableClass="ui-datepicker-disabled",this._unselectableClass="ui-datepicker-unselectable",this._currentClass="ui-datepicker-current-day",this._dayOverClass="ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},t.extend(this._defaults,this.regional[""]),this.dpDiv=n(t("<div id='"+this._mainDivId+"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))}function n(e){var i="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return e.delegate(i,"mouseout",function(){t(this).removeClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).removeClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).removeClass("ui-datepicker-next-hover")}).delegate(i,"mouseover",function(){t.datepicker._isDisabledDatepicker(a.inline?e.parent()[0]:a.input[0])||(t(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),t(this).addClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).addClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).addClass("ui-datepicker-next-hover"))})}function s(e,i){t.extend(e,i);for(var n in i)null==i[n]&&(e[n]=i[n]);return e}t.extend(t.ui,{datepicker:{version:"1.10.4"}});var a,o="datepicker";t.extend(i.prototype,{markerClassName:"hasDatepicker",maxRows:4,_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(t){return s(this._defaults,t||{}),this},_attachDatepicker:function(e,i){var n,s,a;n=e.nodeName.toLowerCase(),s="div"===n||"span"===n,e.id||(this.uuid+=1,e.id="dp"+this.uuid),a=this._newInst(t(e),s),a.settings=t.extend({},i||{}),"input"===n?this._connectDatepicker(e,a):s&&this._inlineDatepicker(e,a)},_newInst:function(e,i){var s=e[0].id.replace(/([^A-Za-z0-9_\-])/g,"\\\\$1");return{id:s,input:e,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:i,dpDiv:i?n(t("<div class='"+this._inlineClass+" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")):this.dpDiv}},_connectDatepicker:function(e,i){var n=t(e);i.append=t([]),i.trigger=t([]),n.hasClass(this.markerClassName)||(this._attachments(n,i),n.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp),this._autoSize(i),t.data(e,o,i),i.settings.disabled&&this._disableDatepicker(e))},_attachments:function(e,i){var n,s,a,o=this._get(i,"appendText"),r=this._get(i,"isRTL");i.append&&i.append.remove(),o&&(i.append=t("<span class='"+this._appendClass+"'>"+o+"</span>"),e[r?"before":"after"](i.append)),e.unbind("focus",this._showDatepicker),i.trigger&&i.trigger.remove(),n=this._get(i,"showOn"),("focus"===n||"both"===n)&&e.focus(this._showDatepicker),("button"===n||"both"===n)&&(s=this._get(i,"buttonText"),a=this._get(i,"buttonImage"),i.trigger=t(this._get(i,"buttonImageOnly")?t("<img/>").addClass(this._triggerClass).attr({src:a,alt:s,title:s}):t("<button type='button'></button>").addClass(this._triggerClass).html(a?t("<img/>").attr({src:a,alt:s,title:s}):s)),e[r?"before":"after"](i.trigger),i.trigger.click(function(){return t.datepicker._datepickerShowing&&t.datepicker._lastInput===e[0]?t.datepicker._hideDatepicker():t.datepicker._datepickerShowing&&t.datepicker._lastInput!==e[0]?(t.datepicker._hideDatepicker(),t.datepicker._showDatepicker(e[0])):t.datepicker._showDatepicker(e[0]),!1}))},_autoSize:function(t){if(this._get(t,"autoSize")&&!t.inline){var e,i,n,s,a=new Date(2009,11,20),o=this._get(t,"dateFormat");o.match(/[DM]/)&&(e=function(t){for(i=0,n=0,s=0;t.length>s;s++)t[s].length>i&&(i=t[s].length,n=s);return n},a.setMonth(e(this._get(t,o.match(/MM/)?"monthNames":"monthNamesShort"))),a.setDate(e(this._get(t,o.match(/DD/)?"dayNames":"dayNamesShort"))+20-a.getDay())),t.input.attr("size",this._formatDate(t,a).length)}},_inlineDatepicker:function(e,i){var n=t(e);n.hasClass(this.markerClassName)||(n.addClass(this.markerClassName).append(i.dpDiv),t.data(e,o,i),this._setDate(i,this._getDefaultDate(i),!0),this._updateDatepicker(i),this._updateAlternate(i),i.settings.disabled&&this._disableDatepicker(e),i.dpDiv.css("display","block"))},_dialogDatepicker:function(e,i,n,a,r){var l,h,u,c,d,p=this._dialogInst;return p||(this.uuid+=1,l="dp"+this.uuid,this._dialogInput=t("<input type='text' id='"+l+"' style='position: absolute; top: -100px; width: 0px;'/>"),this._dialogInput.keydown(this._doKeyDown),t("body").append(this._dialogInput),p=this._dialogInst=this._newInst(this._dialogInput,!1),p.settings={},t.data(this._dialogInput[0],o,p)),s(p.settings,a||{}),i=i&&i.constructor===Date?this._formatDate(p,i):i,this._dialogInput.val(i),this._pos=r?r.length?r:[r.pageX,r.pageY]:null,this._pos||(h=document.documentElement.clientWidth,u=document.documentElement.clientHeight,c=document.documentElement.scrollLeft||document.body.scrollLeft,d=document.documentElement.scrollTop||document.body.scrollTop,this._pos=[h/2-100+c,u/2-150+d]),this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),p.settings.onSelect=n,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),t.blockUI&&t.blockUI(this.dpDiv),t.data(this._dialogInput[0],o,p),this},_destroyDatepicker:function(e){var i,n=t(e),s=t.data(e,o);n.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),t.removeData(e,o),"input"===i?(s.append.remove(),s.trigger.remove(),n.removeClass(this.markerClassName).unbind("focus",this._showDatepicker).unbind("keydown",this._doKeyDown).unbind("keypress",this._doKeyPress).unbind("keyup",this._doKeyUp)):("div"===i||"span"===i)&&n.removeClass(this.markerClassName).empty())},_enableDatepicker:function(e){var i,n,s=t(e),a=t.data(e,o);s.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),"input"===i?(e.disabled=!1,a.trigger.filter("button").each(function(){this.disabled=!1}).end().filter("img").css({opacity:"1.0",cursor:""})):("div"===i||"span"===i)&&(n=s.children("."+this._inlineClass),n.children().removeClass("ui-state-disabled"),n.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!1)),this._disabledInputs=t.map(this._disabledInputs,function(t){return t===e?null:t}))},_disableDatepicker:function(e){var i,n,s=t(e),a=t.data(e,o);s.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),"input"===i?(e.disabled=!0,a.trigger.filter("button").each(function(){this.disabled=!0}).end().filter("img").css({opacity:"0.5",cursor:"default"})):("div"===i||"span"===i)&&(n=s.children("."+this._inlineClass),n.children().addClass("ui-state-disabled"),n.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!0)),this._disabledInputs=t.map(this._disabledInputs,function(t){return t===e?null:t}),this._disabledInputs[this._disabledInputs.length]=e)},_isDisabledDatepicker:function(t){if(!t)return!1;for(var e=0;this._disabledInputs.length>e;e++)if(this._disabledInputs[e]===t)return!0;return!1},_getInst:function(e){try{return t.data(e,o)}catch(i){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(i,n,a){var o,r,l,h,u=this._getInst(i);return 2===arguments.length&&"string"==typeof n?"defaults"===n?t.extend({},t.datepicker._defaults):u?"all"===n?t.extend({},u.settings):this._get(u,n):null:(o=n||{},"string"==typeof n&&(o={},o[n]=a),u&&(this._curInst===u&&this._hideDatepicker(),r=this._getDateDatepicker(i,!0),l=this._getMinMaxDate(u,"min"),h=this._getMinMaxDate(u,"max"),s(u.settings,o),null!==l&&o.dateFormat!==e&&o.minDate===e&&(u.settings.minDate=this._formatDate(u,l)),null!==h&&o.dateFormat!==e&&o.maxDate===e&&(u.settings.maxDate=this._formatDate(u,h)),"disabled"in o&&(o.disabled?this._disableDatepicker(i):this._enableDatepicker(i)),this._attachments(t(i),u),this._autoSize(u),this._setDate(u,r),this._updateAlternate(u),this._updateDatepicker(u)),e)},_changeDatepicker:function(t,e,i){this._optionDatepicker(t,e,i)},_refreshDatepicker:function(t){var e=this._getInst(t);e&&this._updateDatepicker(e)},_setDateDatepicker:function(t,e){var i=this._getInst(t);i&&(this._setDate(i,e),this._updateDatepicker(i),this._updateAlternate(i))},_getDateDatepicker:function(t,e){var i=this._getInst(t);return i&&!i.inline&&this._setDateFromField(i,e),i?this._getDate(i):null},_doKeyDown:function(e){var i,n,s,a=t.datepicker._getInst(e.target),o=!0,r=a.dpDiv.is(".ui-datepicker-rtl");if(a._keyEvent=!0,t.datepicker._datepickerShowing)switch(e.keyCode){case 9:t.datepicker._hideDatepicker(),o=!1;break;case 13:return s=t("td."+t.datepicker._dayOverClass+":not(."+t.datepicker._currentClass+")",a.dpDiv),s[0]&&t.datepicker._selectDay(e.target,a.selectedMonth,a.selectedYear,s[0]),i=t.datepicker._get(a,"onSelect"),i?(n=t.datepicker._formatDate(a),i.apply(a.input?a.input[0]:null,[n,a])):t.datepicker._hideDatepicker(),!1;case 27:t.datepicker._hideDatepicker();break;case 33:t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(a,"stepBigMonths"):-t.datepicker._get(a,"stepMonths"),"M");break;case 34:t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(a,"stepBigMonths"):+t.datepicker._get(a,"stepMonths"),"M");break;case 35:(e.ctrlKey||e.metaKey)&&t.datepicker._clearDate(e.target),o=e.ctrlKey||e.metaKey;break;case 36:(e.ctrlKey||e.metaKey)&&t.datepicker._gotoToday(e.target),o=e.ctrlKey||e.metaKey;break;case 37:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,r?1:-1,"D"),o=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(a,"stepBigMonths"):-t.datepicker._get(a,"stepMonths"),"M");break;case 38:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,-7,"D"),o=e.ctrlKey||e.metaKey;break;case 39:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,r?-1:1,"D"),o=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(a,"stepBigMonths"):+t.datepicker._get(a,"stepMonths"),"M");break;case 40:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,7,"D"),o=e.ctrlKey||e.metaKey;break;default:o=!1}else 36===e.keyCode&&e.ctrlKey?t.datepicker._showDatepicker(this):o=!1;o&&(e.preventDefault(),e.stopPropagation())},_doKeyPress:function(i){var n,s,a=t.datepicker._getInst(i.target);return t.datepicker._get(a,"constrainInput")?(n=t.datepicker._possibleChars(t.datepicker._get(a,"dateFormat")),s=String.fromCharCode(null==i.charCode?i.keyCode:i.charCode),i.ctrlKey||i.metaKey||" ">s||!n||n.indexOf(s)>-1):e},_doKeyUp:function(e){var i,n=t.datepicker._getInst(e.target);if(n.input.val()!==n.lastVal)try{i=t.datepicker.parseDate(t.datepicker._get(n,"dateFormat"),n.input?n.input.val():null,t.datepicker._getFormatConfig(n)),i&&(t.datepicker._setDateFromField(n),t.datepicker._updateAlternate(n),t.datepicker._updateDatepicker(n))}catch(s){}return!0},_showDatepicker:function(e){if(e=e.target||e,"input"!==e.nodeName.toLowerCase()&&(e=t("input",e.parentNode)[0]),!t.datepicker._isDisabledDatepicker(e)&&t.datepicker._lastInput!==e){var i,n,a,o,r,l,h;i=t.datepicker._getInst(e),t.datepicker._curInst&&t.datepicker._curInst!==i&&(t.datepicker._curInst.dpDiv.stop(!0,!0),i&&t.datepicker._datepickerShowing&&t.datepicker._hideDatepicker(t.datepicker._curInst.input[0])),n=t.datepicker._get(i,"beforeShow"),a=n?n.apply(e,[e,i]):{},a!==!1&&(s(i.settings,a),i.lastVal=null,t.datepicker._lastInput=e,t.datepicker._setDateFromField(i),t.datepicker._inDialog&&(e.value=""),t.datepicker._pos||(t.datepicker._pos=t.datepicker._findPos(e),t.datepicker._pos[1]+=e.offsetHeight),o=!1,t(e).parents().each(function(){return o|="fixed"===t(this).css("position"),!o}),r={left:t.datepicker._pos[0],top:t.datepicker._pos[1]},t.datepicker._pos=null,i.dpDiv.empty(),i.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),t.datepicker._updateDatepicker(i),r=t.datepicker._checkOffset(i,r,o),i.dpDiv.css({position:t.datepicker._inDialog&&t.blockUI?"static":o?"fixed":"absolute",display:"none",left:r.left+"px",top:r.top+"px"}),i.inline||(l=t.datepicker._get(i,"showAnim"),h=t.datepicker._get(i,"duration"),i.dpDiv.zIndex(t(e).zIndex()+1),t.datepicker._datepickerShowing=!0,t.effects&&t.effects.effect[l]?i.dpDiv.show(l,t.datepicker._get(i,"showOptions"),h):i.dpDiv[l||"show"](l?h:null),t.datepicker._shouldFocusInput(i)&&i.input.focus(),t.datepicker._curInst=i))}},_updateDatepicker:function(e){this.maxRows=4,a=e,e.dpDiv.empty().append(this._generateHTML(e)),this._attachHandlers(e),e.dpDiv.find("."+this._dayOverClass+" a").mouseover();var i,n=this._getNumberOfMonths(e),s=n[1],o=17;e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""),s>1&&e.dpDiv.addClass("ui-datepicker-multi-"+s).css("width",o*s+"em"),e.dpDiv[(1!==n[0]||1!==n[1]?"add":"remove")+"Class"]("ui-datepicker-multi"),e.dpDiv[(this._get(e,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl"),e===t.datepicker._curInst&&t.datepicker._datepickerShowing&&t.datepicker._shouldFocusInput(e)&&e.input.focus(),e.yearshtml&&(i=e.yearshtml,setTimeout(function(){i===e.yearshtml&&e.yearshtml&&e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml),i=e.yearshtml=null},0))},_shouldFocusInput:function(t){return t.input&&t.input.is(":visible")&&!t.input.is(":disabled")&&!t.input.is(":focus")},_checkOffset:function(e,i,n){var s=e.dpDiv.outerWidth(),a=e.dpDiv.outerHeight(),o=e.input?e.input.outerWidth():0,r=e.input?e.input.outerHeight():0,l=document.documentElement.clientWidth+(n?0:t(document).scrollLeft()),h=document.documentElement.clientHeight+(n?0:t(document).scrollTop());return i.left-=this._get(e,"isRTL")?s-o:0,i.left-=n&&i.left===e.input.offset().left?t(document).scrollLeft():0,i.top-=n&&i.top===e.input.offset().top+r?t(document).scrollTop():0,i.left-=Math.min(i.left,i.left+s>l&&l>s?Math.abs(i.left+s-l):0),i.top-=Math.min(i.top,i.top+a>h&&h>a?Math.abs(a+r):0),i},_findPos:function(e){for(var i,n=this._getInst(e),s=this._get(n,"isRTL");e&&("hidden"===e.type||1!==e.nodeType||t.expr.filters.hidden(e));)e=e[s?"previousSibling":"nextSibling"];return i=t(e).offset(),[i.left,i.top]},_hideDatepicker:function(e){var i,n,s,a,r=this._curInst;!r||e&&r!==t.data(e,o)||this._datepickerShowing&&(i=this._get(r,"showAnim"),n=this._get(r,"duration"),s=function(){t.datepicker._tidyDialog(r)},t.effects&&(t.effects.effect[i]||t.effects[i])?r.dpDiv.hide(i,t.datepicker._get(r,"showOptions"),n,s):r.dpDiv["slideDown"===i?"slideUp":"fadeIn"===i?"fadeOut":"hide"](i?n:null,s),i||s(),this._datepickerShowing=!1,a=this._get(r,"onClose"),a&&a.apply(r.input?r.input[0]:null,[r.input?r.input.val():"",r]),this._lastInput=null,this._inDialog&&(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),t.blockUI&&(t.unblockUI(),t("body").append(this.dpDiv))),this._inDialog=!1)},_tidyDialog:function(t){t.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")},_checkExternalClick:function(e){if(t.datepicker._curInst){var i=t(e.target),n=t.datepicker._getInst(i[0]);(i[0].id!==t.datepicker._mainDivId&&0===i.parents("#"+t.datepicker._mainDivId).length&&!i.hasClass(t.datepicker.markerClassName)&&!i.closest("."+t.datepicker._triggerClass).length&&t.datepicker._datepickerShowing&&(!t.datepicker._inDialog||!t.blockUI)||i.hasClass(t.datepicker.markerClassName)&&t.datepicker._curInst!==n)&&t.datepicker._hideDatepicker()}},_adjustDate:function(e,i,n){var s=t(e),a=this._getInst(s[0]);this._isDisabledDatepicker(s[0])||(this._adjustInstDate(a,i+("M"===n?this._get(a,"showCurrentAtPos"):0),n),this._updateDatepicker(a))},_gotoToday:function(e){var i,n=t(e),s=this._getInst(n[0]);this._get(s,"gotoCurrent")&&s.currentDay?(s.selectedDay=s.currentDay,s.drawMonth=s.selectedMonth=s.currentMonth,s.drawYear=s.selectedYear=s.currentYear):(i=new Date,s.selectedDay=i.getDate(),s.drawMonth=s.selectedMonth=i.getMonth(),s.drawYear=s.selectedYear=i.getFullYear()),this._notifyChange(s),this._adjustDate(n)},_selectMonthYear:function(e,i,n){var s=t(e),a=this._getInst(s[0]);a["selected"+("M"===n?"Month":"Year")]=a["draw"+("M"===n?"Month":"Year")]=parseInt(i.options[i.selectedIndex].value,10),this._notifyChange(a),this._adjustDate(s)},_selectDay:function(e,i,n,s){var a,o=t(e);t(s).hasClass(this._unselectableClass)||this._isDisabledDatepicker(o[0])||(a=this._getInst(o[0]),a.selectedDay=a.currentDay=t("a",s).html(),a.selectedMonth=a.currentMonth=i,a.selectedYear=a.currentYear=n,this._selectDate(e,this._formatDate(a,a.currentDay,a.currentMonth,a.currentYear)))},_clearDate:function(e){var i=t(e);this._selectDate(i,"")},_selectDate:function(e,i){var n,s=t(e),a=this._getInst(s[0]);i=null!=i?i:this._formatDate(a),a.input&&a.input.val(i),this._updateAlternate(a),n=this._get(a,"onSelect"),n?n.apply(a.input?a.input[0]:null,[i,a]):a.input&&a.input.trigger("change"),a.inline?this._updateDatepicker(a):(this._hideDatepicker(),this._lastInput=a.input[0],"object"!=typeof a.input[0]&&a.input.focus(),this._lastInput=null)},_updateAlternate:function(e){var i,n,s,a=this._get(e,"altField");a&&(i=this._get(e,"altFormat")||this._get(e,"dateFormat"),n=this._getDate(e),s=this.formatDate(i,n,this._getFormatConfig(e)),t(a).each(function(){t(this).val(s)}))},noWeekends:function(t){var e=t.getDay();return[e>0&&6>e,""]},iso8601Week:function(t){var e,i=new Date(t.getTime());return i.setDate(i.getDate()+4-(i.getDay()||7)),e=i.getTime(),i.setMonth(0),i.setDate(1),Math.floor(Math.round((e-i)/864e5)/7)+1},parseDate:function(i,n,s){if(null==i||null==n)throw"Invalid arguments";if(n="object"==typeof n?""+n:n+"",""===n)return null;var a,o,r,l,h=0,u=(s?s.shortYearCutoff:null)||this._defaults.shortYearCutoff,c="string"!=typeof u?u:(new Date).getFullYear()%100+parseInt(u,10),d=(s?s.dayNamesShort:null)||this._defaults.dayNamesShort,p=(s?s.dayNames:null)||this._defaults.dayNames,f=(s?s.monthNamesShort:null)||this._defaults.monthNamesShort,m=(s?s.monthNames:null)||this._defaults.monthNames,g=-1,v=-1,_=-1,b=-1,y=!1,x=function(t){var e=i.length>a+1&&i.charAt(a+1)===t;return e&&a++,e},w=function(t){var e=x(t),i="@"===t?14:"!"===t?20:"y"===t&&e?4:"o"===t?3:2,s=RegExp("^\\d{1,"+i+"}"),a=n.substring(h).match(s);if(!a)throw"Missing number at position "+h;return h+=a[0].length,parseInt(a[0],10)},k=function(i,s,a){var o=-1,r=t.map(x(i)?a:s,function(t,e){return[[e,t]]}).sort(function(t,e){return-(t[1].length-e[1].length)});if(t.each(r,function(t,i){var s=i[1];return n.substr(h,s.length).toLowerCase()===s.toLowerCase()?(o=i[0],h+=s.length,!1):e}),-1!==o)return o+1;throw"Unknown name at position "+h},D=function(){if(n.charAt(h)!==i.charAt(a))throw"Unexpected literal at position "+h;h++};for(a=0;i.length>a;a++)if(y)"'"!==i.charAt(a)||x("'")?D():y=!1;else switch(i.charAt(a)){case"d":_=w("d");break;case"D":k("D",d,p);break;case"o":b=w("o");break;case"m":v=w("m");break;case"M":v=k("M",f,m);break;case"y":g=w("y");break;case"@":l=new Date(w("@")),g=l.getFullYear(),v=l.getMonth()+1,_=l.getDate();break;case"!":l=new Date((w("!")-this._ticksTo1970)/1e4),g=l.getFullYear(),v=l.getMonth()+1,_=l.getDate();break;case"'":x("'")?D():y=!0;break;default:D()}if(n.length>h&&(r=n.substr(h),!/^\s+/.test(r)))throw"Extra/unparsed characters found in date: "+r;if(-1===g?g=(new Date).getFullYear():100>g&&(g+=(new Date).getFullYear()-(new Date).getFullYear()%100+(c>=g?0:-100)),b>-1)for(v=1,_=b;o=this._getDaysInMonth(g,v-1),!(o>=_);)v++,_-=o;if(l=this._daylightSavingAdjust(new Date(g,v-1,_)),l.getFullYear()!==g||l.getMonth()+1!==v||l.getDate()!==_)throw"Invalid date";return l},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:864e9*(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925)),formatDate:function(t,e,i){if(!e)return"";var n,s=(i?i.dayNamesShort:null)||this._defaults.dayNamesShort,a=(i?i.dayNames:null)||this._defaults.dayNames,o=(i?i.monthNamesShort:null)||this._defaults.monthNamesShort,r=(i?i.monthNames:null)||this._defaults.monthNames,l=function(e){var i=t.length>n+1&&t.charAt(n+1)===e;return i&&n++,i},h=function(t,e,i){var n=""+e;if(l(t))for(;i>n.length;)n="0"+n;return n},u=function(t,e,i,n){return l(t)?n[e]:i[e]},c="",d=!1;if(e)for(n=0;t.length>n;n++)if(d)"'"!==t.charAt(n)||l("'")?c+=t.charAt(n):d=!1;else switch(t.charAt(n)){case"d":c+=h("d",e.getDate(),2);break;case"D":c+=u("D",e.getDay(),s,a);break;case"o":c+=h("o",Math.round((new Date(e.getFullYear(),e.getMonth(),e.getDate()).getTime()-new Date(e.getFullYear(),0,0).getTime())/864e5),3);break;case"m":c+=h("m",e.getMonth()+1,2);break;case"M":c+=u("M",e.getMonth(),o,r);break;case"y":c+=l("y")?e.getFullYear():(10>e.getYear()%100?"0":"")+e.getYear()%100;break;case"@":c+=e.getTime();break;case"!":c+=1e4*e.getTime()+this._ticksTo1970;break;case"'":l("'")?c+="'":d=!0;break;default:c+=t.charAt(n)}return c},_possibleChars:function(t){var e,i="",n=!1,s=function(i){var n=t.length>e+1&&t.charAt(e+1)===i;return n&&e++,n};for(e=0;t.length>e;e++)if(n)"'"!==t.charAt(e)||s("'")?i+=t.charAt(e):n=!1;else switch(t.charAt(e)){case"d":case"m":case"y":case"@":i+="0123456789";break;case"D":case"M":return null;case"'":s("'")?i+="'":n=!0;break;default:i+=t.charAt(e)}return i},_get:function(t,i){return t.settings[i]!==e?t.settings[i]:this._defaults[i]},_setDateFromField:function(t,e){if(t.input.val()!==t.lastVal){var i=this._get(t,"dateFormat"),n=t.lastVal=t.input?t.input.val():null,s=this._getDefaultDate(t),a=s,o=this._getFormatConfig(t);try{a=this.parseDate(i,n,o)||s}catch(r){n=e?"":n}t.selectedDay=a.getDate(),t.drawMonth=t.selectedMonth=a.getMonth(),t.drawYear=t.selectedYear=a.getFullYear(),t.currentDay=n?a.getDate():0,t.currentMonth=n?a.getMonth():0,t.currentYear=n?a.getFullYear():0,this._adjustInstDate(t)}},_getDefaultDate:function(t){return this._restrictMinMax(t,this._determineDate(t,this._get(t,"defaultDate"),new Date))},_determineDate:function(e,i,n){var s=function(t){var e=new Date;return e.setDate(e.getDate()+t),e},a=function(i){try{return t.datepicker.parseDate(t.datepicker._get(e,"dateFormat"),i,t.datepicker._getFormatConfig(e))}catch(n){}for(var s=(i.toLowerCase().match(/^c/)?t.datepicker._getDate(e):null)||new Date,a=s.getFullYear(),o=s.getMonth(),r=s.getDate(),l=/([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,h=l.exec(i);h;){switch(h[2]||"d"){case"d":case"D":r+=parseInt(h[1],10);break;case"w":case"W":r+=7*parseInt(h[1],10);break;case"m":case"M":o+=parseInt(h[1],10),r=Math.min(r,t.datepicker._getDaysInMonth(a,o));break;case"y":case"Y":a+=parseInt(h[1],10),r=Math.min(r,t.datepicker._getDaysInMonth(a,o))}h=l.exec(i)}return new Date(a,o,r)},o=null==i||""===i?n:"string"==typeof i?a(i):"number"==typeof i?isNaN(i)?n:s(i):new Date(i.getTime());return o=o&&"Invalid Date"==""+o?n:o,o&&(o.setHours(0),o.setMinutes(0),o.setSeconds(0),o.setMilliseconds(0)),this._daylightSavingAdjust(o)},_daylightSavingAdjust:function(t){return t?(t.setHours(t.getHours()>12?t.getHours()+2:0),t):null},_setDate:function(t,e,i){var n=!e,s=t.selectedMonth,a=t.selectedYear,o=this._restrictMinMax(t,this._determineDate(t,e,new Date));t.selectedDay=t.currentDay=o.getDate(),t.drawMonth=t.selectedMonth=t.currentMonth=o.getMonth(),t.drawYear=t.selectedYear=t.currentYear=o.getFullYear(),s===t.selectedMonth&&a===t.selectedYear||i||this._notifyChange(t),this._adjustInstDate(t),t.input&&t.input.val(n?"":this._formatDate(t))
},_getDate:function(t){var e=!t.currentYear||t.input&&""===t.input.val()?null:this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay));return e},_attachHandlers:function(e){var i=this._get(e,"stepMonths"),n="#"+e.id.replace(/\\\\/g,"\\");e.dpDiv.find("[data-handler]").map(function(){var e={prev:function(){t.datepicker._adjustDate(n,-i,"M")},next:function(){t.datepicker._adjustDate(n,+i,"M")},hide:function(){t.datepicker._hideDatepicker()},today:function(){t.datepicker._gotoToday(n)},selectDay:function(){return t.datepicker._selectDay(n,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this),!1},selectMonth:function(){return t.datepicker._selectMonthYear(n,this,"M"),!1},selectYear:function(){return t.datepicker._selectMonthYear(n,this,"Y"),!1}};t(this).bind(this.getAttribute("data-event"),e[this.getAttribute("data-handler")])})},_generateHTML:function(t){var e,i,n,s,a,o,r,l,h,u,c,d,p,f,m,g,v,_,b,y,x,w,k,D,C,T,M,S,I,N,P,z,A,E,O,H,W,F,j,$=new Date,L=this._daylightSavingAdjust(new Date($.getFullYear(),$.getMonth(),$.getDate())),R=this._get(t,"isRTL"),B=this._get(t,"showButtonPanel"),q=this._get(t,"hideIfNoPrevNext"),Y=this._get(t,"navigationAsDateFormat"),U=this._getNumberOfMonths(t),K=this._get(t,"showCurrentAtPos"),V=this._get(t,"stepMonths"),X=1!==U[0]||1!==U[1],Q=this._daylightSavingAdjust(t.currentDay?new Date(t.currentYear,t.currentMonth,t.currentDay):new Date(9999,9,9)),G=this._getMinMaxDate(t,"min"),J=this._getMinMaxDate(t,"max"),Z=t.drawMonth-K,te=t.drawYear;if(0>Z&&(Z+=12,te--),J)for(e=this._daylightSavingAdjust(new Date(J.getFullYear(),J.getMonth()-U[0]*U[1]+1,J.getDate())),e=G&&G>e?G:e;this._daylightSavingAdjust(new Date(te,Z,1))>e;)Z--,0>Z&&(Z=11,te--);for(t.drawMonth=Z,t.drawYear=te,i=this._get(t,"prevText"),i=Y?this.formatDate(i,this._daylightSavingAdjust(new Date(te,Z-V,1)),this._getFormatConfig(t)):i,n=this._canAdjustMonth(t,-1,te,Z)?"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(R?"e":"w")+"'>"+i+"</span></a>":q?"":"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(R?"e":"w")+"'>"+i+"</span></a>",s=this._get(t,"nextText"),s=Y?this.formatDate(s,this._daylightSavingAdjust(new Date(te,Z+V,1)),this._getFormatConfig(t)):s,a=this._canAdjustMonth(t,1,te,Z)?"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='"+s+"'><span class='ui-icon ui-icon-circle-triangle-"+(R?"w":"e")+"'>"+s+"</span></a>":q?"":"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+s+"'><span class='ui-icon ui-icon-circle-triangle-"+(R?"w":"e")+"'>"+s+"</span></a>",o=this._get(t,"currentText"),r=this._get(t,"gotoCurrent")&&t.currentDay?Q:L,o=Y?this.formatDate(o,r,this._getFormatConfig(t)):o,l=t.inline?"":"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>"+this._get(t,"closeText")+"</button>",h=B?"<div class='ui-datepicker-buttonpane ui-widget-content'>"+(R?l:"")+(this._isInRange(t,r)?"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>"+o+"</button>":"")+(R?"":l)+"</div>":"",u=parseInt(this._get(t,"firstDay"),10),u=isNaN(u)?0:u,c=this._get(t,"showWeek"),d=this._get(t,"dayNames"),p=this._get(t,"dayNamesMin"),f=this._get(t,"monthNames"),m=this._get(t,"monthNamesShort"),g=this._get(t,"beforeShowDay"),v=this._get(t,"showOtherMonths"),_=this._get(t,"selectOtherMonths"),b=this._getDefaultDate(t),y="",w=0;U[0]>w;w++){for(k="",this.maxRows=4,D=0;U[1]>D;D++){if(C=this._daylightSavingAdjust(new Date(te,Z,t.selectedDay)),T=" ui-corner-all",M="",X){if(M+="<div class='ui-datepicker-group",U[1]>1)switch(D){case 0:M+=" ui-datepicker-group-first",T=" ui-corner-"+(R?"right":"left");break;case U[1]-1:M+=" ui-datepicker-group-last",T=" ui-corner-"+(R?"left":"right");break;default:M+=" ui-datepicker-group-middle",T=""}M+="'>"}for(M+="<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix"+T+"'>"+(/all|left/.test(T)&&0===w?R?a:n:"")+(/all|right/.test(T)&&0===w?R?n:a:"")+this._generateMonthYearHeader(t,Z,te,G,J,w>0||D>0,f,m)+"</div><table class='ui-datepicker-calendar'><thead><tr>",S=c?"<th class='ui-datepicker-week-col'>"+this._get(t,"weekHeader")+"</th>":"",x=0;7>x;x++)I=(x+u)%7,S+="<th"+((x+u+6)%7>=5?" class='ui-datepicker-week-end'":"")+"><span title='"+d[I]+"'>"+p[I]+"</span></th>";for(M+=S+"</tr></thead><tbody>",N=this._getDaysInMonth(te,Z),te===t.selectedYear&&Z===t.selectedMonth&&(t.selectedDay=Math.min(t.selectedDay,N)),P=(this._getFirstDayOfMonth(te,Z)-u+7)%7,z=Math.ceil((P+N)/7),A=X&&this.maxRows>z?this.maxRows:z,this.maxRows=A,E=this._daylightSavingAdjust(new Date(te,Z,1-P)),O=0;A>O;O++){for(M+="<tr>",H=c?"<td class='ui-datepicker-week-col'>"+this._get(t,"calculateWeek")(E)+"</td>":"",x=0;7>x;x++)W=g?g.apply(t.input?t.input[0]:null,[E]):[!0,""],F=E.getMonth()!==Z,j=F&&!_||!W[0]||G&&G>E||J&&E>J,H+="<td class='"+((x+u+6)%7>=5?" ui-datepicker-week-end":"")+(F?" ui-datepicker-other-month":"")+(E.getTime()===C.getTime()&&Z===t.selectedMonth&&t._keyEvent||b.getTime()===E.getTime()&&b.getTime()===C.getTime()?" "+this._dayOverClass:"")+(j?" "+this._unselectableClass+" ui-state-disabled":"")+(F&&!v?"":" "+W[1]+(E.getTime()===Q.getTime()?" "+this._currentClass:"")+(E.getTime()===L.getTime()?" ui-datepicker-today":""))+"'"+(F&&!v||!W[2]?"":" title='"+W[2].replace(/'/g,"&#39;")+"'")+(j?"":" data-handler='selectDay' data-event='click' data-month='"+E.getMonth()+"' data-year='"+E.getFullYear()+"'")+">"+(F&&!v?"&#xa0;":j?"<span class='ui-state-default'>"+E.getDate()+"</span>":"<a class='ui-state-default"+(E.getTime()===L.getTime()?" ui-state-highlight":"")+(E.getTime()===Q.getTime()?" ui-state-active":"")+(F?" ui-priority-secondary":"")+"' href='#'>"+E.getDate()+"</a>")+"</td>",E.setDate(E.getDate()+1),E=this._daylightSavingAdjust(E);M+=H+"</tr>"}Z++,Z>11&&(Z=0,te++),M+="</tbody></table>"+(X?"</div>"+(U[0]>0&&D===U[1]-1?"<div class='ui-datepicker-row-break'></div>":""):""),k+=M}y+=k}return y+=h,t._keyEvent=!1,y},_generateMonthYearHeader:function(t,e,i,n,s,a,o,r){var l,h,u,c,d,p,f,m,g=this._get(t,"changeMonth"),v=this._get(t,"changeYear"),_=this._get(t,"showMonthAfterYear"),b="<div class='ui-datepicker-title'>",y="";if(a||!g)y+="<span class='ui-datepicker-month'>"+o[e]+"</span>";else{for(l=n&&n.getFullYear()===i,h=s&&s.getFullYear()===i,y+="<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>",u=0;12>u;u++)(!l||u>=n.getMonth())&&(!h||s.getMonth()>=u)&&(y+="<option value='"+u+"'"+(u===e?" selected='selected'":"")+">"+r[u]+"</option>");y+="</select>"}if(_||(b+=y+(!a&&g&&v?"":"&#xa0;")),!t.yearshtml)if(t.yearshtml="",a||!v)b+="<span class='ui-datepicker-year'>"+i+"</span>";else{for(c=this._get(t,"yearRange").split(":"),d=(new Date).getFullYear(),p=function(t){var e=t.match(/c[+\-].*/)?i+parseInt(t.substring(1),10):t.match(/[+\-].*/)?d+parseInt(t,10):parseInt(t,10);return isNaN(e)?d:e},f=p(c[0]),m=Math.max(f,p(c[1]||"")),f=n?Math.max(f,n.getFullYear()):f,m=s?Math.min(m,s.getFullYear()):m,t.yearshtml+="<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";m>=f;f++)t.yearshtml+="<option value='"+f+"'"+(f===i?" selected='selected'":"")+">"+f+"</option>";t.yearshtml+="</select>",b+=t.yearshtml,t.yearshtml=null}return b+=this._get(t,"yearSuffix"),_&&(b+=(!a&&g&&v?"":"&#xa0;")+y),b+="</div>"},_adjustInstDate:function(t,e,i){var n=t.drawYear+("Y"===i?e:0),s=t.drawMonth+("M"===i?e:0),a=Math.min(t.selectedDay,this._getDaysInMonth(n,s))+("D"===i?e:0),o=this._restrictMinMax(t,this._daylightSavingAdjust(new Date(n,s,a)));t.selectedDay=o.getDate(),t.drawMonth=t.selectedMonth=o.getMonth(),t.drawYear=t.selectedYear=o.getFullYear(),("M"===i||"Y"===i)&&this._notifyChange(t)},_restrictMinMax:function(t,e){var i=this._getMinMaxDate(t,"min"),n=this._getMinMaxDate(t,"max"),s=i&&i>e?i:e;return n&&s>n?n:s},_notifyChange:function(t){var e=this._get(t,"onChangeMonthYear");e&&e.apply(t.input?t.input[0]:null,[t.selectedYear,t.selectedMonth+1,t])},_getNumberOfMonths:function(t){var e=this._get(t,"numberOfMonths");return null==e?[1,1]:"number"==typeof e?[1,e]:e},_getMinMaxDate:function(t,e){return this._determineDate(t,this._get(t,e+"Date"),null)},_getDaysInMonth:function(t,e){return 32-this._daylightSavingAdjust(new Date(t,e,32)).getDate()},_getFirstDayOfMonth:function(t,e){return new Date(t,e,1).getDay()},_canAdjustMonth:function(t,e,i,n){var s=this._getNumberOfMonths(t),a=this._daylightSavingAdjust(new Date(i,n+(0>e?e:s[0]*s[1]),1));return 0>e&&a.setDate(this._getDaysInMonth(a.getFullYear(),a.getMonth())),this._isInRange(t,a)},_isInRange:function(t,e){var i,n,s=this._getMinMaxDate(t,"min"),a=this._getMinMaxDate(t,"max"),o=null,r=null,l=this._get(t,"yearRange");return l&&(i=l.split(":"),n=(new Date).getFullYear(),o=parseInt(i[0],10),r=parseInt(i[1],10),i[0].match(/[+\-].*/)&&(o+=n),i[1].match(/[+\-].*/)&&(r+=n)),(!s||e.getTime()>=s.getTime())&&(!a||e.getTime()<=a.getTime())&&(!o||e.getFullYear()>=o)&&(!r||r>=e.getFullYear())},_getFormatConfig:function(t){var e=this._get(t,"shortYearCutoff");return e="string"!=typeof e?e:(new Date).getFullYear()%100+parseInt(e,10),{shortYearCutoff:e,dayNamesShort:this._get(t,"dayNamesShort"),dayNames:this._get(t,"dayNames"),monthNamesShort:this._get(t,"monthNamesShort"),monthNames:this._get(t,"monthNames")}},_formatDate:function(t,e,i,n){e||(t.currentDay=t.selectedDay,t.currentMonth=t.selectedMonth,t.currentYear=t.selectedYear);var s=e?"object"==typeof e?e:this._daylightSavingAdjust(new Date(n,i,e)):this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay));return this.formatDate(this._get(t,"dateFormat"),s,this._getFormatConfig(t))}}),t.fn.datepicker=function(e){if(!this.length)return this;t.datepicker.initialized||(t(document).mousedown(t.datepicker._checkExternalClick),t.datepicker.initialized=!0),0===t("#"+t.datepicker._mainDivId).length&&t("body").append(t.datepicker.dpDiv);var i=Array.prototype.slice.call(arguments,1);return"string"!=typeof e||"isDisabled"!==e&&"getDate"!==e&&"widget"!==e?"option"===e&&2===arguments.length&&"string"==typeof arguments[1]?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i)):this.each(function(){"string"==typeof e?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this].concat(i)):t.datepicker._attachDatepicker(this,e)}):t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i))},t.datepicker=new i,t.datepicker.initialized=!1,t.datepicker.uuid=(new Date).getTime(),t.datepicker.version="1.10.4"}(jQuery),function(t){var e={buttons:!0,height:!0,maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0,width:!0},i={maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0};t.widget("ui.dialog",{version:"1.10.4",options:{appendTo:"body",autoOpen:!0,buttons:[],closeOnEscape:!0,closeText:"close",dialogClass:"",draggable:!0,hide:null,height:"auto",maxHeight:null,maxWidth:null,minHeight:150,minWidth:150,modal:!1,position:{my:"center",at:"center",of:window,collision:"fit",using:function(e){var i=t(this).css(e).offset().top;0>i&&t(this).css("top",e.top-i)}},resizable:!0,show:null,title:null,width:300,beforeClose:null,close:null,drag:null,dragStart:null,dragStop:null,focus:null,open:null,resize:null,resizeStart:null,resizeStop:null},_create:function(){this.originalCss={display:this.element[0].style.display,width:this.element[0].style.width,minHeight:this.element[0].style.minHeight,maxHeight:this.element[0].style.maxHeight,height:this.element[0].style.height},this.originalPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)},this.originalTitle=this.element.attr("title"),this.options.title=this.options.title||this.originalTitle,this._createWrapper(),this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(this.uiDialog),this._createTitlebar(),this._createButtonPane(),this.options.draggable&&t.fn.draggable&&this._makeDraggable(),this.options.resizable&&t.fn.resizable&&this._makeResizable(),this._isOpen=!1},_init:function(){this.options.autoOpen&&this.open()},_appendTo:function(){var e=this.options.appendTo;return e&&(e.jquery||e.nodeType)?t(e):this.document.find(e||"body").eq(0)},_destroy:function(){var t,e=this.originalPosition;this._destroyOverlay(),this.element.removeUniqueId().removeClass("ui-dialog-content ui-widget-content").css(this.originalCss).detach(),this.uiDialog.stop(!0,!0).remove(),this.originalTitle&&this.element.attr("title",this.originalTitle),t=e.parent.children().eq(e.index),t.length&&t[0]!==this.element[0]?t.before(this.element):e.parent.append(this.element)},widget:function(){return this.uiDialog},disable:t.noop,enable:t.noop,close:function(e){var i,n=this;if(this._isOpen&&this._trigger("beforeClose",e)!==!1){if(this._isOpen=!1,this._destroyOverlay(),!this.opener.filter(":focusable").focus().length)try{i=this.document[0].activeElement,i&&"body"!==i.nodeName.toLowerCase()&&t(i).blur()}catch(s){}this._hide(this.uiDialog,this.options.hide,function(){n._trigger("close",e)})}},isOpen:function(){return this._isOpen},moveToTop:function(){this._moveToTop()},_moveToTop:function(t,e){var i=!!this.uiDialog.nextAll(":visible").insertBefore(this.uiDialog).length;return i&&!e&&this._trigger("focus",t),i},open:function(){var e=this;return this._isOpen?void(this._moveToTop()&&this._focusTabbable()):(this._isOpen=!0,this.opener=t(this.document[0].activeElement),this._size(),this._position(),this._createOverlay(),this._moveToTop(null,!0),this._show(this.uiDialog,this.options.show,function(){e._focusTabbable(),e._trigger("focus")}),void this._trigger("open"))},_focusTabbable:function(){var t=this.element.find("[autofocus]");t.length||(t=this.element.find(":tabbable")),t.length||(t=this.uiDialogButtonPane.find(":tabbable")),t.length||(t=this.uiDialogTitlebarClose.filter(":tabbable")),t.length||(t=this.uiDialog),t.eq(0).focus()},_keepFocus:function(e){function i(){var e=this.document[0].activeElement,i=this.uiDialog[0]===e||t.contains(this.uiDialog[0],e);i||this._focusTabbable()}e.preventDefault(),i.call(this),this._delay(i)},_createWrapper:function(){this.uiDialog=t("<div>").addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front "+this.options.dialogClass).hide().attr({tabIndex:-1,role:"dialog"}).appendTo(this._appendTo()),this._on(this.uiDialog,{keydown:function(e){if(this.options.closeOnEscape&&!e.isDefaultPrevented()&&e.keyCode&&e.keyCode===t.ui.keyCode.ESCAPE)return e.preventDefault(),void this.close(e);if(e.keyCode===t.ui.keyCode.TAB){var i=this.uiDialog.find(":tabbable"),n=i.filter(":first"),s=i.filter(":last");e.target!==s[0]&&e.target!==this.uiDialog[0]||e.shiftKey?e.target!==n[0]&&e.target!==this.uiDialog[0]||!e.shiftKey||(s.focus(1),e.preventDefault()):(n.focus(1),e.preventDefault())}},mousedown:function(t){this._moveToTop(t)&&this._focusTabbable()}}),this.element.find("[aria-describedby]").length||this.uiDialog.attr({"aria-describedby":this.element.uniqueId().attr("id")})},_createTitlebar:function(){var e;this.uiDialogTitlebar=t("<div>").addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(this.uiDialog),this._on(this.uiDialogTitlebar,{mousedown:function(e){t(e.target).closest(".ui-dialog-titlebar-close")||this.uiDialog.focus()}}),this.uiDialogTitlebarClose=t("<button type='button'></button>").button({label:this.options.closeText,icons:{primary:"ui-icon-closethick"},text:!1}).addClass("ui-dialog-titlebar-close").appendTo(this.uiDialogTitlebar),this._on(this.uiDialogTitlebarClose,{click:function(t){t.preventDefault(),this.close(t)}}),e=t("<span>").uniqueId().addClass("ui-dialog-title").prependTo(this.uiDialogTitlebar),this._title(e),this.uiDialog.attr({"aria-labelledby":e.attr("id")})},_title:function(t){this.options.title||t.html("&#160;"),t.text(this.options.title)},_createButtonPane:function(){this.uiDialogButtonPane=t("<div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"),this.uiButtonSet=t("<div>").addClass("ui-dialog-buttonset").appendTo(this.uiDialogButtonPane),this._createButtons()},_createButtons:function(){var e=this,i=this.options.buttons;return this.uiDialogButtonPane.remove(),this.uiButtonSet.empty(),t.isEmptyObject(i)||t.isArray(i)&&!i.length?void this.uiDialog.removeClass("ui-dialog-buttons"):(t.each(i,function(i,n){var s,a;n=t.isFunction(n)?{click:n,text:i}:n,n=t.extend({type:"button"},n),s=n.click,n.click=function(){s.apply(e.element[0],arguments)},a={icons:n.icons,text:n.showText},delete n.icons,delete n.showText,t("<button></button>",n).button(a).appendTo(e.uiButtonSet)}),this.uiDialog.addClass("ui-dialog-buttons"),void this.uiDialogButtonPane.appendTo(this.uiDialog))},_makeDraggable:function(){function e(t){return{position:t.position,offset:t.offset}}var i=this,n=this.options;this.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(n,s){t(this).addClass("ui-dialog-dragging"),i._blockFrames(),i._trigger("dragStart",n,e(s))},drag:function(t,n){i._trigger("drag",t,e(n))},stop:function(s,a){n.position=[a.position.left-i.document.scrollLeft(),a.position.top-i.document.scrollTop()],t(this).removeClass("ui-dialog-dragging"),i._unblockFrames(),i._trigger("dragStop",s,e(a))}})},_makeResizable:function(){function e(t){return{originalPosition:t.originalPosition,originalSize:t.originalSize,position:t.position,size:t.size}}var i=this,n=this.options,s=n.resizable,a=this.uiDialog.css("position"),o="string"==typeof s?s:"n,e,s,w,se,sw,ne,nw";this.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:this.element,maxWidth:n.maxWidth,maxHeight:n.maxHeight,minWidth:n.minWidth,minHeight:this._minHeight(),handles:o,start:function(n,s){t(this).addClass("ui-dialog-resizing"),i._blockFrames(),i._trigger("resizeStart",n,e(s))},resize:function(t,n){i._trigger("resize",t,e(n))},stop:function(s,a){n.height=t(this).height(),n.width=t(this).width(),t(this).removeClass("ui-dialog-resizing"),i._unblockFrames(),i._trigger("resizeStop",s,e(a))}}).css("position",a)},_minHeight:function(){var t=this.options;return"auto"===t.height?t.minHeight:Math.min(t.minHeight,t.height)},_position:function(){var t=this.uiDialog.is(":visible");t||this.uiDialog.show(),this.uiDialog.position(this.options.position),t||this.uiDialog.hide()},_setOptions:function(n){var s=this,a=!1,o={};t.each(n,function(t,n){s._setOption(t,n),t in e&&(a=!0),t in i&&(o[t]=n)}),a&&(this._size(),this._position()),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option",o)},_setOption:function(t,e){var i,n,s=this.uiDialog;"dialogClass"===t&&s.removeClass(this.options.dialogClass).addClass(e),"disabled"!==t&&(this._super(t,e),"appendTo"===t&&this.uiDialog.appendTo(this._appendTo()),"buttons"===t&&this._createButtons(),"closeText"===t&&this.uiDialogTitlebarClose.button({label:""+e}),"draggable"===t&&(i=s.is(":data(ui-draggable)"),i&&!e&&s.draggable("destroy"),!i&&e&&this._makeDraggable()),"position"===t&&this._position(),"resizable"===t&&(n=s.is(":data(ui-resizable)"),n&&!e&&s.resizable("destroy"),n&&"string"==typeof e&&s.resizable("option","handles",e),n||e===!1||this._makeResizable()),"title"===t&&this._title(this.uiDialogTitlebar.find(".ui-dialog-title")))},_size:function(){var t,e,i,n=this.options;this.element.show().css({width:"auto",minHeight:0,maxHeight:"none",height:0}),n.minWidth>n.width&&(n.width=n.minWidth),t=this.uiDialog.css({height:"auto",width:n.width}).outerHeight(),e=Math.max(0,n.minHeight-t),i="number"==typeof n.maxHeight?Math.max(0,n.maxHeight-t):"none","auto"===n.height?this.element.css({minHeight:e,maxHeight:i,height:"auto"}):this.element.height(Math.max(0,n.height-t)),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option","minHeight",this._minHeight())},_blockFrames:function(){this.iframeBlocks=this.document.find("iframe").map(function(){var e=t(this);return t("<div>").css({position:"absolute",width:e.outerWidth(),height:e.outerHeight()}).appendTo(e.parent()).offset(e.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_allowInteraction:function(e){return t(e.target).closest(".ui-dialog").length?!0:!!t(e.target).closest(".ui-datepicker").length},_createOverlay:function(){if(this.options.modal){var e=this,i=this.widgetFullName;t.ui.dialog.overlayInstances||this._delay(function(){t.ui.dialog.overlayInstances&&this.document.bind("focusin.dialog",function(n){e._allowInteraction(n)||(n.preventDefault(),t(".ui-dialog:visible:last .ui-dialog-content").data(i)._focusTabbable())})}),this.overlay=t("<div>").addClass("ui-widget-overlay ui-front").appendTo(this._appendTo()),this._on(this.overlay,{mousedown:"_keepFocus"}),t.ui.dialog.overlayInstances++}},_destroyOverlay:function(){this.options.modal&&this.overlay&&(t.ui.dialog.overlayInstances--,t.ui.dialog.overlayInstances||this.document.unbind("focusin.dialog"),this.overlay.remove(),this.overlay=null)}}),t.ui.dialog.overlayInstances=0,t.uiBackCompat!==!1&&t.widget("ui.dialog",t.ui.dialog,{_position:function(){var e,i=this.options.position,n=[],s=[0,0];i?(("string"==typeof i||"object"==typeof i&&"0"in i)&&(n=i.split?i.split(" "):[i[0],i[1]],1===n.length&&(n[1]=n[0]),t.each(["left","top"],function(t,e){+n[t]===n[t]&&(s[t]=n[t],n[t]=e)}),i={my:n[0]+(0>s[0]?s[0]:"+"+s[0])+" "+n[1]+(0>s[1]?s[1]:"+"+s[1]),at:n.join(" ")}),i=t.extend({},t.ui.dialog.prototype.options.position,i)):i=t.ui.dialog.prototype.options.position,e=this.uiDialog.is(":visible"),e||this.uiDialog.show(),this.uiDialog.position(i),e||this.uiDialog.hide()}})}(jQuery),function(t){t.widget("ui.draggable",t.ui.mouse,{version:"1.10.4",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"!==this.options.helper||/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative"),this.options.addClasses&&this.element.addClass("ui-draggable"),this.options.disabled&&this.element.addClass("ui-draggable-disabled"),this._mouseInit()},_destroy:function(){this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"),this._mouseDestroy()},_mouseCapture:function(e){var i=this.options;return this.helper||i.disabled||t(e.target).closest(".ui-resizable-handle").length>0?!1:(this.handle=this._getHandle(e),this.handle?(t(i.iframeFix===!0?"iframe":i.iframeFix).each(function(){t("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>").css({width:this.offsetWidth+"px",height:this.offsetHeight+"px",position:"absolute",opacity:"0.001",zIndex:1e3}).css(t(this).offset()).appendTo("body")}),!0):!1)},_mouseStart:function(e){var i=this.options;return this.helper=this._createHelper(e),this.helper.addClass("ui-draggable-dragging"),this._cacheHelperProportions(),t.ui.ddmanager&&(t.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(),this.offsetParent=this.helper.offsetParent(),this.offsetParentCssPosition=this.offsetParent.css("position"),this.offset=this.positionAbs=this.element.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},this.offset.scroll=!1,t.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.originalPosition=this.position=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,i.cursorAt&&this._adjustOffsetFromHelper(i.cursorAt),this._setContainment(),this._trigger("start",e)===!1?(this._clear(),!1):(this._cacheHelperProportions(),t.ui.ddmanager&&!i.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this._mouseDrag(e,!0),t.ui.ddmanager&&t.ui.ddmanager.dragStart(this,e),!0)},_mouseDrag:function(e,i){if("fixed"===this.offsetParentCssPosition&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),!i){var n=this._uiHash();if(this._trigger("drag",e,n)===!1)return this._mouseUp({}),!1;this.position=n.position}return this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),!1},_mouseStop:function(e){var i=this,n=!1;return t.ui.ddmanager&&!this.options.dropBehaviour&&(n=t.ui.ddmanager.drop(this,e)),this.dropped&&(n=this.dropped,this.dropped=!1),"original"!==this.options.helper||t.contains(this.element[0].ownerDocument,this.element[0])?("invalid"===this.options.revert&&!n||"valid"===this.options.revert&&n||this.options.revert===!0||t.isFunction(this.options.revert)&&this.options.revert.call(this.element,n)?t(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){i._trigger("stop",e)!==!1&&i._clear()}):this._trigger("stop",e)!==!1&&this._clear(),!1):!1},_mouseUp:function(e){return t("div.ui-draggable-iframeFix").each(function(){this.parentNode.removeChild(this)}),t.ui.ddmanager&&t.ui.ddmanager.dragStop(this,e),t.ui.mouse.prototype._mouseUp.call(this,e)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp({}):this._clear(),this},_getHandle:function(e){return this.options.handle?!!t(e.target).closest(this.element.find(this.options.handle)).length:!0},_createHelper:function(e){var i=this.options,n=t.isFunction(i.helper)?t(i.helper.apply(this.element[0],[e])):"clone"===i.helper?this.element.clone().removeAttr("id"):this.element;return n.parents("body").length||n.appendTo("parent"===i.appendTo?this.element[0].parentNode:i.appendTo),n[0]===this.element[0]||/(fixed|absolute)/.test(n.css("position"))||n.css("position","absolute"),n},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===document.body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&t.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var t=this.element.position();return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:t.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,n,s=this.options;return s.containment?"window"===s.containment?void(this.containment=[t(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,t(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,t(window).scrollLeft()+t(window).width()-this.helperProportions.width-this.margins.left,t(window).scrollTop()+(t(window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]):"document"===s.containment?void(this.containment=[0,0,t(document).width()-this.helperProportions.width-this.margins.left,(t(document).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]):s.containment.constructor===Array?void(this.containment=s.containment):("parent"===s.containment&&(s.containment=this.helper[0].parentNode),i=t(s.containment),n=i[0],void(n&&(e="hidden"!==i.css("overflow"),this.containment=[(parseInt(i.css("borderLeftWidth"),10)||0)+(parseInt(i.css("paddingLeft"),10)||0),(parseInt(i.css("borderTopWidth"),10)||0)+(parseInt(i.css("paddingTop"),10)||0),(e?Math.max(n.scrollWidth,n.offsetWidth):n.offsetWidth)-(parseInt(i.css("borderRightWidth"),10)||0)-(parseInt(i.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(e?Math.max(n.scrollHeight,n.offsetHeight):n.offsetHeight)-(parseInt(i.css("borderBottomWidth"),10)||0)-(parseInt(i.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relative_container=i))):void(this.containment=null)},_convertPositionTo:function(e,i){i||(i=this.position);var n="absolute"===e?1:-1,s="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent;return this.offset.scroll||(this.offset.scroll={top:s.scrollTop(),left:s.scrollLeft()}),{top:i.top+this.offset.relative.top*n+this.offset.parent.top*n-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():this.offset.scroll.top)*n,left:i.left+this.offset.relative.left*n+this.offset.parent.left*n-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():this.offset.scroll.left)*n}},_generatePosition:function(e){var i,n,s,a,o=this.options,r="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,l=e.pageX,h=e.pageY;return this.offset.scroll||(this.offset.scroll={top:r.scrollTop(),left:r.scrollLeft()}),this.originalPosition&&(this.containment&&(this.relative_container?(n=this.relative_container.offset(),i=[this.containment[0]+n.left,this.containment[1]+n.top,this.containment[2]+n.left,this.containment[3]+n.top]):i=this.containment,e.pageX-this.offset.click.left<i[0]&&(l=i[0]+this.offset.click.left),e.pageY-this.offset.click.top<i[1]&&(h=i[1]+this.offset.click.top),e.pageX-this.offset.click.left>i[2]&&(l=i[2]+this.offset.click.left),e.pageY-this.offset.click.top>i[3]&&(h=i[3]+this.offset.click.top)),o.grid&&(s=o.grid[1]?this.originalPageY+Math.round((h-this.originalPageY)/o.grid[1])*o.grid[1]:this.originalPageY,h=i?s-this.offset.click.top>=i[1]||s-this.offset.click.top>i[3]?s:s-this.offset.click.top>=i[1]?s-o.grid[1]:s+o.grid[1]:s,a=o.grid[0]?this.originalPageX+Math.round((l-this.originalPageX)/o.grid[0])*o.grid[0]:this.originalPageX,l=i?a-this.offset.click.left>=i[0]||a-this.offset.click.left>i[2]?a:a-this.offset.click.left>=i[0]?a-o.grid[0]:a+o.grid[0]:a)),{top:h-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():this.offset.scroll.top),left:l-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():this.offset.scroll.left)}},_clear:function(){this.helper.removeClass("ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1
},_trigger:function(e,i,n){return n=n||this._uiHash(),t.ui.plugin.call(this,e,[i,n]),"drag"===e&&(this.positionAbs=this._convertPositionTo("absolute")),t.Widget.prototype._trigger.call(this,e,i,n)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),t.ui.plugin.add("draggable","connectToSortable",{start:function(e,i){var n=t(this).data("ui-draggable"),s=n.options,a=t.extend({},i,{item:n.element});n.sortables=[],t(s.connectToSortable).each(function(){var i=t.data(this,"ui-sortable");i&&!i.options.disabled&&(n.sortables.push({instance:i,shouldRevert:i.options.revert}),i.refreshPositions(),i._trigger("activate",e,a))})},stop:function(e,i){var n=t(this).data("ui-draggable"),s=t.extend({},i,{item:n.element});t.each(n.sortables,function(){this.instance.isOver?(this.instance.isOver=0,n.cancelHelperRemoval=!0,this.instance.cancelHelperRemoval=!1,this.shouldRevert&&(this.instance.options.revert=this.shouldRevert),this.instance._mouseStop(e),this.instance.options.helper=this.instance.options._helper,"original"===n.options.helper&&this.instance.currentItem.css({top:"auto",left:"auto"})):(this.instance.cancelHelperRemoval=!1,this.instance._trigger("deactivate",e,s))})},drag:function(e,i){var n=t(this).data("ui-draggable"),s=this;t.each(n.sortables,function(){var a=!1,o=this;this.instance.positionAbs=n.positionAbs,this.instance.helperProportions=n.helperProportions,this.instance.offset.click=n.offset.click,this.instance._intersectsWith(this.instance.containerCache)&&(a=!0,t.each(n.sortables,function(){return this.instance.positionAbs=n.positionAbs,this.instance.helperProportions=n.helperProportions,this.instance.offset.click=n.offset.click,this!==o&&this.instance._intersectsWith(this.instance.containerCache)&&t.contains(o.instance.element[0],this.instance.element[0])&&(a=!1),a})),a?(this.instance.isOver||(this.instance.isOver=1,this.instance.currentItem=t(s).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item",!0),this.instance.options._helper=this.instance.options.helper,this.instance.options.helper=function(){return i.helper[0]},e.target=this.instance.currentItem[0],this.instance._mouseCapture(e,!0),this.instance._mouseStart(e,!0,!0),this.instance.offset.click.top=n.offset.click.top,this.instance.offset.click.left=n.offset.click.left,this.instance.offset.parent.left-=n.offset.parent.left-this.instance.offset.parent.left,this.instance.offset.parent.top-=n.offset.parent.top-this.instance.offset.parent.top,n._trigger("toSortable",e),n.dropped=this.instance.element,n.currentItem=n.element,this.instance.fromOutside=n),this.instance.currentItem&&this.instance._mouseDrag(e)):this.instance.isOver&&(this.instance.isOver=0,this.instance.cancelHelperRemoval=!0,this.instance.options.revert=!1,this.instance._trigger("out",e,this.instance._uiHash(this.instance)),this.instance._mouseStop(e,!0),this.instance.options.helper=this.instance.options._helper,this.instance.currentItem.remove(),this.instance.placeholder&&this.instance.placeholder.remove(),n._trigger("fromSortable",e),n.dropped=!1)})}}),t.ui.plugin.add("draggable","cursor",{start:function(){var e=t("body"),i=t(this).data("ui-draggable").options;e.css("cursor")&&(i._cursor=e.css("cursor")),e.css("cursor",i.cursor)},stop:function(){var e=t(this).data("ui-draggable").options;e._cursor&&t("body").css("cursor",e._cursor)}}),t.ui.plugin.add("draggable","opacity",{start:function(e,i){var n=t(i.helper),s=t(this).data("ui-draggable").options;n.css("opacity")&&(s._opacity=n.css("opacity")),n.css("opacity",s.opacity)},stop:function(e,i){var n=t(this).data("ui-draggable").options;n._opacity&&t(i.helper).css("opacity",n._opacity)}}),t.ui.plugin.add("draggable","scroll",{start:function(){var e=t(this).data("ui-draggable");e.scrollParent[0]!==document&&"HTML"!==e.scrollParent[0].tagName&&(e.overflowOffset=e.scrollParent.offset())},drag:function(e){var i=t(this).data("ui-draggable"),n=i.options,s=!1;i.scrollParent[0]!==document&&"HTML"!==i.scrollParent[0].tagName?(n.axis&&"x"===n.axis||(i.overflowOffset.top+i.scrollParent[0].offsetHeight-e.pageY<n.scrollSensitivity?i.scrollParent[0].scrollTop=s=i.scrollParent[0].scrollTop+n.scrollSpeed:e.pageY-i.overflowOffset.top<n.scrollSensitivity&&(i.scrollParent[0].scrollTop=s=i.scrollParent[0].scrollTop-n.scrollSpeed)),n.axis&&"y"===n.axis||(i.overflowOffset.left+i.scrollParent[0].offsetWidth-e.pageX<n.scrollSensitivity?i.scrollParent[0].scrollLeft=s=i.scrollParent[0].scrollLeft+n.scrollSpeed:e.pageX-i.overflowOffset.left<n.scrollSensitivity&&(i.scrollParent[0].scrollLeft=s=i.scrollParent[0].scrollLeft-n.scrollSpeed))):(n.axis&&"x"===n.axis||(e.pageY-t(document).scrollTop()<n.scrollSensitivity?s=t(document).scrollTop(t(document).scrollTop()-n.scrollSpeed):t(window).height()-(e.pageY-t(document).scrollTop())<n.scrollSensitivity&&(s=t(document).scrollTop(t(document).scrollTop()+n.scrollSpeed))),n.axis&&"y"===n.axis||(e.pageX-t(document).scrollLeft()<n.scrollSensitivity?s=t(document).scrollLeft(t(document).scrollLeft()-n.scrollSpeed):t(window).width()-(e.pageX-t(document).scrollLeft())<n.scrollSensitivity&&(s=t(document).scrollLeft(t(document).scrollLeft()+n.scrollSpeed)))),s!==!1&&t.ui.ddmanager&&!n.dropBehaviour&&t.ui.ddmanager.prepareOffsets(i,e)}}),t.ui.plugin.add("draggable","snap",{start:function(){var e=t(this).data("ui-draggable"),i=e.options;e.snapElements=[],t(i.snap.constructor!==String?i.snap.items||":data(ui-draggable)":i.snap).each(function(){var i=t(this),n=i.offset();this!==e.element[0]&&e.snapElements.push({item:this,width:i.outerWidth(),height:i.outerHeight(),top:n.top,left:n.left})})},drag:function(e,i){var n,s,a,o,r,l,h,u,c,d,p=t(this).data("ui-draggable"),f=p.options,m=f.snapTolerance,g=i.offset.left,v=g+p.helperProportions.width,_=i.offset.top,b=_+p.helperProportions.height;for(c=p.snapElements.length-1;c>=0;c--)r=p.snapElements[c].left,l=r+p.snapElements[c].width,h=p.snapElements[c].top,u=h+p.snapElements[c].height,r-m>v||g>l+m||h-m>b||_>u+m||!t.contains(p.snapElements[c].item.ownerDocument,p.snapElements[c].item)?(p.snapElements[c].snapping&&p.options.snap.release&&p.options.snap.release.call(p.element,e,t.extend(p._uiHash(),{snapItem:p.snapElements[c].item})),p.snapElements[c].snapping=!1):("inner"!==f.snapMode&&(n=m>=Math.abs(h-b),s=m>=Math.abs(u-_),a=m>=Math.abs(r-v),o=m>=Math.abs(l-g),n&&(i.position.top=p._convertPositionTo("relative",{top:h-p.helperProportions.height,left:0}).top-p.margins.top),s&&(i.position.top=p._convertPositionTo("relative",{top:u,left:0}).top-p.margins.top),a&&(i.position.left=p._convertPositionTo("relative",{top:0,left:r-p.helperProportions.width}).left-p.margins.left),o&&(i.position.left=p._convertPositionTo("relative",{top:0,left:l}).left-p.margins.left)),d=n||s||a||o,"outer"!==f.snapMode&&(n=m>=Math.abs(h-_),s=m>=Math.abs(u-b),a=m>=Math.abs(r-g),o=m>=Math.abs(l-v),n&&(i.position.top=p._convertPositionTo("relative",{top:h,left:0}).top-p.margins.top),s&&(i.position.top=p._convertPositionTo("relative",{top:u-p.helperProportions.height,left:0}).top-p.margins.top),a&&(i.position.left=p._convertPositionTo("relative",{top:0,left:r}).left-p.margins.left),o&&(i.position.left=p._convertPositionTo("relative",{top:0,left:l-p.helperProportions.width}).left-p.margins.left)),!p.snapElements[c].snapping&&(n||s||a||o||d)&&p.options.snap.snap&&p.options.snap.snap.call(p.element,e,t.extend(p._uiHash(),{snapItem:p.snapElements[c].item})),p.snapElements[c].snapping=n||s||a||o||d)}}),t.ui.plugin.add("draggable","stack",{start:function(){var e,i=this.data("ui-draggable").options,n=t.makeArray(t(i.stack)).sort(function(e,i){return(parseInt(t(e).css("zIndex"),10)||0)-(parseInt(t(i).css("zIndex"),10)||0)});n.length&&(e=parseInt(t(n[0]).css("zIndex"),10)||0,t(n).each(function(i){t(this).css("zIndex",e+i)}),this.css("zIndex",e+n.length))}}),t.ui.plugin.add("draggable","zIndex",{start:function(e,i){var n=t(i.helper),s=t(this).data("ui-draggable").options;n.css("zIndex")&&(s._zIndex=n.css("zIndex")),n.css("zIndex",s.zIndex)},stop:function(e,i){var n=t(this).data("ui-draggable").options;n._zIndex&&t(i.helper).css("zIndex",n._zIndex)}})}(jQuery),function(t){function e(t,e,i){return t>e&&e+i>t}t.widget("ui.droppable",{version:"1.10.4",widgetEventPrefix:"drop",options:{accept:"*",activeClass:!1,addClasses:!0,greedy:!1,hoverClass:!1,scope:"default",tolerance:"intersect",activate:null,deactivate:null,drop:null,out:null,over:null},_create:function(){var e,i=this.options,n=i.accept;this.isover=!1,this.isout=!0,this.accept=t.isFunction(n)?n:function(t){return t.is(n)},this.proportions=function(){return arguments.length?void(e=arguments[0]):e?e:e={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight}},t.ui.ddmanager.droppables[i.scope]=t.ui.ddmanager.droppables[i.scope]||[],t.ui.ddmanager.droppables[i.scope].push(this),i.addClasses&&this.element.addClass("ui-droppable")},_destroy:function(){for(var e=0,i=t.ui.ddmanager.droppables[this.options.scope];i.length>e;e++)i[e]===this&&i.splice(e,1);this.element.removeClass("ui-droppable ui-droppable-disabled")},_setOption:function(e,i){"accept"===e&&(this.accept=t.isFunction(i)?i:function(t){return t.is(i)}),t.Widget.prototype._setOption.apply(this,arguments)},_activate:function(e){var i=t.ui.ddmanager.current;this.options.activeClass&&this.element.addClass(this.options.activeClass),i&&this._trigger("activate",e,this.ui(i))},_deactivate:function(e){var i=t.ui.ddmanager.current;this.options.activeClass&&this.element.removeClass(this.options.activeClass),i&&this._trigger("deactivate",e,this.ui(i))},_over:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this.options.hoverClass&&this.element.addClass(this.options.hoverClass),this._trigger("over",e,this.ui(i)))},_out:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this.options.hoverClass&&this.element.removeClass(this.options.hoverClass),this._trigger("out",e,this.ui(i)))},_drop:function(e,i){var n=i||t.ui.ddmanager.current,s=!1;return n&&(n.currentItem||n.element)[0]!==this.element[0]?(this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function(){var e=t.data(this,"ui-droppable");return e.options.greedy&&!e.options.disabled&&e.options.scope===n.options.scope&&e.accept.call(e.element[0],n.currentItem||n.element)&&t.ui.intersect(n,t.extend(e,{offset:e.element.offset()}),e.options.tolerance)?(s=!0,!1):void 0}),s?!1:this.accept.call(this.element[0],n.currentItem||n.element)?(this.options.activeClass&&this.element.removeClass(this.options.activeClass),this.options.hoverClass&&this.element.removeClass(this.options.hoverClass),this._trigger("drop",e,this.ui(n)),this.element):!1):!1},ui:function(t){return{draggable:t.currentItem||t.element,helper:t.helper,position:t.position,offset:t.positionAbs}}}),t.ui.intersect=function(t,i,n){if(!i.offset)return!1;var s,a,o=(t.positionAbs||t.position.absolute).left,r=(t.positionAbs||t.position.absolute).top,l=o+t.helperProportions.width,h=r+t.helperProportions.height,u=i.offset.left,c=i.offset.top,d=u+i.proportions().width,p=c+i.proportions().height;switch(n){case"fit":return o>=u&&d>=l&&r>=c&&p>=h;case"intersect":return o+t.helperProportions.width/2>u&&d>l-t.helperProportions.width/2&&r+t.helperProportions.height/2>c&&p>h-t.helperProportions.height/2;case"pointer":return s=(t.positionAbs||t.position.absolute).left+(t.clickOffset||t.offset.click).left,a=(t.positionAbs||t.position.absolute).top+(t.clickOffset||t.offset.click).top,e(a,c,i.proportions().height)&&e(s,u,i.proportions().width);case"touch":return(r>=c&&p>=r||h>=c&&p>=h||c>r&&h>p)&&(o>=u&&d>=o||l>=u&&d>=l||u>o&&l>d);default:return!1}},t.ui.ddmanager={current:null,droppables:{"default":[]},prepareOffsets:function(e,i){var n,s,a=t.ui.ddmanager.droppables[e.options.scope]||[],o=i?i.type:null,r=(e.currentItem||e.element).find(":data(ui-droppable)").addBack();t:for(n=0;a.length>n;n++)if(!(a[n].options.disabled||e&&!a[n].accept.call(a[n].element[0],e.currentItem||e.element))){for(s=0;r.length>s;s++)if(r[s]===a[n].element[0]){a[n].proportions().height=0;continue t}a[n].visible="none"!==a[n].element.css("display"),a[n].visible&&("mousedown"===o&&a[n]._activate.call(a[n],i),a[n].offset=a[n].element.offset(),a[n].proportions({width:a[n].element[0].offsetWidth,height:a[n].element[0].offsetHeight}))}},drop:function(e,i){var n=!1;return t.each((t.ui.ddmanager.droppables[e.options.scope]||[]).slice(),function(){this.options&&(!this.options.disabled&&this.visible&&t.ui.intersect(e,this,this.options.tolerance)&&(n=this._drop.call(this,i)||n),!this.options.disabled&&this.visible&&this.accept.call(this.element[0],e.currentItem||e.element)&&(this.isout=!0,this.isover=!1,this._deactivate.call(this,i)))}),n},dragStart:function(e,i){e.element.parentsUntil("body").bind("scroll.droppable",function(){e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)})},drag:function(e,i){e.options.refreshPositions&&t.ui.ddmanager.prepareOffsets(e,i),t.each(t.ui.ddmanager.droppables[e.options.scope]||[],function(){if(!this.options.disabled&&!this.greedyChild&&this.visible){var n,s,a,o=t.ui.intersect(e,this,this.options.tolerance),r=!o&&this.isover?"isout":o&&!this.isover?"isover":null;r&&(this.options.greedy&&(s=this.options.scope,a=this.element.parents(":data(ui-droppable)").filter(function(){return t.data(this,"ui-droppable").options.scope===s}),a.length&&(n=t.data(a[0],"ui-droppable"),n.greedyChild="isover"===r)),n&&"isover"===r&&(n.isover=!1,n.isout=!0,n._out.call(n,i)),this[r]=!0,this["isout"===r?"isover":"isout"]=!1,this["isover"===r?"_over":"_out"].call(this,i),n&&"isout"===r&&(n.isout=!1,n.isover=!0,n._over.call(n,i)))}})},dragStop:function(e,i){e.element.parentsUntil("body").unbind("scroll.droppable"),e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)}}}(jQuery),function(t,e){var i="ui-effects-";t.effects={effect:{}},function(t,e){function i(t,e,i){var n=c[e.type]||{};return null==t?i||!e.def?null:e.def:(t=n.floor?~~t:parseFloat(t),isNaN(t)?e.def:n.mod?(t+n.mod)%n.mod:0>t?0:t>n.max?n.max:t)}function n(i){var n=h(),s=n._rgba=[];return i=i.toLowerCase(),f(l,function(t,a){var o,r=a.re.exec(i),l=r&&a.parse(r),h=a.space||"rgba";return l?(o=n[h](l),n[u[h].cache]=o[u[h].cache],s=n._rgba=o._rgba,!1):e}),s.length?("0,0,0,0"===s.join()&&t.extend(s,a.transparent),n):a[i]}function s(t,e,i){return i=(i+1)%1,1>6*i?t+6*(e-t)*i:1>2*i?e:2>3*i?t+6*(e-t)*(2/3-i):t}var a,o="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",r=/^([\-+])=\s*(\d+\.?\d*)/,l=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[t[1],t[2],t[3],t[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[2.55*t[1],2.55*t[2],2.55*t[3],t[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(t){return[t[1],t[2]/100,t[3]/100,t[4]]}}],h=t.Color=function(e,i,n,s){return new t.Color.fn.parse(e,i,n,s)},u={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},c={"byte":{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},d=h.support={},p=t("<p>")[0],f=t.each;p.style.cssText="background-color:rgba(1,1,1,.5)",d.rgba=p.style.backgroundColor.indexOf("rgba")>-1,f(u,function(t,e){e.cache="_"+t,e.props.alpha={idx:3,type:"percent",def:1}}),h.fn=t.extend(h.prototype,{parse:function(s,o,r,l){if(s===e)return this._rgba=[null,null,null,null],this;(s.jquery||s.nodeType)&&(s=t(s).css(o),o=e);var c=this,d=t.type(s),p=this._rgba=[];return o!==e&&(s=[s,o,r,l],d="array"),"string"===d?this.parse(n(s)||a._default):"array"===d?(f(u.rgba.props,function(t,e){p[e.idx]=i(s[e.idx],e)}),this):"object"===d?(s instanceof h?f(u,function(t,e){s[e.cache]&&(c[e.cache]=s[e.cache].slice())}):f(u,function(e,n){var a=n.cache;f(n.props,function(t,e){if(!c[a]&&n.to){if("alpha"===t||null==s[t])return;c[a]=n.to(c._rgba)}c[a][e.idx]=i(s[t],e,!0)}),c[a]&&0>t.inArray(null,c[a].slice(0,3))&&(c[a][3]=1,n.from&&(c._rgba=n.from(c[a])))}),this):e},is:function(t){var i=h(t),n=!0,s=this;return f(u,function(t,a){var o,r=i[a.cache];return r&&(o=s[a.cache]||a.to&&a.to(s._rgba)||[],f(a.props,function(t,i){return null!=r[i.idx]?n=r[i.idx]===o[i.idx]:e})),n}),n},_space:function(){var t=[],e=this;return f(u,function(i,n){e[n.cache]&&t.push(i)}),t.pop()},transition:function(t,e){var n=h(t),s=n._space(),a=u[s],o=0===this.alpha()?h("transparent"):this,r=o[a.cache]||a.to(o._rgba),l=r.slice();return n=n[a.cache],f(a.props,function(t,s){var a=s.idx,o=r[a],h=n[a],u=c[s.type]||{};null!==h&&(null===o?l[a]=h:(u.mod&&(h-o>u.mod/2?o+=u.mod:o-h>u.mod/2&&(o-=u.mod)),l[a]=i((h-o)*e+o,s)))}),this[s](l)},blend:function(e){if(1===this._rgba[3])return this;var i=this._rgba.slice(),n=i.pop(),s=h(e)._rgba;return h(t.map(i,function(t,e){return(1-n)*s[e]+n*t}))},toRgbaString:function(){var e="rgba(",i=t.map(this._rgba,function(t,e){return null==t?e>2?1:0:t});return 1===i[3]&&(i.pop(),e="rgb("),e+i.join()+")"},toHslaString:function(){var e="hsla(",i=t.map(this.hsla(),function(t,e){return null==t&&(t=e>2?1:0),e&&3>e&&(t=Math.round(100*t)+"%"),t});return 1===i[3]&&(i.pop(),e="hsl("),e+i.join()+")"},toHexString:function(e){var i=this._rgba.slice(),n=i.pop();return e&&i.push(~~(255*n)),"#"+t.map(i,function(t){return t=(t||0).toString(16),1===t.length?"0"+t:t}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),h.fn.parse.prototype=h.fn,u.hsla.to=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e,i,n=t[0]/255,s=t[1]/255,a=t[2]/255,o=t[3],r=Math.max(n,s,a),l=Math.min(n,s,a),h=r-l,u=r+l,c=.5*u;return e=l===r?0:n===r?60*(s-a)/h+360:s===r?60*(a-n)/h+120:60*(n-s)/h+240,i=0===h?0:.5>=c?h/u:h/(2-u),[Math.round(e)%360,i,c,null==o?1:o]},u.hsla.from=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e=t[0]/360,i=t[1],n=t[2],a=t[3],o=.5>=n?n*(1+i):n+i-n*i,r=2*n-o;return[Math.round(255*s(r,o,e+1/3)),Math.round(255*s(r,o,e)),Math.round(255*s(r,o,e-1/3)),a]},f(u,function(n,s){var a=s.props,o=s.cache,l=s.to,u=s.from;h.fn[n]=function(n){if(l&&!this[o]&&(this[o]=l(this._rgba)),n===e)return this[o].slice();var s,r=t.type(n),c="array"===r||"object"===r?n:arguments,d=this[o].slice();return f(a,function(t,e){var n=c["object"===r?t:e.idx];null==n&&(n=d[e.idx]),d[e.idx]=i(n,e)}),u?(s=h(u(d)),s[o]=d,s):h(d)},f(a,function(e,i){h.fn[e]||(h.fn[e]=function(s){var a,o=t.type(s),l="alpha"===e?this._hsla?"hsla":"rgba":n,h=this[l](),u=h[i.idx];return"undefined"===o?u:("function"===o&&(s=s.call(this,u),o=t.type(s)),null==s&&i.empty?this:("string"===o&&(a=r.exec(s),a&&(s=u+parseFloat(a[2])*("+"===a[1]?1:-1))),h[i.idx]=s,this[l](h)))})})}),h.hook=function(e){var i=e.split(" ");f(i,function(e,i){t.cssHooks[i]={set:function(e,s){var a,o,r="";if("transparent"!==s&&("string"!==t.type(s)||(a=n(s)))){if(s=h(a||s),!d.rgba&&1!==s._rgba[3]){for(o="backgroundColor"===i?e.parentNode:e;(""===r||"transparent"===r)&&o&&o.style;)try{r=t.css(o,"backgroundColor"),o=o.parentNode}catch(l){}s=s.blend(r&&"transparent"!==r?r:"_default")}s=s.toRgbaString()}try{e.style[i]=s}catch(l){}}},t.fx.step[i]=function(e){e.colorInit||(e.start=h(e.elem,i),e.end=h(e.end),e.colorInit=!0),t.cssHooks[i].set(e.elem,e.start.transition(e.end,e.pos))}})},h.hook(o),t.cssHooks.borderColor={expand:function(t){var e={};return f(["Top","Right","Bottom","Left"],function(i,n){e["border"+n+"Color"]=t}),e}},a=t.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(jQuery),function(){function i(e){var i,n,s=e.ownerDocument.defaultView?e.ownerDocument.defaultView.getComputedStyle(e,null):e.currentStyle,a={};if(s&&s.length&&s[0]&&s[s[0]])for(n=s.length;n--;)i=s[n],"string"==typeof s[i]&&(a[t.camelCase(i)]=s[i]);else for(i in s)"string"==typeof s[i]&&(a[i]=s[i]);return a}function n(e,i){var n,s,o={};for(n in i)s=i[n],e[n]!==s&&(a[n]||(t.fx.step[n]||!isNaN(parseFloat(s)))&&(o[n]=s));return o}var s=["add","remove","toggle"],a={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};t.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(e,i){t.fx.step[i]=function(t){("none"!==t.end&&!t.setAttr||1===t.pos&&!t.setAttr)&&(jQuery.style(t.elem,i,t.end),t.setAttr=!0)}}),t.fn.addBack||(t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.effects.animateClass=function(e,a,o,r){var l=t.speed(a,o,r);return this.queue(function(){var a,o=t(this),r=o.attr("class")||"",h=l.children?o.find("*").addBack():o;h=h.map(function(){var e=t(this);return{el:e,start:i(this)}}),a=function(){t.each(s,function(t,i){e[i]&&o[i+"Class"](e[i])})},a(),h=h.map(function(){return this.end=i(this.el[0]),this.diff=n(this.start,this.end),this}),o.attr("class",r),h=h.map(function(){var e=this,i=t.Deferred(),n=t.extend({},l,{queue:!1,complete:function(){i.resolve(e)}});return this.el.animate(this.diff,n),i.promise()}),t.when.apply(t,h.get()).done(function(){a(),t.each(arguments,function(){var e=this.el;t.each(this.diff,function(t){e.css(t,"")})}),l.complete.call(o[0])})})},t.fn.extend({addClass:function(e){return function(i,n,s,a){return n?t.effects.animateClass.call(this,{add:i},n,s,a):e.apply(this,arguments)}}(t.fn.addClass),removeClass:function(e){return function(i,n,s,a){return arguments.length>1?t.effects.animateClass.call(this,{remove:i},n,s,a):e.apply(this,arguments)}}(t.fn.removeClass),toggleClass:function(i){return function(n,s,a,o,r){return"boolean"==typeof s||s===e?a?t.effects.animateClass.call(this,s?{add:n}:{remove:n},a,o,r):i.apply(this,arguments):t.effects.animateClass.call(this,{toggle:n},s,a,o)}}(t.fn.toggleClass),switchClass:function(e,i,n,s,a){return t.effects.animateClass.call(this,{add:i,remove:e},n,s,a)}})}(),function(){function n(e,i,n,s){return t.isPlainObject(e)&&(i=e,e=e.effect),e={effect:e},null==i&&(i={}),t.isFunction(i)&&(s=i,n=null,i={}),("number"==typeof i||t.fx.speeds[i])&&(s=n,n=i,i={}),t.isFunction(n)&&(s=n,n=null),i&&t.extend(e,i),n=n||i.duration,e.duration=t.fx.off?0:"number"==typeof n?n:n in t.fx.speeds?t.fx.speeds[n]:t.fx.speeds._default,e.complete=s||i.complete,e}function s(e){return!e||"number"==typeof e||t.fx.speeds[e]?!0:"string"!=typeof e||t.effects.effect[e]?t.isFunction(e)?!0:"object"!=typeof e||e.effect?!1:!0:!0}t.extend(t.effects,{version:"1.10.4",save:function(t,e){for(var n=0;e.length>n;n++)null!==e[n]&&t.data(i+e[n],t[0].style[e[n]])},restore:function(t,n){var s,a;for(a=0;n.length>a;a++)null!==n[a]&&(s=t.data(i+n[a]),s===e&&(s=""),t.css(n[a],s))},setMode:function(t,e){return"toggle"===e&&(e=t.is(":hidden")?"show":"hide"),e},getBaseline:function(t,e){var i,n;switch(t[0]){case"top":i=0;break;case"middle":i=.5;break;case"bottom":i=1;break;default:i=t[0]/e.height}switch(t[1]){case"left":n=0;break;case"center":n=.5;break;case"right":n=1;break;default:n=t[1]/e.width}return{x:n,y:i}},createWrapper:function(e){if(e.parent().is(".ui-effects-wrapper"))return e.parent();var i={width:e.outerWidth(!0),height:e.outerHeight(!0),"float":e.css("float")},n=t("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),s={width:e.width(),height:e.height()},a=document.activeElement;try{a.id}catch(o){a=document.body}return e.wrap(n),(e[0]===a||t.contains(e[0],a))&&t(a).focus(),n=e.parent(),"static"===e.css("position")?(n.css({position:"relative"}),e.css({position:"relative"})):(t.extend(i,{position:e.css("position"),zIndex:e.css("z-index")}),t.each(["top","left","bottom","right"],function(t,n){i[n]=e.css(n),isNaN(parseInt(i[n],10))&&(i[n]="auto")}),e.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),e.css(s),n.css(i).show()},removeWrapper:function(e){var i=document.activeElement;return e.parent().is(".ui-effects-wrapper")&&(e.parent().replaceWith(e),(e[0]===i||t.contains(e[0],i))&&t(i).focus()),e},setTransition:function(e,i,n,s){return s=s||{},t.each(i,function(t,i){var a=e.cssUnit(i);a[0]>0&&(s[i]=a[0]*n+a[1])}),s}}),t.fn.extend({effect:function(){function e(e){function n(){t.isFunction(a)&&a.call(s[0]),t.isFunction(e)&&e()}var s=t(this),a=i.complete,r=i.mode;(s.is(":hidden")?"hide"===r:"show"===r)?(s[r](),n()):o.call(s[0],i,n)}var i=n.apply(this,arguments),s=i.mode,a=i.queue,o=t.effects.effect[i.effect];return t.fx.off||!o?s?this[s](i.duration,i.complete):this.each(function(){i.complete&&i.complete.call(this)}):a===!1?this.each(e):this.queue(a||"fx",e)},show:function(t){return function(e){if(s(e))return t.apply(this,arguments);var i=n.apply(this,arguments);return i.mode="show",this.effect.call(this,i)}}(t.fn.show),hide:function(t){return function(e){if(s(e))return t.apply(this,arguments);var i=n.apply(this,arguments);return i.mode="hide",this.effect.call(this,i)}}(t.fn.hide),toggle:function(t){return function(e){if(s(e)||"boolean"==typeof e)return t.apply(this,arguments);var i=n.apply(this,arguments);return i.mode="toggle",this.effect.call(this,i)}}(t.fn.toggle),cssUnit:function(e){var i=this.css(e),n=[];return t.each(["em","px","%","pt"],function(t,e){i.indexOf(e)>0&&(n=[parseFloat(i),e])}),n}})}(),function(){var e={};t.each(["Quad","Cubic","Quart","Quint","Expo"],function(t,i){e[i]=function(e){return Math.pow(e,t+2)}}),t.extend(e,{Sine:function(t){return 1-Math.cos(t*Math.PI/2)},Circ:function(t){return 1-Math.sqrt(1-t*t)},Elastic:function(t){return 0===t||1===t?t:-Math.pow(2,8*(t-1))*Math.sin((80*(t-1)-7.5)*Math.PI/15)},Back:function(t){return t*t*(3*t-2)},Bounce:function(t){for(var e,i=4;((e=Math.pow(2,--i))-1)/11>t;);return 1/Math.pow(4,3-i)-7.5625*Math.pow((3*e-2)/22-t,2)}}),t.each(e,function(e,i){t.easing["easeIn"+e]=i,t.easing["easeOut"+e]=function(t){return 1-i(1-t)},t.easing["easeInOut"+e]=function(t){return.5>t?i(2*t)/2:1-i(-2*t+2)/2}})}()}(jQuery),function(t){var e=/up|down|vertical/,i=/up|left|vertical|horizontal/;t.effects.effect.blind=function(n,s){var a,o,r,l=t(this),h=["position","top","bottom","left","right","height","width"],u=t.effects.setMode(l,n.mode||"hide"),c=n.direction||"up",d=e.test(c),p=d?"height":"width",f=d?"top":"left",m=i.test(c),g={},v="show"===u;l.parent().is(".ui-effects-wrapper")?t.effects.save(l.parent(),h):t.effects.save(l,h),l.show(),a=t.effects.createWrapper(l).css({overflow:"hidden"}),o=a[p](),r=parseFloat(a.css(f))||0,g[p]=v?o:0,m||(l.css(d?"bottom":"right",0).css(d?"top":"left","auto").css({position:"absolute"}),g[f]=v?r:o+r),v&&(a.css(p,0),m||a.css(f,r+o)),a.animate(g,{duration:n.duration,easing:n.easing,queue:!1,complete:function(){"hide"===u&&l.hide(),t.effects.restore(l,h),t.effects.removeWrapper(l),s()}})}}(jQuery),function(t){t.effects.effect.bounce=function(e,i){var n,s,a,o=t(this),r=["position","top","bottom","left","right","height","width"],l=t.effects.setMode(o,e.mode||"effect"),h="hide"===l,u="show"===l,c=e.direction||"up",d=e.distance,p=e.times||5,f=2*p+(u||h?1:0),m=e.duration/f,g=e.easing,v="up"===c||"down"===c?"top":"left",_="up"===c||"left"===c,b=o.queue(),y=b.length;for((u||h)&&r.push("opacity"),t.effects.save(o,r),o.show(),t.effects.createWrapper(o),d||(d=o["top"===v?"outerHeight":"outerWidth"]()/3),u&&(a={opacity:1},a[v]=0,o.css("opacity",0).css(v,_?2*-d:2*d).animate(a,m,g)),h&&(d/=Math.pow(2,p-1)),a={},a[v]=0,n=0;p>n;n++)s={},s[v]=(_?"-=":"+=")+d,o.animate(s,m,g).animate(a,m,g),d=h?2*d:d/2;h&&(s={opacity:0},s[v]=(_?"-=":"+=")+d,o.animate(s,m,g)),o.queue(function(){h&&o.hide(),t.effects.restore(o,r),t.effects.removeWrapper(o),i()}),y>1&&b.splice.apply(b,[1,0].concat(b.splice(y,f+1))),o.dequeue()}}(jQuery),function(t){t.effects.effect.clip=function(e,i){var n,s,a,o=t(this),r=["position","top","bottom","left","right","height","width"],l=t.effects.setMode(o,e.mode||"hide"),h="show"===l,u=e.direction||"vertical",c="vertical"===u,d=c?"height":"width",p=c?"top":"left",f={};t.effects.save(o,r),o.show(),n=t.effects.createWrapper(o).css({overflow:"hidden"}),s="IMG"===o[0].tagName?n:o,a=s[d](),h&&(s.css(d,0),s.css(p,a/2)),f[d]=h?a:0,f[p]=h?0:a/2,s.animate(f,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){h||o.hide(),t.effects.restore(o,r),t.effects.removeWrapper(o),i()}})}}(jQuery),function(t){t.effects.effect.drop=function(e,i){var n,s=t(this),a=["position","top","bottom","left","right","opacity","height","width"],o=t.effects.setMode(s,e.mode||"hide"),r="show"===o,l=e.direction||"left",h="up"===l||"down"===l?"top":"left",u="up"===l||"left"===l?"pos":"neg",c={opacity:r?1:0};t.effects.save(s,a),s.show(),t.effects.createWrapper(s),n=e.distance||s["top"===h?"outerHeight":"outerWidth"](!0)/2,r&&s.css("opacity",0).css(h,"pos"===u?-n:n),c[h]=(r?"pos"===u?"+=":"-=":"pos"===u?"-=":"+=")+n,s.animate(c,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){"hide"===o&&s.hide(),t.effects.restore(s,a),t.effects.removeWrapper(s),i()}})}}(jQuery),function(t){t.effects.effect.explode=function(e,i){function n(){b.push(this),b.length===c*d&&s()}function s(){p.css({visibility:"visible"}),t(b).remove(),m||p.hide(),i()}var a,o,r,l,h,u,c=e.pieces?Math.round(Math.sqrt(e.pieces)):3,d=c,p=t(this),f=t.effects.setMode(p,e.mode||"hide"),m="show"===f,g=p.show().css("visibility","hidden").offset(),v=Math.ceil(p.outerWidth()/d),_=Math.ceil(p.outerHeight()/c),b=[];for(a=0;c>a;a++)for(l=g.top+a*_,u=a-(c-1)/2,o=0;d>o;o++)r=g.left+o*v,h=o-(d-1)/2,p.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-o*v,top:-a*_}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:v,height:_,left:r+(m?h*v:0),top:l+(m?u*_:0),opacity:m?0:1}).animate({left:r+(m?0:h*v),top:l+(m?0:u*_),opacity:m?1:0},e.duration||500,e.easing,n)}}(jQuery),function(t){t.effects.effect.fade=function(e,i){var n=t(this),s=t.effects.setMode(n,e.mode||"toggle");n.animate({opacity:s},{queue:!1,duration:e.duration,easing:e.easing,complete:i})}}(jQuery),function(t){t.effects.effect.fold=function(e,i){var n,s,a=t(this),o=["position","top","bottom","left","right","height","width"],r=t.effects.setMode(a,e.mode||"hide"),l="show"===r,h="hide"===r,u=e.size||15,c=/([0-9]+)%/.exec(u),d=!!e.horizFirst,p=l!==d,f=p?["width","height"]:["height","width"],m=e.duration/2,g={},v={};t.effects.save(a,o),a.show(),n=t.effects.createWrapper(a).css({overflow:"hidden"}),s=p?[n.width(),n.height()]:[n.height(),n.width()],c&&(u=parseInt(c[1],10)/100*s[h?0:1]),l&&n.css(d?{height:0,width:u}:{height:u,width:0}),g[f[0]]=l?s[0]:u,v[f[1]]=l?s[1]:0,n.animate(g,m,e.easing).animate(v,m,e.easing,function(){h&&a.hide(),t.effects.restore(a,o),t.effects.removeWrapper(a),i()})}}(jQuery),function(t){t.effects.effect.highlight=function(e,i){var n=t(this),s=["backgroundImage","backgroundColor","opacity"],a=t.effects.setMode(n,e.mode||"show"),o={backgroundColor:n.css("backgroundColor")};"hide"===a&&(o.opacity=0),t.effects.save(n,s),n.show().css({backgroundImage:"none",backgroundColor:e.color||"#ffff99"}).animate(o,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){"hide"===a&&n.hide(),t.effects.restore(n,s),i()
}})}}(jQuery),function(t){t.effects.effect.pulsate=function(e,i){var n,s=t(this),a=t.effects.setMode(s,e.mode||"show"),o="show"===a,r="hide"===a,l=o||"hide"===a,h=2*(e.times||5)+(l?1:0),u=e.duration/h,c=0,d=s.queue(),p=d.length;for((o||!s.is(":visible"))&&(s.css("opacity",0).show(),c=1),n=1;h>n;n++)s.animate({opacity:c},u,e.easing),c=1-c;s.animate({opacity:c},u,e.easing),s.queue(function(){r&&s.hide(),i()}),p>1&&d.splice.apply(d,[1,0].concat(d.splice(p,h+1))),s.dequeue()}}(jQuery),function(t){t.effects.effect.puff=function(e,i){var n=t(this),s=t.effects.setMode(n,e.mode||"hide"),a="hide"===s,o=parseInt(e.percent,10)||150,r=o/100,l={height:n.height(),width:n.width(),outerHeight:n.outerHeight(),outerWidth:n.outerWidth()};t.extend(e,{effect:"scale",queue:!1,fade:!0,mode:s,complete:i,percent:a?o:100,from:a?l:{height:l.height*r,width:l.width*r,outerHeight:l.outerHeight*r,outerWidth:l.outerWidth*r}}),n.effect(e)},t.effects.effect.scale=function(e,i){var n=t(this),s=t.extend(!0,{},e),a=t.effects.setMode(n,e.mode||"effect"),o=parseInt(e.percent,10)||(0===parseInt(e.percent,10)?0:"hide"===a?0:100),r=e.direction||"both",l=e.origin,h={height:n.height(),width:n.width(),outerHeight:n.outerHeight(),outerWidth:n.outerWidth()},u={y:"horizontal"!==r?o/100:1,x:"vertical"!==r?o/100:1};s.effect="size",s.queue=!1,s.complete=i,"effect"!==a&&(s.origin=l||["middle","center"],s.restore=!0),s.from=e.from||("show"===a?{height:0,width:0,outerHeight:0,outerWidth:0}:h),s.to={height:h.height*u.y,width:h.width*u.x,outerHeight:h.outerHeight*u.y,outerWidth:h.outerWidth*u.x},s.fade&&("show"===a&&(s.from.opacity=0,s.to.opacity=1),"hide"===a&&(s.from.opacity=1,s.to.opacity=0)),n.effect(s)},t.effects.effect.size=function(e,i){var n,s,a,o=t(this),r=["position","top","bottom","left","right","width","height","overflow","opacity"],l=["position","top","bottom","left","right","overflow","opacity"],h=["width","height","overflow"],u=["fontSize"],c=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],d=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],p=t.effects.setMode(o,e.mode||"effect"),f=e.restore||"effect"!==p,m=e.scale||"both",g=e.origin||["middle","center"],v=o.css("position"),_=f?r:l,b={height:0,width:0,outerHeight:0,outerWidth:0};"show"===p&&o.show(),n={height:o.height(),width:o.width(),outerHeight:o.outerHeight(),outerWidth:o.outerWidth()},"toggle"===e.mode&&"show"===p?(o.from=e.to||b,o.to=e.from||n):(o.from=e.from||("show"===p?b:n),o.to=e.to||("hide"===p?b:n)),a={from:{y:o.from.height/n.height,x:o.from.width/n.width},to:{y:o.to.height/n.height,x:o.to.width/n.width}},("box"===m||"both"===m)&&(a.from.y!==a.to.y&&(_=_.concat(c),o.from=t.effects.setTransition(o,c,a.from.y,o.from),o.to=t.effects.setTransition(o,c,a.to.y,o.to)),a.from.x!==a.to.x&&(_=_.concat(d),o.from=t.effects.setTransition(o,d,a.from.x,o.from),o.to=t.effects.setTransition(o,d,a.to.x,o.to))),("content"===m||"both"===m)&&a.from.y!==a.to.y&&(_=_.concat(u).concat(h),o.from=t.effects.setTransition(o,u,a.from.y,o.from),o.to=t.effects.setTransition(o,u,a.to.y,o.to)),t.effects.save(o,_),o.show(),t.effects.createWrapper(o),o.css("overflow","hidden").css(o.from),g&&(s=t.effects.getBaseline(g,n),o.from.top=(n.outerHeight-o.outerHeight())*s.y,o.from.left=(n.outerWidth-o.outerWidth())*s.x,o.to.top=(n.outerHeight-o.to.outerHeight)*s.y,o.to.left=(n.outerWidth-o.to.outerWidth)*s.x),o.css(o.from),("content"===m||"both"===m)&&(c=c.concat(["marginTop","marginBottom"]).concat(u),d=d.concat(["marginLeft","marginRight"]),h=r.concat(c).concat(d),o.find("*[width]").each(function(){var i=t(this),n={height:i.height(),width:i.width(),outerHeight:i.outerHeight(),outerWidth:i.outerWidth()};f&&t.effects.save(i,h),i.from={height:n.height*a.from.y,width:n.width*a.from.x,outerHeight:n.outerHeight*a.from.y,outerWidth:n.outerWidth*a.from.x},i.to={height:n.height*a.to.y,width:n.width*a.to.x,outerHeight:n.height*a.to.y,outerWidth:n.width*a.to.x},a.from.y!==a.to.y&&(i.from=t.effects.setTransition(i,c,a.from.y,i.from),i.to=t.effects.setTransition(i,c,a.to.y,i.to)),a.from.x!==a.to.x&&(i.from=t.effects.setTransition(i,d,a.from.x,i.from),i.to=t.effects.setTransition(i,d,a.to.x,i.to)),i.css(i.from),i.animate(i.to,e.duration,e.easing,function(){f&&t.effects.restore(i,h)})})),o.animate(o.to,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){0===o.to.opacity&&o.css("opacity",o.from.opacity),"hide"===p&&o.hide(),t.effects.restore(o,_),f||("static"===v?o.css({position:"relative",top:o.to.top,left:o.to.left}):t.each(["top","left"],function(t,e){o.css(e,function(e,i){var n=parseInt(i,10),s=t?o.to.left:o.to.top;return"auto"===i?s+"px":n+s+"px"})})),t.effects.removeWrapper(o),i()}})}}(jQuery),function(t){t.effects.effect.shake=function(e,i){var n,s=t(this),a=["position","top","bottom","left","right","height","width"],o=t.effects.setMode(s,e.mode||"effect"),r=e.direction||"left",l=e.distance||20,h=e.times||3,u=2*h+1,c=Math.round(e.duration/u),d="up"===r||"down"===r?"top":"left",p="up"===r||"left"===r,f={},m={},g={},v=s.queue(),_=v.length;for(t.effects.save(s,a),s.show(),t.effects.createWrapper(s),f[d]=(p?"-=":"+=")+l,m[d]=(p?"+=":"-=")+2*l,g[d]=(p?"-=":"+=")+2*l,s.animate(f,c,e.easing),n=1;h>n;n++)s.animate(m,c,e.easing).animate(g,c,e.easing);s.animate(m,c,e.easing).animate(f,c/2,e.easing).queue(function(){"hide"===o&&s.hide(),t.effects.restore(s,a),t.effects.removeWrapper(s),i()}),_>1&&v.splice.apply(v,[1,0].concat(v.splice(_,u+1))),s.dequeue()}}(jQuery),function(t){t.effects.effect.slide=function(e,i){var n,s=t(this),a=["position","top","bottom","left","right","width","height"],o=t.effects.setMode(s,e.mode||"show"),r="show"===o,l=e.direction||"left",h="up"===l||"down"===l?"top":"left",u="up"===l||"left"===l,c={};t.effects.save(s,a),s.show(),n=e.distance||s["top"===h?"outerHeight":"outerWidth"](!0),t.effects.createWrapper(s).css({overflow:"hidden"}),r&&s.css(h,u?isNaN(n)?"-"+n:-n:n),c[h]=(r?u?"+=":"-=":u?"-=":"+=")+n,s.animate(c,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){"hide"===o&&s.hide(),t.effects.restore(s,a),t.effects.removeWrapper(s),i()}})}}(jQuery),function(t){t.effects.effect.transfer=function(e,i){var n=t(this),s=t(e.to),a="fixed"===s.css("position"),o=t("body"),r=a?o.scrollTop():0,l=a?o.scrollLeft():0,h=s.offset(),u={top:h.top-r,left:h.left-l,height:s.innerHeight(),width:s.innerWidth()},c=n.offset(),d=t("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(e.className).css({top:c.top-r,left:c.left-l,height:n.innerHeight(),width:n.innerWidth(),position:a?"fixed":"absolute"}).animate(u,e.duration,e.easing,function(){d.remove(),i()})}}(jQuery),function(t){t.widget("ui.menu",{version:"1.10.4",defaultElement:"<ul>",delay:300,options:{icons:{submenu:"ui-icon-carat-1-e"},menus:"ul",position:{my:"left top",at:"right top"},role:"menu",blur:null,focus:null,select:null},_create:function(){this.activeMenu=this.element,this.mouseHandled=!1,this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content ui-corner-all").toggleClass("ui-menu-icons",!!this.element.find(".ui-icon").length).attr({role:this.options.role,tabIndex:0}).bind("click"+this.eventNamespace,t.proxy(function(t){this.options.disabled&&t.preventDefault()},this)),this.options.disabled&&this.element.addClass("ui-state-disabled").attr("aria-disabled","true"),this._on({"mousedown .ui-menu-item > a":function(t){t.preventDefault()},"click .ui-state-disabled > a":function(t){t.preventDefault()},"click .ui-menu-item:has(a)":function(e){var i=t(e.target).closest(".ui-menu-item");!this.mouseHandled&&i.not(".ui-state-disabled").length&&(this.select(e),e.isPropagationStopped()||(this.mouseHandled=!0),i.has(".ui-menu").length?this.expand(e):!this.element.is(":focus")&&t(this.document[0].activeElement).closest(".ui-menu").length&&(this.element.trigger("focus",[!0]),this.active&&1===this.active.parents(".ui-menu").length&&clearTimeout(this.timer)))},"mouseenter .ui-menu-item":function(e){var i=t(e.currentTarget);i.siblings().children(".ui-state-active").removeClass("ui-state-active"),this.focus(e,i)},mouseleave:"collapseAll","mouseleave .ui-menu":"collapseAll",focus:function(t,e){var i=this.active||this.element.children(".ui-menu-item").eq(0);e||this.focus(t,i)},blur:function(e){this._delay(function(){t.contains(this.element[0],this.document[0].activeElement)||this.collapseAll(e)})},keydown:"_keydown"}),this.refresh(),this._on(this.document,{click:function(e){t(e.target).closest(".ui-menu").length||this.collapseAll(e),this.mouseHandled=!1}})},_destroy:function(){this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeClass("ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show(),this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").children("a").removeUniqueId().removeClass("ui-corner-all ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function(){var e=t(this);e.data("ui-menu-submenu-carat")&&e.remove()}),this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content")},_keydown:function(e){function i(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}var n,s,a,o,r,l=!0;switch(e.keyCode){case t.ui.keyCode.PAGE_UP:this.previousPage(e);break;case t.ui.keyCode.PAGE_DOWN:this.nextPage(e);break;case t.ui.keyCode.HOME:this._move("first","first",e);break;case t.ui.keyCode.END:this._move("last","last",e);break;case t.ui.keyCode.UP:this.previous(e);break;case t.ui.keyCode.DOWN:this.next(e);break;case t.ui.keyCode.LEFT:this.collapse(e);break;case t.ui.keyCode.RIGHT:this.active&&!this.active.is(".ui-state-disabled")&&this.expand(e);break;case t.ui.keyCode.ENTER:case t.ui.keyCode.SPACE:this._activate(e);break;case t.ui.keyCode.ESCAPE:this.collapse(e);break;default:l=!1,s=this.previousFilter||"",a=String.fromCharCode(e.keyCode),o=!1,clearTimeout(this.filterTimer),a===s?o=!0:a=s+a,r=RegExp("^"+i(a),"i"),n=this.activeMenu.children(".ui-menu-item").filter(function(){return r.test(t(this).children("a").text())}),n=o&&-1!==n.index(this.active.next())?this.active.nextAll(".ui-menu-item"):n,n.length||(a=String.fromCharCode(e.keyCode),r=RegExp("^"+i(a),"i"),n=this.activeMenu.children(".ui-menu-item").filter(function(){return r.test(t(this).children("a").text())})),n.length?(this.focus(e,n),n.length>1?(this.previousFilter=a,this.filterTimer=this._delay(function(){delete this.previousFilter},1e3)):delete this.previousFilter):delete this.previousFilter}l&&e.preventDefault()},_activate:function(t){this.active.is(".ui-state-disabled")||(this.active.children("a[aria-haspopup='true']").length?this.expand(t):this.select(t))},refresh:function(){var e,i=this.options.icons.submenu,n=this.element.find(this.options.menus);this.element.toggleClass("ui-menu-icons",!!this.element.find(".ui-icon").length),n.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-corner-all").hide().attr({role:this.options.role,"aria-hidden":"true","aria-expanded":"false"}).each(function(){var e=t(this),n=e.prev("a"),s=t("<span>").addClass("ui-menu-icon ui-icon "+i).data("ui-menu-submenu-carat",!0);n.attr("aria-haspopup","true").prepend(s),e.attr("aria-labelledby",n.attr("id"))}),e=n.add(this.element),e.children(":not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role","presentation").children("a").uniqueId().addClass("ui-corner-all").attr({tabIndex:-1,role:this._itemRole()}),e.children(":not(.ui-menu-item)").each(function(){var e=t(this);/[^\-\u2014\u2013\s]/.test(e.text())||e.addClass("ui-widget-content ui-menu-divider")}),e.children(".ui-state-disabled").attr("aria-disabled","true"),this.active&&!t.contains(this.element[0],this.active[0])&&this.blur()},_itemRole:function(){return{menu:"menuitem",listbox:"option"}[this.options.role]},_setOption:function(t,e){"icons"===t&&this.element.find(".ui-menu-icon").removeClass(this.options.icons.submenu).addClass(e.submenu),this._super(t,e)},focus:function(t,e){var i,n;this.blur(t,t&&"focus"===t.type),this._scrollIntoView(e),this.active=e.first(),n=this.active.children("a").addClass("ui-state-focus"),this.options.role&&this.element.attr("aria-activedescendant",n.attr("id")),this.active.parent().closest(".ui-menu-item").children("a:first").addClass("ui-state-active"),t&&"keydown"===t.type?this._close():this.timer=this._delay(function(){this._close()},this.delay),i=e.children(".ui-menu"),i.length&&t&&/^mouse/.test(t.type)&&this._startOpening(i),this.activeMenu=e.parent(),this._trigger("focus",t,{item:e})},_scrollIntoView:function(e){var i,n,s,a,o,r;this._hasScroll()&&(i=parseFloat(t.css(this.activeMenu[0],"borderTopWidth"))||0,n=parseFloat(t.css(this.activeMenu[0],"paddingTop"))||0,s=e.offset().top-this.activeMenu.offset().top-i-n,a=this.activeMenu.scrollTop(),o=this.activeMenu.height(),r=e.height(),0>s?this.activeMenu.scrollTop(a+s):s+r>o&&this.activeMenu.scrollTop(a+s-o+r))},blur:function(t,e){e||clearTimeout(this.timer),this.active&&(this.active.children("a").removeClass("ui-state-focus"),this.active=null,this._trigger("blur",t,{item:this.active}))},_startOpening:function(t){clearTimeout(this.timer),"true"===t.attr("aria-hidden")&&(this.timer=this._delay(function(){this._close(),this._open(t)},this.delay))},_open:function(e){var i=t.extend({of:this.active},this.options.position);clearTimeout(this.timer),this.element.find(".ui-menu").not(e.parents(".ui-menu")).hide().attr("aria-hidden","true"),e.show().removeAttr("aria-hidden").attr("aria-expanded","true").position(i)},collapseAll:function(e,i){clearTimeout(this.timer),this.timer=this._delay(function(){var n=i?this.element:t(e&&e.target).closest(this.element.find(".ui-menu"));n.length||(n=this.element),this._close(n),this.blur(e),this.activeMenu=n},this.delay)},_close:function(t){t||(t=this.active?this.active.parent():this.element),t.find(".ui-menu").hide().attr("aria-hidden","true").attr("aria-expanded","false").end().find("a.ui-state-active").removeClass("ui-state-active")},collapse:function(t){var e=this.active&&this.active.parent().closest(".ui-menu-item",this.element);e&&e.length&&(this._close(),this.focus(t,e))},expand:function(t){var e=this.active&&this.active.children(".ui-menu ").children(".ui-menu-item").first();e&&e.length&&(this._open(e.parent()),this._delay(function(){this.focus(t,e)}))},next:function(t){this._move("next","first",t)},previous:function(t){this._move("prev","last",t)},isFirstItem:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length},isLastItem:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length},_move:function(t,e,i){var n;this.active&&(n="first"===t||"last"===t?this.active["first"===t?"prevAll":"nextAll"](".ui-menu-item").eq(-1):this.active[t+"All"](".ui-menu-item").eq(0)),n&&n.length&&this.active||(n=this.activeMenu.children(".ui-menu-item")[e]()),this.focus(i,n)},nextPage:function(e){var i,n,s;return this.active?void(this.isLastItem()||(this._hasScroll()?(n=this.active.offset().top,s=this.element.height(),this.active.nextAll(".ui-menu-item").each(function(){return i=t(this),0>i.offset().top-n-s}),this.focus(e,i)):this.focus(e,this.activeMenu.children(".ui-menu-item")[this.active?"last":"first"]()))):void this.next(e)},previousPage:function(e){var i,n,s;return this.active?void(this.isFirstItem()||(this._hasScroll()?(n=this.active.offset().top,s=this.element.height(),this.active.prevAll(".ui-menu-item").each(function(){return i=t(this),i.offset().top-n+s>0}),this.focus(e,i)):this.focus(e,this.activeMenu.children(".ui-menu-item").first()))):void this.next(e)},_hasScroll:function(){return this.element.outerHeight()<this.element.prop("scrollHeight")},select:function(e){this.active=this.active||t(e.target).closest(".ui-menu-item");var i={item:this.active};this.active.has(".ui-menu").length||this.collapseAll(e,!0),this._trigger("select",e,i)}})}(jQuery),function(t,e){t.widget("ui.progressbar",{version:"1.10.4",options:{max:100,value:0,change:null,complete:null},min:0,_create:function(){this.oldValue=this.options.value=this._constrainedValue(),this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({role:"progressbar","aria-valuemin":this.min}),this.valueDiv=t("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element),this._refreshValue()},_destroy:function(){this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"),this.valueDiv.remove()},value:function(t){return t===e?this.options.value:(this.options.value=this._constrainedValue(t),this._refreshValue(),e)},_constrainedValue:function(t){return t===e&&(t=this.options.value),this.indeterminate=t===!1,"number"!=typeof t&&(t=0),this.indeterminate?!1:Math.min(this.options.max,Math.max(this.min,t))},_setOptions:function(t){var e=t.value;delete t.value,this._super(t),this.options.value=this._constrainedValue(e),this._refreshValue()},_setOption:function(t,e){"max"===t&&(e=Math.max(this.min,e)),this._super(t,e)},_percentage:function(){return this.indeterminate?100:100*(this.options.value-this.min)/(this.options.max-this.min)},_refreshValue:function(){var e=this.options.value,i=this._percentage();this.valueDiv.toggle(this.indeterminate||e>this.min).toggleClass("ui-corner-right",e===this.options.max).width(i.toFixed(0)+"%"),this.element.toggleClass("ui-progressbar-indeterminate",this.indeterminate),this.indeterminate?(this.element.removeAttr("aria-valuenow"),this.overlayDiv||(this.overlayDiv=t("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv))):(this.element.attr({"aria-valuemax":this.options.max,"aria-valuenow":e}),this.overlayDiv&&(this.overlayDiv.remove(),this.overlayDiv=null)),this.oldValue!==e&&(this.oldValue=e,this._trigger("change")),e===this.options.max&&this._trigger("complete")}})}(jQuery),function(t){function e(t){return parseInt(t,10)||0}function i(t){return!isNaN(parseInt(t,10))}t.widget("ui.resizable",t.ui.mouse,{version:"1.10.4",widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:90,resize:null,start:null,stop:null},_create:function(){var e,i,n,s,a,o=this,r=this.options;if(this.element.addClass("ui-resizable"),t.extend(this,{_aspectRatio:!!r.aspectRatio,aspectRatio:r.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:r.helper||r.ghost||r.animate?r.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)&&(this.element.wrap(t("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("ui-resizable",this.element.data("ui-resizable")),this.elementIsWrapper=!0,this.element.css({marginLeft:this.originalElement.css("marginLeft"),marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom")}),this.originalElement.css({marginLeft:0,marginTop:0,marginRight:0,marginBottom:0}),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css({margin:this.originalElement.css("margin")}),this._proportionallyResize()),this.handles=r.handles||(t(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se"),this.handles.constructor===String)for("all"===this.handles&&(this.handles="n,e,s,w,se,sw,ne,nw"),e=this.handles.split(","),this.handles={},i=0;e.length>i;i++)n=t.trim(e[i]),a="ui-resizable-"+n,s=t("<div class='ui-resizable-handle "+a+"'></div>"),s.css({zIndex:r.zIndex}),"se"===n&&s.addClass("ui-icon ui-icon-gripsmall-diagonal-se"),this.handles[n]=".ui-resizable-"+n,this.element.append(s);this._renderAxis=function(e){var i,n,s,a;e=e||this.element;for(i in this.handles)this.handles[i].constructor===String&&(this.handles[i]=t(this.handles[i],this.element).show()),this.elementIsWrapper&&this.originalElement[0].nodeName.match(/textarea|input|select|button/i)&&(n=t(this.handles[i],this.element),a=/sw|ne|nw|se|n|s/.test(i)?n.outerHeight():n.outerWidth(),s=["padding",/ne|nw|n/.test(i)?"Top":/se|sw|s/.test(i)?"Bottom":/^e$/.test(i)?"Right":"Left"].join(""),e.css(s,a),this._proportionallyResize()),t(this.handles[i]).length},this._renderAxis(this.element),this._handles=t(".ui-resizable-handle",this.element).disableSelection(),this._handles.mouseover(function(){o.resizing||(this.className&&(s=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)),o.axis=s&&s[1]?s[1]:"se")}),r.autoHide&&(this._handles.hide(),t(this.element).addClass("ui-resizable-autohide").mouseenter(function(){r.disabled||(t(this).removeClass("ui-resizable-autohide"),o._handles.show())}).mouseleave(function(){r.disabled||o.resizing||(t(this).addClass("ui-resizable-autohide"),o._handles.hide())})),this._mouseInit()},_destroy:function(){this._mouseDestroy();var e,i=function(e){t(e).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove()};return this.elementIsWrapper&&(i(this.element),e=this.element,this.originalElement.css({position:e.css("position"),width:e.outerWidth(),height:e.outerHeight(),top:e.css("top"),left:e.css("left")}).insertAfter(e),e.remove()),this.originalElement.css("resize",this.originalResizeStyle),i(this.originalElement),this},_mouseCapture:function(e){var i,n,s=!1;for(i in this.handles)n=t(this.handles[i])[0],(n===e.target||t.contains(n,e.target))&&(s=!0);return!this.options.disabled&&s},_mouseStart:function(i){var n,s,a,o=this.options,r=this.element.position(),l=this.element;return this.resizing=!0,/absolute/.test(l.css("position"))?l.css({position:"absolute",top:l.css("top"),left:l.css("left")}):l.is(".ui-draggable")&&l.css({position:"absolute",top:r.top,left:r.left}),this._renderProxy(),n=e(this.helper.css("left")),s=e(this.helper.css("top")),o.containment&&(n+=t(o.containment).scrollLeft()||0,s+=t(o.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:n,top:s},this.size=this._helper?{width:this.helper.width(),height:this.helper.height()}:{width:l.width(),height:l.height()},this.originalSize=this._helper?{width:l.outerWidth(),height:l.outerHeight()}:{width:l.width(),height:l.height()},this.originalPosition={left:n,top:s},this.sizeDiff={width:l.outerWidth()-l.width(),height:l.outerHeight()-l.height()},this.originalMousePosition={left:i.pageX,top:i.pageY},this.aspectRatio="number"==typeof o.aspectRatio?o.aspectRatio:this.originalSize.width/this.originalSize.height||1,a=t(".ui-resizable-"+this.axis).css("cursor"),t("body").css("cursor","auto"===a?this.axis+"-resize":a),l.addClass("ui-resizable-resizing"),this._propagate("start",i),!0},_mouseDrag:function(e){var i,n=this.helper,s={},a=this.originalMousePosition,o=this.axis,r=this.position.top,l=this.position.left,h=this.size.width,u=this.size.height,c=e.pageX-a.left||0,d=e.pageY-a.top||0,p=this._change[o];return p?(i=p.apply(this,[e,c,d]),this._updateVirtualBoundaries(e.shiftKey),(this._aspectRatio||e.shiftKey)&&(i=this._updateRatio(i,e)),i=this._respectSize(i,e),this._updateCache(i),this._propagate("resize",e),this.position.top!==r&&(s.top=this.position.top+"px"),this.position.left!==l&&(s.left=this.position.left+"px"),this.size.width!==h&&(s.width=this.size.width+"px"),this.size.height!==u&&(s.height=this.size.height+"px"),n.css(s),!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize(),t.isEmptyObject(s)||this._trigger("resize",e,this.ui()),!1):!1},_mouseStop:function(e){this.resizing=!1;var i,n,s,a,o,r,l,h=this.options,u=this;return this._helper&&(i=this._proportionallyResizeElements,n=i.length&&/textarea/i.test(i[0].nodeName),s=n&&t.ui.hasScroll(i[0],"left")?0:u.sizeDiff.height,a=n?0:u.sizeDiff.width,o={width:u.helper.width()-a,height:u.helper.height()-s},r=parseInt(u.element.css("left"),10)+(u.position.left-u.originalPosition.left)||null,l=parseInt(u.element.css("top"),10)+(u.position.top-u.originalPosition.top)||null,h.animate||this.element.css(t.extend(o,{top:l,left:r})),u.helper.height(u.size.height),u.helper.width(u.size.width),this._helper&&!h.animate&&this._proportionallyResize()),t("body").css("cursor","auto"),this.element.removeClass("ui-resizable-resizing"),this._propagate("stop",e),this._helper&&this.helper.remove(),!1},_updateVirtualBoundaries:function(t){var e,n,s,a,o,r=this.options;o={minWidth:i(r.minWidth)?r.minWidth:0,maxWidth:i(r.maxWidth)?r.maxWidth:1/0,minHeight:i(r.minHeight)?r.minHeight:0,maxHeight:i(r.maxHeight)?r.maxHeight:1/0},(this._aspectRatio||t)&&(e=o.minHeight*this.aspectRatio,s=o.minWidth/this.aspectRatio,n=o.maxHeight*this.aspectRatio,a=o.maxWidth/this.aspectRatio,e>o.minWidth&&(o.minWidth=e),s>o.minHeight&&(o.minHeight=s),o.maxWidth>n&&(o.maxWidth=n),o.maxHeight>a&&(o.maxHeight=a)),this._vBoundaries=o},_updateCache:function(t){this.offset=this.helper.offset(),i(t.left)&&(this.position.left=t.left),i(t.top)&&(this.position.top=t.top),i(t.height)&&(this.size.height=t.height),i(t.width)&&(this.size.width=t.width)},_updateRatio:function(t){var e=this.position,n=this.size,s=this.axis;return i(t.height)?t.width=t.height*this.aspectRatio:i(t.width)&&(t.height=t.width/this.aspectRatio),"sw"===s&&(t.left=e.left+(n.width-t.width),t.top=null),"nw"===s&&(t.top=e.top+(n.height-t.height),t.left=e.left+(n.width-t.width)),t},_respectSize:function(t){var e=this._vBoundaries,n=this.axis,s=i(t.width)&&e.maxWidth&&e.maxWidth<t.width,a=i(t.height)&&e.maxHeight&&e.maxHeight<t.height,o=i(t.width)&&e.minWidth&&e.minWidth>t.width,r=i(t.height)&&e.minHeight&&e.minHeight>t.height,l=this.originalPosition.left+this.originalSize.width,h=this.position.top+this.size.height,u=/sw|nw|w/.test(n),c=/nw|ne|n/.test(n);return o&&(t.width=e.minWidth),r&&(t.height=e.minHeight),s&&(t.width=e.maxWidth),a&&(t.height=e.maxHeight),o&&u&&(t.left=l-e.minWidth),s&&u&&(t.left=l-e.maxWidth),r&&c&&(t.top=h-e.minHeight),a&&c&&(t.top=h-e.maxHeight),t.width||t.height||t.left||!t.top?t.width||t.height||t.top||!t.left||(t.left=null):t.top=null,t},_proportionallyResize:function(){if(this._proportionallyResizeElements.length){var t,e,i,n,s,a=this.helper||this.element;for(t=0;this._proportionallyResizeElements.length>t;t++){if(s=this._proportionallyResizeElements[t],!this.borderDif)for(this.borderDif=[],i=[s.css("borderTopWidth"),s.css("borderRightWidth"),s.css("borderBottomWidth"),s.css("borderLeftWidth")],n=[s.css("paddingTop"),s.css("paddingRight"),s.css("paddingBottom"),s.css("paddingLeft")],e=0;i.length>e;e++)this.borderDif[e]=(parseInt(i[e],10)||0)+(parseInt(n[e],10)||0);s.css({height:a.height()-this.borderDif[0]-this.borderDif[2]||0,width:a.width()-this.borderDif[1]-this.borderDif[3]||0})}}},_renderProxy:function(){var e=this.element,i=this.options;this.elementOffset=e.offset(),this._helper?(this.helper=this.helper||t("<div style='overflow:hidden;'></div>"),this.helper.addClass(this._helper).css({width:this.element.outerWidth()-1,height:this.element.outerHeight()-1,position:"absolute",left:this.elementOffset.left+"px",top:this.elementOffset.top+"px",zIndex:++i.zIndex}),this.helper.appendTo("body").disableSelection()):this.helper=this.element},_change:{e:function(t,e){return{width:this.originalSize.width+e}},w:function(t,e){var i=this.originalSize,n=this.originalPosition;return{left:n.left+e,width:i.width-e}},n:function(t,e,i){var n=this.originalSize,s=this.originalPosition;return{top:s.top+i,height:n.height-i}},s:function(t,e,i){return{height:this.originalSize.height+i}},se:function(e,i,n){return t.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[e,i,n]))},sw:function(e,i,n){return t.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[e,i,n]))},ne:function(e,i,n){return t.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[e,i,n]))},nw:function(e,i,n){return t.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[e,i,n]))}},_propagate:function(e,i){t.ui.plugin.call(this,e,[i,this.ui()]),"resize"!==e&&this._trigger(e,i,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),t.ui.plugin.add("resizable","animate",{stop:function(e){var i=t(this).data("ui-resizable"),n=i.options,s=i._proportionallyResizeElements,a=s.length&&/textarea/i.test(s[0].nodeName),o=a&&t.ui.hasScroll(s[0],"left")?0:i.sizeDiff.height,r=a?0:i.sizeDiff.width,l={width:i.size.width-r,height:i.size.height-o},h=parseInt(i.element.css("left"),10)+(i.position.left-i.originalPosition.left)||null,u=parseInt(i.element.css("top"),10)+(i.position.top-i.originalPosition.top)||null;i.element.animate(t.extend(l,u&&h?{top:u,left:h}:{}),{duration:n.animateDuration,easing:n.animateEasing,step:function(){var n={width:parseInt(i.element.css("width"),10),height:parseInt(i.element.css("height"),10),top:parseInt(i.element.css("top"),10),left:parseInt(i.element.css("left"),10)};s&&s.length&&t(s[0]).css({width:n.width,height:n.height}),i._updateCache(n),i._propagate("resize",e)}})}}),t.ui.plugin.add("resizable","containment",{start:function(){var i,n,s,a,o,r,l,h=t(this).data("ui-resizable"),u=h.options,c=h.element,d=u.containment,p=d instanceof t?d.get(0):/parent/.test(d)?c.parent().get(0):d;p&&(h.containerElement=t(p),/document/.test(d)||d===document?(h.containerOffset={left:0,top:0},h.containerPosition={left:0,top:0},h.parentData={element:t(document),left:0,top:0,width:t(document).width(),height:t(document).height()||document.body.parentNode.scrollHeight}):(i=t(p),n=[],t(["Top","Right","Left","Bottom"]).each(function(t,s){n[t]=e(i.css("padding"+s))}),h.containerOffset=i.offset(),h.containerPosition=i.position(),h.containerSize={height:i.innerHeight()-n[3],width:i.innerWidth()-n[1]},s=h.containerOffset,a=h.containerSize.height,o=h.containerSize.width,r=t.ui.hasScroll(p,"left")?p.scrollWidth:o,l=t.ui.hasScroll(p)?p.scrollHeight:a,h.parentData={element:p,left:s.left,top:s.top,width:r,height:l}))},resize:function(e){var i,n,s,a,o=t(this).data("ui-resizable"),r=o.options,l=o.containerOffset,h=o.position,u=o._aspectRatio||e.shiftKey,c={top:0,left:0},d=o.containerElement;d[0]!==document&&/static/.test(d.css("position"))&&(c=l),h.left<(o._helper?l.left:0)&&(o.size.width=o.size.width+(o._helper?o.position.left-l.left:o.position.left-c.left),u&&(o.size.height=o.size.width/o.aspectRatio),o.position.left=r.helper?l.left:0),h.top<(o._helper?l.top:0)&&(o.size.height=o.size.height+(o._helper?o.position.top-l.top:o.position.top),u&&(o.size.width=o.size.height*o.aspectRatio),o.position.top=o._helper?l.top:0),o.offset.left=o.parentData.left+o.position.left,o.offset.top=o.parentData.top+o.position.top,i=Math.abs((o._helper?o.offset.left-c.left:o.offset.left-c.left)+o.sizeDiff.width),n=Math.abs((o._helper?o.offset.top-c.top:o.offset.top-l.top)+o.sizeDiff.height),s=o.containerElement.get(0)===o.element.parent().get(0),a=/relative|absolute/.test(o.containerElement.css("position")),s&&a&&(i-=Math.abs(o.parentData.left)),i+o.size.width>=o.parentData.width&&(o.size.width=o.parentData.width-i,u&&(o.size.height=o.size.width/o.aspectRatio)),n+o.size.height>=o.parentData.height&&(o.size.height=o.parentData.height-n,u&&(o.size.width=o.size.height*o.aspectRatio))
},stop:function(){var e=t(this).data("ui-resizable"),i=e.options,n=e.containerOffset,s=e.containerPosition,a=e.containerElement,o=t(e.helper),r=o.offset(),l=o.outerWidth()-e.sizeDiff.width,h=o.outerHeight()-e.sizeDiff.height;e._helper&&!i.animate&&/relative/.test(a.css("position"))&&t(this).css({left:r.left-s.left-n.left,width:l,height:h}),e._helper&&!i.animate&&/static/.test(a.css("position"))&&t(this).css({left:r.left-s.left-n.left,width:l,height:h})}}),t.ui.plugin.add("resizable","alsoResize",{start:function(){var e=t(this).data("ui-resizable"),i=e.options,n=function(e){t(e).each(function(){var e=t(this);e.data("ui-resizable-alsoresize",{width:parseInt(e.width(),10),height:parseInt(e.height(),10),left:parseInt(e.css("left"),10),top:parseInt(e.css("top"),10)})})};"object"!=typeof i.alsoResize||i.alsoResize.parentNode?n(i.alsoResize):i.alsoResize.length?(i.alsoResize=i.alsoResize[0],n(i.alsoResize)):t.each(i.alsoResize,function(t){n(t)})},resize:function(e,i){var n=t(this).data("ui-resizable"),s=n.options,a=n.originalSize,o=n.originalPosition,r={height:n.size.height-a.height||0,width:n.size.width-a.width||0,top:n.position.top-o.top||0,left:n.position.left-o.left||0},l=function(e,n){t(e).each(function(){var e=t(this),s=t(this).data("ui-resizable-alsoresize"),a={},o=n&&n.length?n:e.parents(i.originalElement[0]).length?["width","height"]:["width","height","top","left"];t.each(o,function(t,e){var i=(s[e]||0)+(r[e]||0);i&&i>=0&&(a[e]=i||null)}),e.css(a)})};"object"!=typeof s.alsoResize||s.alsoResize.nodeType?l(s.alsoResize):t.each(s.alsoResize,function(t,e){l(t,e)})},stop:function(){t(this).removeData("resizable-alsoresize")}}),t.ui.plugin.add("resizable","ghost",{start:function(){var e=t(this).data("ui-resizable"),i=e.options,n=e.size;e.ghost=e.originalElement.clone(),e.ghost.css({opacity:.25,display:"block",position:"relative",height:n.height,width:n.width,margin:0,left:0,top:0}).addClass("ui-resizable-ghost").addClass("string"==typeof i.ghost?i.ghost:""),e.ghost.appendTo(e.helper)},resize:function(){var e=t(this).data("ui-resizable");e.ghost&&e.ghost.css({position:"relative",height:e.size.height,width:e.size.width})},stop:function(){var e=t(this).data("ui-resizable");e.ghost&&e.helper&&e.helper.get(0).removeChild(e.ghost.get(0))}}),t.ui.plugin.add("resizable","grid",{resize:function(){var e=t(this).data("ui-resizable"),i=e.options,n=e.size,s=e.originalSize,a=e.originalPosition,o=e.axis,r="number"==typeof i.grid?[i.grid,i.grid]:i.grid,l=r[0]||1,h=r[1]||1,u=Math.round((n.width-s.width)/l)*l,c=Math.round((n.height-s.height)/h)*h,d=s.width+u,p=s.height+c,f=i.maxWidth&&d>i.maxWidth,m=i.maxHeight&&p>i.maxHeight,g=i.minWidth&&i.minWidth>d,v=i.minHeight&&i.minHeight>p;i.grid=r,g&&(d+=l),v&&(p+=h),f&&(d-=l),m&&(p-=h),/^(se|s|e)$/.test(o)?(e.size.width=d,e.size.height=p):/^(ne)$/.test(o)?(e.size.width=d,e.size.height=p,e.position.top=a.top-c):/^(sw)$/.test(o)?(e.size.width=d,e.size.height=p,e.position.left=a.left-u):(p-h>0?(e.size.height=p,e.position.top=a.top-c):(e.size.height=h,e.position.top=a.top+s.height-h),d-l>0?(e.size.width=d,e.position.left=a.left-u):(e.size.width=l,e.position.left=a.left+s.width-l))}})}(jQuery),function(t){t.widget("ui.selectable",t.ui.mouse,{version:"1.10.4",options:{appendTo:"body",autoRefresh:!0,distance:0,filter:"*",tolerance:"touch",selected:null,selecting:null,start:null,stop:null,unselected:null,unselecting:null},_create:function(){var e,i=this;this.element.addClass("ui-selectable"),this.dragged=!1,this.refresh=function(){e=t(i.options.filter,i.element[0]),e.addClass("ui-selectee"),e.each(function(){var e=t(this),i=e.offset();t.data(this,"selectable-item",{element:this,$element:e,left:i.left,top:i.top,right:i.left+e.outerWidth(),bottom:i.top+e.outerHeight(),startselected:!1,selected:e.hasClass("ui-selected"),selecting:e.hasClass("ui-selecting"),unselecting:e.hasClass("ui-unselecting")})})},this.refresh(),this.selectees=e.addClass("ui-selectee"),this._mouseInit(),this.helper=t("<div class='ui-selectable-helper'></div>")},_destroy:function(){this.selectees.removeClass("ui-selectee").removeData("selectable-item"),this.element.removeClass("ui-selectable ui-selectable-disabled"),this._mouseDestroy()},_mouseStart:function(e){var i=this,n=this.options;this.opos=[e.pageX,e.pageY],this.options.disabled||(this.selectees=t(n.filter,this.element[0]),this._trigger("start",e),t(n.appendTo).append(this.helper),this.helper.css({left:e.pageX,top:e.pageY,width:0,height:0}),n.autoRefresh&&this.refresh(),this.selectees.filter(".ui-selected").each(function(){var n=t.data(this,"selectable-item");n.startselected=!0,e.metaKey||e.ctrlKey||(n.$element.removeClass("ui-selected"),n.selected=!1,n.$element.addClass("ui-unselecting"),n.unselecting=!0,i._trigger("unselecting",e,{unselecting:n.element}))}),t(e.target).parents().addBack().each(function(){var n,s=t.data(this,"selectable-item");return s?(n=!e.metaKey&&!e.ctrlKey||!s.$element.hasClass("ui-selected"),s.$element.removeClass(n?"ui-unselecting":"ui-selected").addClass(n?"ui-selecting":"ui-unselecting"),s.unselecting=!n,s.selecting=n,s.selected=n,n?i._trigger("selecting",e,{selecting:s.element}):i._trigger("unselecting",e,{unselecting:s.element}),!1):void 0}))},_mouseDrag:function(e){if(this.dragged=!0,!this.options.disabled){var i,n=this,s=this.options,a=this.opos[0],o=this.opos[1],r=e.pageX,l=e.pageY;return a>r&&(i=r,r=a,a=i),o>l&&(i=l,l=o,o=i),this.helper.css({left:a,top:o,width:r-a,height:l-o}),this.selectees.each(function(){var i=t.data(this,"selectable-item"),h=!1;i&&i.element!==n.element[0]&&("touch"===s.tolerance?h=!(i.left>r||a>i.right||i.top>l||o>i.bottom):"fit"===s.tolerance&&(h=i.left>a&&r>i.right&&i.top>o&&l>i.bottom),h?(i.selected&&(i.$element.removeClass("ui-selected"),i.selected=!1),i.unselecting&&(i.$element.removeClass("ui-unselecting"),i.unselecting=!1),i.selecting||(i.$element.addClass("ui-selecting"),i.selecting=!0,n._trigger("selecting",e,{selecting:i.element}))):(i.selecting&&((e.metaKey||e.ctrlKey)&&i.startselected?(i.$element.removeClass("ui-selecting"),i.selecting=!1,i.$element.addClass("ui-selected"),i.selected=!0):(i.$element.removeClass("ui-selecting"),i.selecting=!1,i.startselected&&(i.$element.addClass("ui-unselecting"),i.unselecting=!0),n._trigger("unselecting",e,{unselecting:i.element}))),i.selected&&(e.metaKey||e.ctrlKey||i.startselected||(i.$element.removeClass("ui-selected"),i.selected=!1,i.$element.addClass("ui-unselecting"),i.unselecting=!0,n._trigger("unselecting",e,{unselecting:i.element})))))}),!1}},_mouseStop:function(e){var i=this;return this.dragged=!1,t(".ui-unselecting",this.element[0]).each(function(){var n=t.data(this,"selectable-item");n.$element.removeClass("ui-unselecting"),n.unselecting=!1,n.startselected=!1,i._trigger("unselected",e,{unselected:n.element})}),t(".ui-selecting",this.element[0]).each(function(){var n=t.data(this,"selectable-item");n.$element.removeClass("ui-selecting").addClass("ui-selected"),n.selecting=!1,n.selected=!0,n.startselected=!0,i._trigger("selected",e,{selected:n.element})}),this._trigger("stop",e),this.helper.remove(),!1}})}(jQuery),function(t){var e=5;t.widget("ui.slider",t.ui.mouse,{version:"1.10.4",widgetEventPrefix:"slide",options:{animate:!1,distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null,change:null,slide:null,start:null,stop:null},_create:function(){this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this.element.addClass("ui-slider ui-slider-"+this.orientation+" ui-widget ui-widget-content ui-corner-all"),this._refresh(),this._setOption("disabled",this.options.disabled),this._animateOff=!1},_refresh:function(){this._createRange(),this._createHandles(),this._setupEvents(),this._refreshValue()},_createHandles:function(){var e,i,n=this.options,s=this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),a="<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",o=[];for(i=n.values&&n.values.length||1,s.length>i&&(s.slice(i).remove(),s=s.slice(0,i)),e=s.length;i>e;e++)o.push(a);this.handles=s.add(t(o.join("")).appendTo(this.element)),this.handle=this.handles.eq(0),this.handles.each(function(e){t(this).data("ui-slider-handle-index",e)})},_createRange:function(){var e=this.options,i="";e.range?(e.range===!0&&(e.values?e.values.length&&2!==e.values.length?e.values=[e.values[0],e.values[0]]:t.isArray(e.values)&&(e.values=e.values.slice(0)):e.values=[this._valueMin(),this._valueMin()]),this.range&&this.range.length?this.range.removeClass("ui-slider-range-min ui-slider-range-max").css({left:"",bottom:""}):(this.range=t("<div></div>").appendTo(this.element),i="ui-slider-range ui-widget-header ui-corner-all"),this.range.addClass(i+("min"===e.range||"max"===e.range?" ui-slider-range-"+e.range:""))):(this.range&&this.range.remove(),this.range=null)},_setupEvents:function(){var t=this.handles.add(this.range).filter("a");this._off(t),this._on(t,this._handleEvents),this._hoverable(t),this._focusable(t)},_destroy:function(){this.handles.remove(),this.range&&this.range.remove(),this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-widget ui-widget-content ui-corner-all"),this._mouseDestroy()},_mouseCapture:function(e){var i,n,s,a,o,r,l,h,u=this,c=this.options;return c.disabled?!1:(this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()},this.elementOffset=this.element.offset(),i={x:e.pageX,y:e.pageY},n=this._normValueFromMouse(i),s=this._valueMax()-this._valueMin()+1,this.handles.each(function(e){var i=Math.abs(n-u.values(e));(s>i||s===i&&(e===u._lastChangedValue||u.values(e)===c.min))&&(s=i,a=t(this),o=e)}),r=this._start(e,o),r===!1?!1:(this._mouseSliding=!0,this._handleIndex=o,a.addClass("ui-state-active").focus(),l=a.offset(),h=!t(e.target).parents().addBack().is(".ui-slider-handle"),this._clickOffset=h?{left:0,top:0}:{left:e.pageX-l.left-a.width()/2,top:e.pageY-l.top-a.height()/2-(parseInt(a.css("borderTopWidth"),10)||0)-(parseInt(a.css("borderBottomWidth"),10)||0)+(parseInt(a.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(e,o,n),this._animateOff=!0,!0))},_mouseStart:function(){return!0},_mouseDrag:function(t){var e={x:t.pageX,y:t.pageY},i=this._normValueFromMouse(e);return this._slide(t,this._handleIndex,i),!1},_mouseStop:function(t){return this.handles.removeClass("ui-state-active"),this._mouseSliding=!1,this._stop(t,this._handleIndex),this._change(t,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1,!1},_detectOrientation:function(){this.orientation="vertical"===this.options.orientation?"vertical":"horizontal"},_normValueFromMouse:function(t){var e,i,n,s,a;return"horizontal"===this.orientation?(e=this.elementSize.width,i=t.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(e=this.elementSize.height,i=t.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),n=i/e,n>1&&(n=1),0>n&&(n=0),"vertical"===this.orientation&&(n=1-n),s=this._valueMax()-this._valueMin(),a=this._valueMin()+n*s,this._trimAlignValue(a)},_start:function(t,e){var i={handle:this.handles[e],value:this.value()};return this.options.values&&this.options.values.length&&(i.value=this.values(e),i.values=this.values()),this._trigger("start",t,i)},_slide:function(t,e,i){var n,s,a;this.options.values&&this.options.values.length?(n=this.values(e?0:1),2===this.options.values.length&&this.options.range===!0&&(0===e&&i>n||1===e&&n>i)&&(i=n),i!==this.values(e)&&(s=this.values(),s[e]=i,a=this._trigger("slide",t,{handle:this.handles[e],value:i,values:s}),n=this.values(e?0:1),a!==!1&&this.values(e,i))):i!==this.value()&&(a=this._trigger("slide",t,{handle:this.handles[e],value:i}),a!==!1&&this.value(i))},_stop:function(t,e){var i={handle:this.handles[e],value:this.value()};this.options.values&&this.options.values.length&&(i.value=this.values(e),i.values=this.values()),this._trigger("stop",t,i)},_change:function(t,e){if(!this._keySliding&&!this._mouseSliding){var i={handle:this.handles[e],value:this.value()};this.options.values&&this.options.values.length&&(i.value=this.values(e),i.values=this.values()),this._lastChangedValue=e,this._trigger("change",t,i)}},value:function(t){return arguments.length?(this.options.value=this._trimAlignValue(t),this._refreshValue(),void this._change(null,0)):this._value()},values:function(e,i){var n,s,a;if(arguments.length>1)return this.options.values[e]=this._trimAlignValue(i),this._refreshValue(),void this._change(null,e);if(!arguments.length)return this._values();if(!t.isArray(arguments[0]))return this.options.values&&this.options.values.length?this._values(e):this.value();for(n=this.options.values,s=arguments[0],a=0;n.length>a;a+=1)n[a]=this._trimAlignValue(s[a]),this._change(null,a);this._refreshValue()},_setOption:function(e,i){var n,s=0;switch("range"===e&&this.options.range===!0&&("min"===i?(this.options.value=this._values(0),this.options.values=null):"max"===i&&(this.options.value=this._values(this.options.values.length-1),this.options.values=null)),t.isArray(this.options.values)&&(s=this.options.values.length),t.Widget.prototype._setOption.apply(this,arguments),e){case"orientation":this._detectOrientation(),this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-"+this.orientation),this._refreshValue();break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":for(this._animateOff=!0,this._refreshValue(),n=0;s>n;n+=1)this._change(null,n);this._animateOff=!1;break;case"min":case"max":this._animateOff=!0,this._refreshValue(),this._animateOff=!1;break;case"range":this._animateOff=!0,this._refresh(),this._animateOff=!1}},_value:function(){var t=this.options.value;return t=this._trimAlignValue(t)},_values:function(t){var e,i,n;if(arguments.length)return e=this.options.values[t],e=this._trimAlignValue(e);if(this.options.values&&this.options.values.length){for(i=this.options.values.slice(),n=0;i.length>n;n+=1)i[n]=this._trimAlignValue(i[n]);return i}return[]},_trimAlignValue:function(t){if(this._valueMin()>=t)return this._valueMin();if(t>=this._valueMax())return this._valueMax();var e=this.options.step>0?this.options.step:1,i=(t-this._valueMin())%e,n=t-i;return 2*Math.abs(i)>=e&&(n+=i>0?e:-e),parseFloat(n.toFixed(5))},_valueMin:function(){return this.options.min},_valueMax:function(){return this.options.max},_refreshValue:function(){var e,i,n,s,a,o=this.options.range,r=this.options,l=this,h=this._animateOff?!1:r.animate,u={};this.options.values&&this.options.values.length?this.handles.each(function(n){i=100*((l.values(n)-l._valueMin())/(l._valueMax()-l._valueMin())),u["horizontal"===l.orientation?"left":"bottom"]=i+"%",t(this).stop(1,1)[h?"animate":"css"](u,r.animate),l.options.range===!0&&("horizontal"===l.orientation?(0===n&&l.range.stop(1,1)[h?"animate":"css"]({left:i+"%"},r.animate),1===n&&l.range[h?"animate":"css"]({width:i-e+"%"},{queue:!1,duration:r.animate})):(0===n&&l.range.stop(1,1)[h?"animate":"css"]({bottom:i+"%"},r.animate),1===n&&l.range[h?"animate":"css"]({height:i-e+"%"},{queue:!1,duration:r.animate}))),e=i}):(n=this.value(),s=this._valueMin(),a=this._valueMax(),i=a!==s?100*((n-s)/(a-s)):0,u["horizontal"===this.orientation?"left":"bottom"]=i+"%",this.handle.stop(1,1)[h?"animate":"css"](u,r.animate),"min"===o&&"horizontal"===this.orientation&&this.range.stop(1,1)[h?"animate":"css"]({width:i+"%"},r.animate),"max"===o&&"horizontal"===this.orientation&&this.range[h?"animate":"css"]({width:100-i+"%"},{queue:!1,duration:r.animate}),"min"===o&&"vertical"===this.orientation&&this.range.stop(1,1)[h?"animate":"css"]({height:i+"%"},r.animate),"max"===o&&"vertical"===this.orientation&&this.range[h?"animate":"css"]({height:100-i+"%"},{queue:!1,duration:r.animate}))},_handleEvents:{keydown:function(i){var n,s,a,o,r=t(i.target).data("ui-slider-handle-index");switch(i.keyCode){case t.ui.keyCode.HOME:case t.ui.keyCode.END:case t.ui.keyCode.PAGE_UP:case t.ui.keyCode.PAGE_DOWN:case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(i.preventDefault(),!this._keySliding&&(this._keySliding=!0,t(i.target).addClass("ui-state-active"),n=this._start(i,r),n===!1))return}switch(o=this.options.step,s=a=this.options.values&&this.options.values.length?this.values(r):this.value(),i.keyCode){case t.ui.keyCode.HOME:a=this._valueMin();break;case t.ui.keyCode.END:a=this._valueMax();break;case t.ui.keyCode.PAGE_UP:a=this._trimAlignValue(s+(this._valueMax()-this._valueMin())/e);break;case t.ui.keyCode.PAGE_DOWN:a=this._trimAlignValue(s-(this._valueMax()-this._valueMin())/e);break;case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:if(s===this._valueMax())return;a=this._trimAlignValue(s+o);break;case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(s===this._valueMin())return;a=this._trimAlignValue(s-o)}this._slide(i,r,a)},click:function(t){t.preventDefault()},keyup:function(e){var i=t(e.target).data("ui-slider-handle-index");this._keySliding&&(this._keySliding=!1,this._stop(e,i),this._change(e,i),t(e.target).removeClass("ui-state-active"))}}})}(jQuery),function(t){function e(t,e,i){return t>e&&e+i>t}function i(t){return/left|right/.test(t.css("float"))||/inline|table-cell/.test(t.css("display"))}t.widget("ui.sortable",t.ui.mouse,{version:"1.10.4",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_create:function(){var t=this.options;this.containerCache={},this.element.addClass("ui-sortable"),this.refresh(),this.floating=this.items.length?"x"===t.axis||i(this.items[0].item):!1,this.offset=this.element.offset(),this._mouseInit(),this.ready=!0},_destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled"),this._mouseDestroy();for(var t=this.items.length-1;t>=0;t--)this.items[t].item.removeData(this.widgetName+"-item");return this},_setOption:function(e,i){"disabled"===e?(this.options[e]=i,this.widget().toggleClass("ui-sortable-disabled",!!i)):t.Widget.prototype._setOption.apply(this,arguments)},_mouseCapture:function(e,i){var n=null,s=!1,a=this;return this.reverting?!1:this.options.disabled||"static"===this.options.type?!1:(this._refreshItems(e),t(e.target).parents().each(function(){return t.data(this,a.widgetName+"-item")===a?(n=t(this),!1):void 0}),t.data(e.target,a.widgetName+"-item")===a&&(n=t(e.target)),n&&(!this.options.handle||i||(t(this.options.handle,n).find("*").addBack().each(function(){this===e.target&&(s=!0)}),s))?(this.currentItem=n,this._removeCurrentsFromItems(),!0):!1)},_mouseStart:function(e,i,n){var s,a,o=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(e),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},t.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,o.cursorAt&&this._adjustOffsetFromHelper(o.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),o.containment&&this._setContainment(),o.cursor&&"auto"!==o.cursor&&(a=this.document.find("body"),this.storedCursor=a.css("cursor"),a.css("cursor",o.cursor),this.storedStylesheet=t("<style>*{ cursor: "+o.cursor+" !important; }</style>").appendTo(a)),o.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",o.opacity)),o.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",o.zIndex)),this.scrollParent[0]!==document&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",e,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!n)for(s=this.containers.length-1;s>=0;s--)this.containers[s]._trigger("activate",e,this._uiHash(this));return t.ui.ddmanager&&(t.ui.ddmanager.current=this),t.ui.ddmanager&&!o.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this.dragging=!0,this.helper.addClass("ui-sortable-helper"),this._mouseDrag(e),!0},_mouseDrag:function(e){var i,n,s,a,o=this.options,r=!1;for(this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==document&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-e.pageY<o.scrollSensitivity?this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop+o.scrollSpeed:e.pageY-this.overflowOffset.top<o.scrollSensitivity&&(this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop-o.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-e.pageX<o.scrollSensitivity?this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft+o.scrollSpeed:e.pageX-this.overflowOffset.left<o.scrollSensitivity&&(this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft-o.scrollSpeed)):(e.pageY-t(document).scrollTop()<o.scrollSensitivity?r=t(document).scrollTop(t(document).scrollTop()-o.scrollSpeed):t(window).height()-(e.pageY-t(document).scrollTop())<o.scrollSensitivity&&(r=t(document).scrollTop(t(document).scrollTop()+o.scrollSpeed)),e.pageX-t(document).scrollLeft()<o.scrollSensitivity?r=t(document).scrollLeft(t(document).scrollLeft()-o.scrollSpeed):t(window).width()-(e.pageX-t(document).scrollLeft())<o.scrollSensitivity&&(r=t(document).scrollLeft(t(document).scrollLeft()+o.scrollSpeed))),r!==!1&&t.ui.ddmanager&&!o.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(n=this.items[i],s=n.item[0],a=this._intersectsWithPointer(n),a&&n.instance===this.currentContainer&&s!==this.currentItem[0]&&this.placeholder[1===a?"next":"prev"]()[0]!==s&&!t.contains(this.placeholder[0],s)&&("semi-dynamic"===this.options.type?!t.contains(this.element[0],s):!0)){if(this.direction=1===a?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(n))break;this._rearrange(e,n),this._trigger("change",e,this._uiHash());break}return this._contactContainers(e),t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),this._trigger("sort",e,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(e,i){if(e){if(t.ui.ddmanager&&!this.options.dropBehaviour&&t.ui.ddmanager.drop(this,e),this.options.revert){var n=this,s=this.placeholder.offset(),a=this.options.axis,o={};a&&"x"!==a||(o.left=s.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollLeft)),a&&"y"!==a||(o.top=s.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,t(this.helper).animate(o,parseInt(this.options.revert,10)||500,function(){n._clear(e)})}else this._clear(e,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp({target:null}),"original"===this.options.helper?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):this.currentItem.show();for(var e=this.containers.length-1;e>=0;e--)this.containers[e]._trigger("deactivate",null,this._uiHash(this)),this.containers[e].containerCache.over&&(this.containers[e]._trigger("out",null,this._uiHash(this)),this.containers[e].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),t.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?t(this.domPosition.prev).after(this.currentItem):t(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(e){var i=this._getItemsAsjQuery(e&&e.connected),n=[];return e=e||{},t(i).each(function(){var i=(t(e.item||this).attr(e.attribute||"id")||"").match(e.expression||/(.+)[\-=_](.+)/);i&&n.push((e.key||i[1]+"[]")+"="+(e.key&&e.expression?i[1]:i[2]))}),!n.length&&e.key&&n.push(e.key+"="),n.join("&")},toArray:function(e){var i=this._getItemsAsjQuery(e&&e.connected),n=[];return e=e||{},i.each(function(){n.push(t(e.item||this).attr(e.attribute||"id")||"")}),n},_intersectsWith:function(t){var e=this.positionAbs.left,i=e+this.helperProportions.width,n=this.positionAbs.top,s=n+this.helperProportions.height,a=t.left,o=a+t.width,r=t.top,l=r+t.height,h=this.offset.click.top,u=this.offset.click.left,c="x"===this.options.axis||n+h>r&&l>n+h,d="y"===this.options.axis||e+u>a&&o>e+u,p=c&&d;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>t[this.floating?"width":"height"]?p:e+this.helperProportions.width/2>a&&o>i-this.helperProportions.width/2&&n+this.helperProportions.height/2>r&&l>s-this.helperProportions.height/2},_intersectsWithPointer:function(t){var i="x"===this.options.axis||e(this.positionAbs.top+this.offset.click.top,t.top,t.height),n="y"===this.options.axis||e(this.positionAbs.left+this.offset.click.left,t.left,t.width),s=i&&n,a=this._getDragVerticalDirection(),o=this._getDragHorizontalDirection();return s?this.floating?o&&"right"===o||"down"===a?2:1:a&&("down"===a?2:1):!1},_intersectsWithSides:function(t){var i=e(this.positionAbs.top+this.offset.click.top,t.top+t.height/2,t.height),n=e(this.positionAbs.left+this.offset.click.left,t.left+t.width/2,t.width),s=this._getDragVerticalDirection(),a=this._getDragHorizontalDirection();return this.floating&&a?"right"===a&&n||"left"===a&&!n:s&&("down"===s&&i||"up"===s&&!i)},_getDragVerticalDirection:function(){var t=this.positionAbs.top-this.lastPositionAbs.top;return 0!==t&&(t>0?"down":"up")},_getDragHorizontalDirection:function(){var t=this.positionAbs.left-this.lastPositionAbs.left;return 0!==t&&(t>0?"right":"left")},refresh:function(t){return this._refreshItems(t),this.refreshPositions(),this},_connectWith:function(){var t=this.options;return t.connectWith.constructor===String?[t.connectWith]:t.connectWith},_getItemsAsjQuery:function(e){function i(){r.push(this)}var n,s,a,o,r=[],l=[],h=this._connectWith();if(h&&e)for(n=h.length-1;n>=0;n--)for(a=t(h[n]),s=a.length-1;s>=0;s--)o=t.data(a[s],this.widgetFullName),o&&o!==this&&!o.options.disabled&&l.push([t.isFunction(o.options.items)?o.options.items.call(o.element):t(o.options.items,o.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),o]);for(l.push([t.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):t(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),n=l.length-1;n>=0;n--)l[n][0].each(i);return t(r)},_removeCurrentsFromItems:function(){var e=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=t.grep(this.items,function(t){for(var i=0;e.length>i;i++)if(e[i]===t.item[0])return!1;return!0})},_refreshItems:function(e){this.items=[],this.containers=[this];var i,n,s,a,o,r,l,h,u=this.items,c=[[t.isFunction(this.options.items)?this.options.items.call(this.element[0],e,{item:this.currentItem}):t(this.options.items,this.element),this]],d=this._connectWith();if(d&&this.ready)for(i=d.length-1;i>=0;i--)for(s=t(d[i]),n=s.length-1;n>=0;n--)a=t.data(s[n],this.widgetFullName),a&&a!==this&&!a.options.disabled&&(c.push([t.isFunction(a.options.items)?a.options.items.call(a.element[0],e,{item:this.currentItem}):t(a.options.items,a.element),a]),this.containers.push(a));for(i=c.length-1;i>=0;i--)for(o=c[i][1],r=c[i][0],n=0,h=r.length;h>n;n++)l=t(r[n]),l.data(this.widgetName+"-item",o),u.push({item:l,instance:o,width:0,height:0,left:0,top:0})},refreshPositions:function(e){this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var i,n,s,a;for(i=this.items.length-1;i>=0;i--)n=this.items[i],n.instance!==this.currentContainer&&this.currentContainer&&n.item[0]!==this.currentItem[0]||(s=this.options.toleranceElement?t(this.options.toleranceElement,n.item):n.item,e||(n.width=s.outerWidth(),n.height=s.outerHeight()),a=s.offset(),n.left=a.left,n.top=a.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)a=this.containers[i].element.offset(),this.containers[i].containerCache.left=a.left,this.containers[i].containerCache.top=a.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(e){e=e||this;var i,n=e.options;n.placeholder&&n.placeholder.constructor!==String||(i=n.placeholder,n.placeholder={element:function(){var n=e.currentItem[0].nodeName.toLowerCase(),s=t("<"+n+">",e.document[0]).addClass(i||e.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper");return"tr"===n?e.currentItem.children().each(function(){t("<td>&#160;</td>",e.document[0]).attr("colspan",t(this).attr("colspan")||1).appendTo(s)}):"img"===n&&s.attr("src",e.currentItem.attr("src")),i||s.css("visibility","hidden"),s},update:function(t,s){(!i||n.forcePlaceholderSize)&&(s.height()||s.height(e.currentItem.innerHeight()-parseInt(e.currentItem.css("paddingTop")||0,10)-parseInt(e.currentItem.css("paddingBottom")||0,10)),s.width()||s.width(e.currentItem.innerWidth()-parseInt(e.currentItem.css("paddingLeft")||0,10)-parseInt(e.currentItem.css("paddingRight")||0,10)))}}),e.placeholder=t(n.placeholder.element.call(e.element,e.currentItem)),e.currentItem.after(e.placeholder),n.placeholder.update(e,e.placeholder)},_contactContainers:function(n){var s,a,o,r,l,h,u,c,d,p,f=null,m=null;for(s=this.containers.length-1;s>=0;s--)if(!t.contains(this.currentItem[0],this.containers[s].element[0]))if(this._intersectsWith(this.containers[s].containerCache)){if(f&&t.contains(this.containers[s].element[0],f.element[0]))continue;f=this.containers[s],m=s}else this.containers[s].containerCache.over&&(this.containers[s]._trigger("out",n,this._uiHash(this)),this.containers[s].containerCache.over=0);if(f)if(1===this.containers.length)this.containers[m].containerCache.over||(this.containers[m]._trigger("over",n,this._uiHash(this)),this.containers[m].containerCache.over=1);else{for(o=1e4,r=null,p=f.floating||i(this.currentItem),l=p?"left":"top",h=p?"width":"height",u=this.positionAbs[l]+this.offset.click[l],a=this.items.length-1;a>=0;a--)t.contains(this.containers[m].element[0],this.items[a].item[0])&&this.items[a].item[0]!==this.currentItem[0]&&(!p||e(this.positionAbs.top+this.offset.click.top,this.items[a].top,this.items[a].height))&&(c=this.items[a].item.offset()[l],d=!1,Math.abs(c-u)>Math.abs(c+this.items[a][h]-u)&&(d=!0,c+=this.items[a][h]),o>Math.abs(c-u)&&(o=Math.abs(c-u),r=this.items[a],this.direction=d?"up":"down"));if(!r&&!this.options.dropOnEmpty)return;
if(this.currentContainer===this.containers[m])return;r?this._rearrange(n,r,null,!0):this._rearrange(n,null,this.containers[m].element,!0),this._trigger("change",n,this._uiHash()),this.containers[m]._trigger("change",n,this._uiHash(this)),this.currentContainer=this.containers[m],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[m]._trigger("over",n,this._uiHash(this)),this.containers[m].containerCache.over=1}},_createHelper:function(e){var i=this.options,n=t.isFunction(i.helper)?t(i.helper.apply(this.element[0],[e,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return n.parents("body").length||t("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(n[0]),n[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(!n[0].style.width||i.forceHelperSize)&&n.width(this.currentItem.width()),(!n[0].style.height||i.forceHelperSize)&&n.height(this.currentItem.height()),n},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===document.body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&t.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var t=this.currentItem.position();return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:t.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,n,s=this.options;"parent"===s.containment&&(s.containment=this.helper[0].parentNode),("document"===s.containment||"window"===s.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,t("document"===s.containment?document:window).width()-this.helperProportions.width-this.margins.left,(t("document"===s.containment?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(s.containment)||(e=t(s.containment)[0],i=t(s.containment).offset(),n="hidden"!==t(e).css("overflow"),this.containment=[i.left+(parseInt(t(e).css("borderLeftWidth"),10)||0)+(parseInt(t(e).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(t(e).css("borderTopWidth"),10)||0)+(parseInt(t(e).css("paddingTop"),10)||0)-this.margins.top,i.left+(n?Math.max(e.scrollWidth,e.offsetWidth):e.offsetWidth)-(parseInt(t(e).css("borderLeftWidth"),10)||0)-(parseInt(t(e).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(n?Math.max(e.scrollHeight,e.offsetHeight):e.offsetHeight)-(parseInt(t(e).css("borderTopWidth"),10)||0)-(parseInt(t(e).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(e,i){i||(i=this.position);var n="absolute"===e?1:-1,s="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,a=/(html|body)/i.test(s[0].tagName);return{top:i.top+this.offset.relative.top*n+this.offset.parent.top*n-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():a?0:s.scrollTop())*n,left:i.left+this.offset.relative.left*n+this.offset.parent.left*n-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():a?0:s.scrollLeft())*n}},_generatePosition:function(e){var i,n,s=this.options,a=e.pageX,o=e.pageY,r="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,l=/(html|body)/i.test(r[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==document&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(e.pageX-this.offset.click.left<this.containment[0]&&(a=this.containment[0]+this.offset.click.left),e.pageY-this.offset.click.top<this.containment[1]&&(o=this.containment[1]+this.offset.click.top),e.pageX-this.offset.click.left>this.containment[2]&&(a=this.containment[2]+this.offset.click.left),e.pageY-this.offset.click.top>this.containment[3]&&(o=this.containment[3]+this.offset.click.top)),s.grid&&(i=this.originalPageY+Math.round((o-this.originalPageY)/s.grid[1])*s.grid[1],o=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-s.grid[1]:i+s.grid[1]:i,n=this.originalPageX+Math.round((a-this.originalPageX)/s.grid[0])*s.grid[0],a=this.containment?n-this.offset.click.left>=this.containment[0]&&n-this.offset.click.left<=this.containment[2]?n:n-this.offset.click.left>=this.containment[0]?n-s.grid[0]:n+s.grid[0]:n)),{top:o-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():l?0:r.scrollTop()),left:a-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():l?0:r.scrollLeft())}},_rearrange:function(t,e,i,n){i?i[0].appendChild(this.placeholder[0]):e.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?e.item[0]:e.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var s=this.counter;this._delay(function(){s===this.counter&&this.refreshPositions(!n)})},_clear:function(t,e){function i(t,e,i){return function(n){i._trigger(t,n,e._uiHash(e))}}this.reverting=!1;var n,s=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(n in this._storedCSS)("auto"===this._storedCSS[n]||"static"===this._storedCSS[n])&&(this._storedCSS[n]="");this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!e&&s.push(function(t){this._trigger("receive",t,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||e||s.push(function(t){this._trigger("update",t,this._uiHash())}),this!==this.currentContainer&&(e||(s.push(function(t){this._trigger("remove",t,this._uiHash())}),s.push(function(t){return function(e){t._trigger("receive",e,this._uiHash(this))}}.call(this,this.currentContainer)),s.push(function(t){return function(e){t._trigger("update",e,this._uiHash(this))}}.call(this,this.currentContainer)))),n=this.containers.length-1;n>=0;n--)e||s.push(i("deactivate",this,this.containers[n])),this.containers[n].containerCache.over&&(s.push(i("out",this,this.containers[n])),this.containers[n].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,this.cancelHelperRemoval){if(!e){for(this._trigger("beforeStop",t,this._uiHash()),n=0;s.length>n;n++)s[n].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!1}if(e||this._trigger("beforeStop",t,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null,!e){for(n=0;s.length>n;n++)s[n].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!0},_trigger:function(){t.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(e){var i=e||this;return{helper:i.helper,placeholder:i.placeholder||t([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:e?e.element:null}}})}(jQuery),function(t){function e(t){return function(){var e=this.element.val();t.apply(this,arguments),this._refresh(),e!==this.element.val()&&this._trigger("change")}}t.widget("ui.spinner",{version:"1.10.4",defaultElement:"<input>",widgetEventPrefix:"spin",options:{culture:null,icons:{down:"ui-icon-triangle-1-s",up:"ui-icon-triangle-1-n"},incremental:!0,max:null,min:null,numberFormat:null,page:10,step:1,change:null,spin:null,start:null,stop:null},_create:function(){this._setOption("max",this.options.max),this._setOption("min",this.options.min),this._setOption("step",this.options.step),""!==this.value()&&this._value(this.element.val(),!0),this._draw(),this._on(this._events),this._refresh(),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_getCreateOptions:function(){var e={},i=this.element;return t.each(["min","max","step"],function(t,n){var s=i.attr(n);void 0!==s&&s.length&&(e[n]=s)}),e},_events:{keydown:function(t){this._start(t)&&this._keydown(t)&&t.preventDefault()},keyup:"_stop",focus:function(){this.previous=this.element.val()},blur:function(t){return this.cancelBlur?void delete this.cancelBlur:(this._stop(),this._refresh(),void(this.previous!==this.element.val()&&this._trigger("change",t)))},mousewheel:function(t,e){if(e){if(!this.spinning&&!this._start(t))return!1;this._spin((e>0?1:-1)*this.options.step,t),clearTimeout(this.mousewheelTimer),this.mousewheelTimer=this._delay(function(){this.spinning&&this._stop(t)},100),t.preventDefault()}},"mousedown .ui-spinner-button":function(e){function i(){var t=this.element[0]===this.document[0].activeElement;t||(this.element.focus(),this.previous=n,this._delay(function(){this.previous=n}))}var n;n=this.element[0]===this.document[0].activeElement?this.previous:this.element.val(),e.preventDefault(),i.call(this),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur,i.call(this)}),this._start(e)!==!1&&this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e)},"mouseup .ui-spinner-button":"_stop","mouseenter .ui-spinner-button":function(e){return t(e.currentTarget).hasClass("ui-state-active")?this._start(e)===!1?!1:void this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e):void 0},"mouseleave .ui-spinner-button":"_stop"},_draw:function(){var t=this.uiSpinner=this.element.addClass("ui-spinner-input").attr("autocomplete","off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());this.element.attr("role","spinbutton"),this.buttons=t.find(".ui-spinner-button").attr("tabIndex",-1).button().removeClass("ui-corner-all"),this.buttons.height()>Math.ceil(.5*t.height())&&t.height()>0&&t.height(t.height()),this.options.disabled&&this.disable()},_keydown:function(e){var i=this.options,n=t.ui.keyCode;switch(e.keyCode){case n.UP:return this._repeat(null,1,e),!0;case n.DOWN:return this._repeat(null,-1,e),!0;case n.PAGE_UP:return this._repeat(null,i.page,e),!0;case n.PAGE_DOWN:return this._repeat(null,-i.page,e),!0}return!1},_uiSpinnerHtml:function(){return"<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>"},_buttonHtml:function(){return"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'><span class='ui-icon "+this.options.icons.up+"'>&#9650;</span></a><a class='ui-spinner-button ui-spinner-down ui-corner-br'><span class='ui-icon "+this.options.icons.down+"'>&#9660;</span></a>"},_start:function(t){return this.spinning||this._trigger("start",t)!==!1?(this.counter||(this.counter=1),this.spinning=!0,!0):!1},_repeat:function(t,e,i){t=t||500,clearTimeout(this.timer),this.timer=this._delay(function(){this._repeat(40,e,i)},t),this._spin(e*this.options.step,i)},_spin:function(t,e){var i=this.value()||0;this.counter||(this.counter=1),i=this._adjustValue(i+t*this._increment(this.counter)),this.spinning&&this._trigger("spin",e,{value:i})===!1||(this._value(i),this.counter++)},_increment:function(e){var i=this.options.incremental;return i?t.isFunction(i)?i(e):Math.floor(e*e*e/5e4-e*e/500+17*e/200+1):1},_precision:function(){var t=this._precisionOf(this.options.step);return null!==this.options.min&&(t=Math.max(t,this._precisionOf(this.options.min))),t},_precisionOf:function(t){var e=""+t,i=e.indexOf(".");return-1===i?0:e.length-i-1},_adjustValue:function(t){var e,i,n=this.options;return e=null!==n.min?n.min:0,i=t-e,i=Math.round(i/n.step)*n.step,t=e+i,t=parseFloat(t.toFixed(this._precision())),null!==n.max&&t>n.max?n.max:null!==n.min&&n.min>t?n.min:t},_stop:function(t){this.spinning&&(clearTimeout(this.timer),clearTimeout(this.mousewheelTimer),this.counter=0,this.spinning=!1,this._trigger("stop",t))},_setOption:function(t,e){if("culture"===t||"numberFormat"===t){var i=this._parse(this.element.val());return this.options[t]=e,void this.element.val(this._format(i))}("max"===t||"min"===t||"step"===t)&&"string"==typeof e&&(e=this._parse(e)),"icons"===t&&(this.buttons.first().find(".ui-icon").removeClass(this.options.icons.up).addClass(e.up),this.buttons.last().find(".ui-icon").removeClass(this.options.icons.down).addClass(e.down)),this._super(t,e),"disabled"===t&&(e?(this.element.prop("disabled",!0),this.buttons.button("disable")):(this.element.prop("disabled",!1),this.buttons.button("enable")))},_setOptions:e(function(t){this._super(t),this._value(this.element.val())}),_parse:function(t){return"string"==typeof t&&""!==t&&(t=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(t,10,this.options.culture):+t),""===t||isNaN(t)?null:t},_format:function(t){return""===t?"":window.Globalize&&this.options.numberFormat?Globalize.format(t,this.options.numberFormat,this.options.culture):t},_refresh:function(){this.element.attr({"aria-valuemin":this.options.min,"aria-valuemax":this.options.max,"aria-valuenow":this._parse(this.element.val())})},_value:function(t,e){var i;""!==t&&(i=this._parse(t),null!==i&&(e||(i=this._adjustValue(i)),t=this._format(i))),this.element.val(t),this._refresh()},_destroy:function(){this.element.removeClass("ui-spinner-input").prop("disabled",!1).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"),this.uiSpinner.replaceWith(this.element)},stepUp:e(function(t){this._stepUp(t)}),_stepUp:function(t){this._start()&&(this._spin((t||1)*this.options.step),this._stop())},stepDown:e(function(t){this._stepDown(t)}),_stepDown:function(t){this._start()&&(this._spin((t||1)*-this.options.step),this._stop())},pageUp:e(function(t){this._stepUp((t||1)*this.options.page)}),pageDown:e(function(t){this._stepDown((t||1)*this.options.page)}),value:function(t){return arguments.length?void e(this._value).call(this,t):this._parse(this.element.val())},widget:function(){return this.uiSpinner}})}(jQuery),function(t,e){function i(){return++s}function n(t){return t=t.cloneNode(!1),t.hash.length>1&&decodeURIComponent(t.href.replace(a,""))===decodeURIComponent(location.href.replace(a,""))}var s=0,a=/#.*$/;t.widget("ui.tabs",{version:"1.10.4",delay:300,options:{active:null,collapsible:!1,event:"click",heightStyle:"content",hide:null,show:null,activate:null,beforeActivate:null,beforeLoad:null,load:null},_create:function(){var e=this,i=this.options;this.running=!1,this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible",i.collapsible).delegate(".ui-tabs-nav > li","mousedown"+this.eventNamespace,function(e){t(this).is(".ui-state-disabled")&&e.preventDefault()}).delegate(".ui-tabs-anchor","focus"+this.eventNamespace,function(){t(this).closest("li").is(".ui-state-disabled")&&this.blur()}),this._processTabs(),i.active=this._initialActive(),t.isArray(i.disabled)&&(i.disabled=t.unique(i.disabled.concat(t.map(this.tabs.filter(".ui-state-disabled"),function(t){return e.tabs.index(t)}))).sort()),this.active=this.options.active!==!1&&this.anchors.length?this._findActive(i.active):t(),this._refresh(),this.active.length&&this.load(i.active)},_initialActive:function(){var i=this.options.active,n=this.options.collapsible,s=location.hash.substring(1);return null===i&&(s&&this.tabs.each(function(n,a){return t(a).attr("aria-controls")===s?(i=n,!1):e}),null===i&&(i=this.tabs.index(this.tabs.filter(".ui-tabs-active"))),(null===i||-1===i)&&(i=this.tabs.length?0:!1)),i!==!1&&(i=this.tabs.index(this.tabs.eq(i)),-1===i&&(i=n?!1:0)),!n&&i===!1&&this.anchors.length&&(i=0),i},_getCreateEventData:function(){return{tab:this.active,panel:this.active.length?this._getPanelForTab(this.active):t()}},_tabKeydown:function(i){var n=t(this.document[0].activeElement).closest("li"),s=this.tabs.index(n),a=!0;if(!this._handlePageNav(i)){switch(i.keyCode){case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:s++;break;case t.ui.keyCode.UP:case t.ui.keyCode.LEFT:a=!1,s--;break;case t.ui.keyCode.END:s=this.anchors.length-1;break;case t.ui.keyCode.HOME:s=0;break;case t.ui.keyCode.SPACE:return i.preventDefault(),clearTimeout(this.activating),this._activate(s),e;case t.ui.keyCode.ENTER:return i.preventDefault(),clearTimeout(this.activating),this._activate(s===this.options.active?!1:s),e;default:return}i.preventDefault(),clearTimeout(this.activating),s=this._focusNextTab(s,a),i.ctrlKey||(n.attr("aria-selected","false"),this.tabs.eq(s).attr("aria-selected","true"),this.activating=this._delay(function(){this.option("active",s)},this.delay))}},_panelKeydown:function(e){this._handlePageNav(e)||e.ctrlKey&&e.keyCode===t.ui.keyCode.UP&&(e.preventDefault(),this.active.focus())},_handlePageNav:function(i){return i.altKey&&i.keyCode===t.ui.keyCode.PAGE_UP?(this._activate(this._focusNextTab(this.options.active-1,!1)),!0):i.altKey&&i.keyCode===t.ui.keyCode.PAGE_DOWN?(this._activate(this._focusNextTab(this.options.active+1,!0)),!0):e},_findNextTab:function(e,i){function n(){return e>s&&(e=0),0>e&&(e=s),e}for(var s=this.tabs.length-1;-1!==t.inArray(n(),this.options.disabled);)e=i?e+1:e-1;return e},_focusNextTab:function(t,e){return t=this._findNextTab(t,e),this.tabs.eq(t).focus(),t},_setOption:function(t,i){return"active"===t?(this._activate(i),e):"disabled"===t?(this._setupDisabled(i),e):(this._super(t,i),"collapsible"===t&&(this.element.toggleClass("ui-tabs-collapsible",i),i||this.options.active!==!1||this._activate(0)),"event"===t&&this._setupEvents(i),"heightStyle"===t&&this._setupHeightStyle(i),e)},_tabId:function(t){return t.attr("aria-controls")||"ui-tabs-"+i()},_sanitizeSelector:function(t){return t?t.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):""},refresh:function(){var e=this.options,i=this.tablist.children(":has(a[href])");e.disabled=t.map(i.filter(".ui-state-disabled"),function(t){return i.index(t)}),this._processTabs(),e.active!==!1&&this.anchors.length?this.active.length&&!t.contains(this.tablist[0],this.active[0])?this.tabs.length===e.disabled.length?(e.active=!1,this.active=t()):this._activate(this._findNextTab(Math.max(0,e.active-1),!1)):e.active=this.tabs.index(this.active):(e.active=!1,this.active=t()),this._refresh()},_refresh:function(){this._setupDisabled(this.options.disabled),this._setupEvents(this.options.event),this._setupHeightStyle(this.options.heightStyle),this.tabs.not(this.active).attr({"aria-selected":"false",tabIndex:-1}),this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-expanded":"false","aria-hidden":"true"}),this.active.length?(this.active.addClass("ui-tabs-active ui-state-active").attr({"aria-selected":"true",tabIndex:0}),this._getPanelForTab(this.active).show().attr({"aria-expanded":"true","aria-hidden":"false"})):this.tabs.eq(0).attr("tabIndex",0)},_processTabs:function(){var e=this;this.tablist=this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role","tablist"),this.tabs=this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({role:"tab",tabIndex:-1}),this.anchors=this.tabs.map(function(){return t("a",this)[0]}).addClass("ui-tabs-anchor").attr({role:"presentation",tabIndex:-1}),this.panels=t(),this.anchors.each(function(i,s){var a,o,r,l=t(s).uniqueId().attr("id"),h=t(s).closest("li"),u=h.attr("aria-controls");n(s)?(a=s.hash,o=e.element.find(e._sanitizeSelector(a))):(r=e._tabId(h),a="#"+r,o=e.element.find(a),o.length||(o=e._createPanel(r),o.insertAfter(e.panels[i-1]||e.tablist)),o.attr("aria-live","polite")),o.length&&(e.panels=e.panels.add(o)),u&&h.data("ui-tabs-aria-controls",u),h.attr({"aria-controls":a.substring(1),"aria-labelledby":l}),o.attr("aria-labelledby",l)}),this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role","tabpanel")},_getList:function(){return this.tablist||this.element.find("ol,ul").eq(0)},_createPanel:function(e){return t("<div>").attr("id",e).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy",!0)},_setupDisabled:function(e){t.isArray(e)&&(e.length?e.length===this.anchors.length&&(e=!0):e=!1);for(var i,n=0;i=this.tabs[n];n++)e===!0||-1!==t.inArray(n,e)?t(i).addClass("ui-state-disabled").attr("aria-disabled","true"):t(i).removeClass("ui-state-disabled").removeAttr("aria-disabled");this.options.disabled=e},_setupEvents:function(e){var i={click:function(t){t.preventDefault()}};e&&t.each(e.split(" "),function(t,e){i[e]="_eventHandler"}),this._off(this.anchors.add(this.tabs).add(this.panels)),this._on(this.anchors,i),this._on(this.tabs,{keydown:"_tabKeydown"}),this._on(this.panels,{keydown:"_panelKeydown"}),this._focusable(this.tabs),this._hoverable(this.tabs)},_setupHeightStyle:function(e){var i,n=this.element.parent();"fill"===e?(i=n.height(),i-=this.element.outerHeight()-this.element.height(),this.element.siblings(":visible").each(function(){var e=t(this),n=e.css("position");"absolute"!==n&&"fixed"!==n&&(i-=e.outerHeight(!0))}),this.element.children().not(this.panels).each(function(){i-=t(this).outerHeight(!0)}),this.panels.each(function(){t(this).height(Math.max(0,i-t(this).innerHeight()+t(this).height()))}).css("overflow","auto")):"auto"===e&&(i=0,this.panels.each(function(){i=Math.max(i,t(this).height("").height())}).height(i))},_eventHandler:function(e){var i=this.options,n=this.active,s=t(e.currentTarget),a=s.closest("li"),o=a[0]===n[0],r=o&&i.collapsible,l=r?t():this._getPanelForTab(a),h=n.length?this._getPanelForTab(n):t(),u={oldTab:n,oldPanel:h,newTab:r?t():a,newPanel:l};e.preventDefault(),a.hasClass("ui-state-disabled")||a.hasClass("ui-tabs-loading")||this.running||o&&!i.collapsible||this._trigger("beforeActivate",e,u)===!1||(i.active=r?!1:this.tabs.index(a),this.active=o?t():a,this.xhr&&this.xhr.abort(),h.length||l.length||t.error("jQuery UI Tabs: Mismatching fragment identifier."),l.length&&this.load(this.tabs.index(a),e),this._toggle(e,u))},_toggle:function(e,i){function n(){a.running=!1,a._trigger("activate",e,i)}function s(){i.newTab.closest("li").addClass("ui-tabs-active ui-state-active"),o.length&&a.options.show?a._show(o,a.options.show,n):(o.show(),n())}var a=this,o=i.newPanel,r=i.oldPanel;this.running=!0,r.length&&this.options.hide?this._hide(r,this.options.hide,function(){i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),s()}):(i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),r.hide(),s()),r.attr({"aria-expanded":"false","aria-hidden":"true"}),i.oldTab.attr("aria-selected","false"),o.length&&r.length?i.oldTab.attr("tabIndex",-1):o.length&&this.tabs.filter(function(){return 0===t(this).attr("tabIndex")}).attr("tabIndex",-1),o.attr({"aria-expanded":"true","aria-hidden":"false"}),i.newTab.attr({"aria-selected":"true",tabIndex:0})},_activate:function(e){var i,n=this._findActive(e);n[0]!==this.active[0]&&(n.length||(n=this.active),i=n.find(".ui-tabs-anchor")[0],this._eventHandler({target:i,currentTarget:i,preventDefault:t.noop}))},_findActive:function(e){return e===!1?t():this.tabs.eq(e)},_getIndex:function(t){return"string"==typeof t&&(t=this.anchors.index(this.anchors.filter("[href$='"+t+"']"))),t},_destroy:function(){this.xhr&&this.xhr.abort(),this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible"),this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role"),this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeUniqueId(),this.tabs.add(this.panels).each(function(){t.data(this,"ui-tabs-destroy")?t(this).remove():t(this).removeClass("ui-state-default ui-state-active ui-state-disabled ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role")}),this.tabs.each(function(){var e=t(this),i=e.data("ui-tabs-aria-controls");i?e.attr("aria-controls",i).removeData("ui-tabs-aria-controls"):e.removeAttr("aria-controls")}),this.panels.show(),"content"!==this.options.heightStyle&&this.panels.css("height","")},enable:function(i){var n=this.options.disabled;n!==!1&&(i===e?n=!1:(i=this._getIndex(i),n=t.isArray(n)?t.map(n,function(t){return t!==i?t:null}):t.map(this.tabs,function(t,e){return e!==i?e:null})),this._setupDisabled(n))},disable:function(i){var n=this.options.disabled;if(n!==!0){if(i===e)n=!0;else{if(i=this._getIndex(i),-1!==t.inArray(i,n))return;n=t.isArray(n)?t.merge([i],n).sort():[i]}this._setupDisabled(n)}},load:function(e,i){e=this._getIndex(e);var s=this,a=this.tabs.eq(e),o=a.find(".ui-tabs-anchor"),r=this._getPanelForTab(a),l={tab:a,panel:r};n(o[0])||(this.xhr=t.ajax(this._ajaxSettings(o,i,l)),this.xhr&&"canceled"!==this.xhr.statusText&&(a.addClass("ui-tabs-loading"),r.attr("aria-busy","true"),this.xhr.success(function(t){setTimeout(function(){r.html(t),s._trigger("load",i,l)},1)}).complete(function(t,e){setTimeout(function(){"abort"===e&&s.panels.stop(!1,!0),a.removeClass("ui-tabs-loading"),r.removeAttr("aria-busy"),t===s.xhr&&delete s.xhr},1)})))},_ajaxSettings:function(e,i,n){var s=this;return{url:e.attr("href"),beforeSend:function(e,a){return s._trigger("beforeLoad",i,t.extend({jqXHR:e,ajaxSettings:a},n))}}},_getPanelForTab:function(e){var i=t(e).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+i))}})}(jQuery),function(t){function e(e,i){var n=(e.attr("aria-describedby")||"").split(/\s+/);n.push(i),e.data("ui-tooltip-id",i).attr("aria-describedby",t.trim(n.join(" ")))}function i(e){var i=e.data("ui-tooltip-id"),n=(e.attr("aria-describedby")||"").split(/\s+/),s=t.inArray(i,n);-1!==s&&n.splice(s,1),e.removeData("ui-tooltip-id"),n=t.trim(n.join(" ")),n?e.attr("aria-describedby",n):e.removeAttr("aria-describedby")}var n=0;t.widget("ui.tooltip",{version:"1.10.4",options:{content:function(){var e=t(this).attr("title")||"";return t("<a>").text(e).html()},hide:!0,items:"[title]:not([disabled])",position:{my:"left top+15",at:"left bottom",collision:"flipfit flip"},show:!0,tooltipClass:null,track:!1,close:null,open:null},_create:function(){this._on({mouseover:"open",focusin:"open"}),this.tooltips={},this.parents={},this.options.disabled&&this._disable()},_setOption:function(e,i){var n=this;return"disabled"===e?(this[i?"_disable":"_enable"](),void(this.options[e]=i)):(this._super(e,i),void("content"===e&&t.each(this.tooltips,function(t,e){n._updateContent(e)})))},_disable:function(){var e=this;t.each(this.tooltips,function(i,n){var s=t.Event("blur");s.target=s.currentTarget=n[0],e.close(s,!0)}),this.element.find(this.options.items).addBack().each(function(){var e=t(this);e.is("[title]")&&e.data("ui-tooltip-title",e.attr("title")).attr("title","")})},_enable:function(){this.element.find(this.options.items).addBack().each(function(){var e=t(this);e.data("ui-tooltip-title")&&e.attr("title",e.data("ui-tooltip-title"))})},open:function(e){var i=this,n=t(e?e.target:this.element).closest(this.options.items);n.length&&!n.data("ui-tooltip-id")&&(n.attr("title")&&n.data("ui-tooltip-title",n.attr("title")),n.data("ui-tooltip-open",!0),e&&"mouseover"===e.type&&n.parents().each(function(){var e,n=t(this);n.data("ui-tooltip-open")&&(e=t.Event("blur"),e.target=e.currentTarget=this,i.close(e,!0)),n.attr("title")&&(n.uniqueId(),i.parents[this.id]={element:this,title:n.attr("title")},n.attr("title",""))}),this._updateContent(n,e))},_updateContent:function(t,e){var i,n=this.options.content,s=this,a=e?e.type:null;return"string"==typeof n?this._open(e,t,n):(i=n.call(t[0],function(i){t.data("ui-tooltip-open")&&s._delay(function(){e&&(e.type=a),this._open(e,t,i)})}),void(i&&this._open(e,t,i)))},_open:function(i,n,s){function a(t){h.of=t,o.is(":hidden")||o.position(h)}var o,r,l,h=t.extend({},this.options.position);if(s){if(o=this._find(n),o.length)return void o.find(".ui-tooltip-content").html(s);n.is("[title]")&&(i&&"mouseover"===i.type?n.attr("title",""):n.removeAttr("title")),o=this._tooltip(n),e(n,o.attr("id")),o.find(".ui-tooltip-content").html(s),this.options.track&&i&&/^mouse/.test(i.type)?(this._on(this.document,{mousemove:a}),a(i)):o.position(t.extend({of:n},this.options.position)),o.hide(),this._show(o,this.options.show),this.options.show&&this.options.show.delay&&(l=this.delayedShow=setInterval(function(){o.is(":visible")&&(a(h.of),clearInterval(l))},t.fx.interval)),this._trigger("open",i,{tooltip:o}),r={keyup:function(e){if(e.keyCode===t.ui.keyCode.ESCAPE){var i=t.Event(e);i.currentTarget=n[0],this.close(i,!0)}},remove:function(){this._removeTooltip(o)}},i&&"mouseover"!==i.type||(r.mouseleave="close"),i&&"focusin"!==i.type||(r.focusout="close"),this._on(!0,n,r)}},close:function(e){var n=this,s=t(e?e.currentTarget:this.element),a=this._find(s);this.closing||(clearInterval(this.delayedShow),s.data("ui-tooltip-title")&&s.attr("title",s.data("ui-tooltip-title")),i(s),a.stop(!0),this._hide(a,this.options.hide,function(){n._removeTooltip(t(this))}),s.removeData("ui-tooltip-open"),this._off(s,"mouseleave focusout keyup"),s[0]!==this.element[0]&&this._off(s,"remove"),this._off(this.document,"mousemove"),e&&"mouseleave"===e.type&&t.each(this.parents,function(e,i){t(i.element).attr("title",i.title),delete n.parents[e]}),this.closing=!0,this._trigger("close",e,{tooltip:a}),this.closing=!1)},_tooltip:function(e){var i="ui-tooltip-"+n++,s=t("<div>").attr({id:i,role:"tooltip"}).addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content "+(this.options.tooltipClass||""));return t("<div>").addClass("ui-tooltip-content").appendTo(s),s.appendTo(this.document[0].body),this.tooltips[i]=e,s},_find:function(e){var i=e.data("ui-tooltip-id");return i?t("#"+i):t()},_removeTooltip:function(t){t.remove(),delete this.tooltips[t.attr("id")]},_destroy:function(){var e=this;t.each(this.tooltips,function(i,n){var s=t.Event("blur");s.target=s.currentTarget=n[0],e.close(s,!0),t("#"+i).remove(),n.data("ui-tooltip-title")&&(n.attr("title",n.data("ui-tooltip-title")),n.removeData("ui-tooltip-title"))})}})}(jQuery),define("lib.jquery-ui",function(){}),function(t){"function"==typeof define&&define.amd?define("lib.jquery.cookie",["jquery"],t):t(jQuery)
}(function(t){function e(t){return r.raw?t:encodeURIComponent(t)}function i(t){return r.raw?t:decodeURIComponent(t)}function n(t){return e(r.json?JSON.stringify(t):String(t))}function s(t){0===t.indexOf('"')&&(t=t.slice(1,-1).replace(/\\"/g,'"').replace(/\\\\/g,"\\"));try{return t=decodeURIComponent(t.replace(o," ")),r.json?JSON.parse(t):t}catch(e){}}function a(e,i){var n=r.raw?e:s(e);return t.isFunction(i)?i(n):n}var o=/\+/g,r=t.cookie=function(s,o,l){if(void 0!==o&&!t.isFunction(o)){if(l=t.extend({},r.defaults,l),"number"==typeof l.expires){var h=l.expires,u=l.expires=new Date;u.setTime(+u+864e5*h)}return document.cookie=[e(s),"=",n(o),l.expires?"; expires="+l.expires.toUTCString():"",l.path?"; path="+l.path:"",l.domain?"; domain="+l.domain:"",l.secure?"; secure":""].join("")}for(var c=s?void 0:{},d=document.cookie?document.cookie.split("; "):[],p=0,f=d.length;f>p;p++){var m=d[p].split("="),g=i(m.shift()),v=m.join("=");if(s&&s===g){c=a(v,o);break}s||void 0===(v=a(v))||(c[g]=v)}return c};r.defaults={},t.removeCookie=function(e,i){return void 0===t.cookie(e)?!1:(t.cookie(e,"",t.extend({},i,{expires:-1})),!t.cookie(e))}}),function($){if($.ui.timepicker=$.ui.timepicker||{},!$.ui.timepicker.version){$.extend($.ui,{timepicker:{version:"1.4.3"}});var Timepicker=function(){this.regional=[],this.regional[""]={currentText:"Now",closeText:"Done",amNames:["AM","A"],pmNames:["PM","P"],timeFormat:"HH:mm",timeSuffix:"",timeOnlyTitle:"Choose Time",timeText:"Time",hourText:"Hour",minuteText:"Minute",secondText:"Second",millisecText:"Millisecond",microsecText:"Microsecond",timezoneText:"Time Zone",isRTL:!1},this._defaults={showButtonPanel:!0,timeOnly:!1,showHour:null,showMinute:null,showSecond:null,showMillisec:null,showMicrosec:null,showTimezone:null,showTime:!0,stepHour:1,stepMinute:1,stepSecond:1,stepMillisec:1,stepMicrosec:1,hour:0,minute:0,second:0,millisec:0,microsec:0,timezone:null,hourMin:0,minuteMin:0,secondMin:0,millisecMin:0,microsecMin:0,hourMax:23,minuteMax:59,secondMax:59,millisecMax:999,microsecMax:999,minDateTime:null,maxDateTime:null,onSelect:null,hourGrid:0,minuteGrid:0,secondGrid:0,millisecGrid:0,microsecGrid:0,alwaysSetTime:!0,separator:" ",altFieldTimeOnly:!0,altTimeFormat:null,altSeparator:null,altTimeSuffix:null,pickerTimeFormat:null,pickerTimeSuffix:null,showTimepicker:!0,timezoneList:null,addSliderAccess:!1,sliderAccessArgs:null,controlType:"slider",defaultValue:null,parse:"strict"},$.extend(this._defaults,this.regional[""])};$.extend(Timepicker.prototype,{$input:null,$altInput:null,$timeObj:null,inst:null,hour_slider:null,minute_slider:null,second_slider:null,millisec_slider:null,microsec_slider:null,timezone_select:null,hour:0,minute:0,second:0,millisec:0,microsec:0,timezone:null,hourMinOriginal:null,minuteMinOriginal:null,secondMinOriginal:null,millisecMinOriginal:null,microsecMinOriginal:null,hourMaxOriginal:null,minuteMaxOriginal:null,secondMaxOriginal:null,millisecMaxOriginal:null,microsecMaxOriginal:null,ampm:"",formattedDate:"",formattedTime:"",formattedDateTime:"",timezoneList:null,units:["hour","minute","second","millisec","microsec"],support:{},control:null,setDefaults:function(t){return extendRemove(this._defaults,t||{}),this},_newInst:function($input,opts){var tp_inst=new Timepicker,inlineSettings={},fns={},overrides,i;for(var attrName in this._defaults)if(this._defaults.hasOwnProperty(attrName)){var attrValue=$input.attr("time:"+attrName);if(attrValue)try{inlineSettings[attrName]=eval(attrValue)}catch(err){inlineSettings[attrName]=attrValue}}overrides={beforeShow:function(t,e){return $.isFunction(tp_inst._defaults.evnts.beforeShow)?tp_inst._defaults.evnts.beforeShow.call($input[0],t,e,tp_inst):void 0},onChangeMonthYear:function(t,e,i){tp_inst._updateDateTime(i),$.isFunction(tp_inst._defaults.evnts.onChangeMonthYear)&&tp_inst._defaults.evnts.onChangeMonthYear.call($input[0],t,e,i,tp_inst)},onClose:function(t,e){tp_inst.timeDefined===!0&&""!==$input.val()&&tp_inst._updateDateTime(e),$.isFunction(tp_inst._defaults.evnts.onClose)&&tp_inst._defaults.evnts.onClose.call($input[0],t,e,tp_inst)}};for(i in overrides)overrides.hasOwnProperty(i)&&(fns[i]=opts[i]||null);tp_inst._defaults=$.extend({},this._defaults,inlineSettings,opts,overrides,{evnts:fns,timepicker:tp_inst}),tp_inst.amNames=$.map(tp_inst._defaults.amNames,function(t){return t.toUpperCase()}),tp_inst.pmNames=$.map(tp_inst._defaults.pmNames,function(t){return t.toUpperCase()}),tp_inst.support=detectSupport(tp_inst._defaults.timeFormat+(tp_inst._defaults.pickerTimeFormat?tp_inst._defaults.pickerTimeFormat:"")+(tp_inst._defaults.altTimeFormat?tp_inst._defaults.altTimeFormat:"")),"string"==typeof tp_inst._defaults.controlType?("slider"===tp_inst._defaults.controlType&&"undefined"==typeof $.ui.slider&&(tp_inst._defaults.controlType="select"),tp_inst.control=tp_inst._controls[tp_inst._defaults.controlType]):tp_inst.control=tp_inst._defaults.controlType;var timezoneList=[-720,-660,-600,-570,-540,-480,-420,-360,-300,-270,-240,-210,-180,-120,-60,0,60,120,180,210,240,270,300,330,345,360,390,420,480,525,540,570,600,630,660,690,720,765,780,840];null!==tp_inst._defaults.timezoneList&&(timezoneList=tp_inst._defaults.timezoneList);var tzl=timezoneList.length,tzi=0,tzv=null;if(tzl>0&&"object"!=typeof timezoneList[0])for(;tzl>tzi;tzi++)tzv=timezoneList[tzi],timezoneList[tzi]={value:tzv,label:$.timepicker.timezoneOffsetString(tzv,tp_inst.support.iso8601)};return tp_inst._defaults.timezoneList=timezoneList,tp_inst.timezone=null!==tp_inst._defaults.timezone?$.timepicker.timezoneOffsetNumber(tp_inst._defaults.timezone):-1*(new Date).getTimezoneOffset(),tp_inst.hour=tp_inst._defaults.hour<tp_inst._defaults.hourMin?tp_inst._defaults.hourMin:tp_inst._defaults.hour>tp_inst._defaults.hourMax?tp_inst._defaults.hourMax:tp_inst._defaults.hour,tp_inst.minute=tp_inst._defaults.minute<tp_inst._defaults.minuteMin?tp_inst._defaults.minuteMin:tp_inst._defaults.minute>tp_inst._defaults.minuteMax?tp_inst._defaults.minuteMax:tp_inst._defaults.minute,tp_inst.second=tp_inst._defaults.second<tp_inst._defaults.secondMin?tp_inst._defaults.secondMin:tp_inst._defaults.second>tp_inst._defaults.secondMax?tp_inst._defaults.secondMax:tp_inst._defaults.second,tp_inst.millisec=tp_inst._defaults.millisec<tp_inst._defaults.millisecMin?tp_inst._defaults.millisecMin:tp_inst._defaults.millisec>tp_inst._defaults.millisecMax?tp_inst._defaults.millisecMax:tp_inst._defaults.millisec,tp_inst.microsec=tp_inst._defaults.microsec<tp_inst._defaults.microsecMin?tp_inst._defaults.microsecMin:tp_inst._defaults.microsec>tp_inst._defaults.microsecMax?tp_inst._defaults.microsecMax:tp_inst._defaults.microsec,tp_inst.ampm="",tp_inst.$input=$input,tp_inst._defaults.altField&&(tp_inst.$altInput=$(tp_inst._defaults.altField).css({cursor:"pointer"}).focus(function(){$input.trigger("focus")})),(0===tp_inst._defaults.minDate||0===tp_inst._defaults.minDateTime)&&(tp_inst._defaults.minDate=new Date),(0===tp_inst._defaults.maxDate||0===tp_inst._defaults.maxDateTime)&&(tp_inst._defaults.maxDate=new Date),void 0!==tp_inst._defaults.minDate&&tp_inst._defaults.minDate instanceof Date&&(tp_inst._defaults.minDateTime=new Date(tp_inst._defaults.minDate.getTime())),void 0!==tp_inst._defaults.minDateTime&&tp_inst._defaults.minDateTime instanceof Date&&(tp_inst._defaults.minDate=new Date(tp_inst._defaults.minDateTime.getTime())),void 0!==tp_inst._defaults.maxDate&&tp_inst._defaults.maxDate instanceof Date&&(tp_inst._defaults.maxDateTime=new Date(tp_inst._defaults.maxDate.getTime())),void 0!==tp_inst._defaults.maxDateTime&&tp_inst._defaults.maxDateTime instanceof Date&&(tp_inst._defaults.maxDate=new Date(tp_inst._defaults.maxDateTime.getTime())),tp_inst.$input.bind("focus",function(){tp_inst._onFocus()}),tp_inst},_addTimePicker:function(t){var e=this.$altInput&&this._defaults.altFieldTimeOnly?this.$input.val()+" "+this.$altInput.val():this.$input.val();this.timeDefined=this._parseTime(e),this._limitMinMaxDateTime(t,!1),this._injectTimePicker()},_parseTime:function(t,e){if(this.inst||(this.inst=$.datepicker._getInst(this.$input[0])),e||!this._defaults.timeOnly){var i=$.datepicker._get(this.inst,"dateFormat");try{var n=parseDateTimeInternal(i,this._defaults.timeFormat,t,$.datepicker._getFormatConfig(this.inst),this._defaults);if(!n.timeObj)return!1;$.extend(this,n.timeObj)}catch(s){return $.timepicker.log("Error parsing the date/time string: "+s+"\ndate/time string = "+t+"\ntimeFormat = "+this._defaults.timeFormat+"\ndateFormat = "+i),!1}return!0}var a=$.datepicker.parseTime(this._defaults.timeFormat,t,this._defaults);return a?($.extend(this,a),!0):!1},_injectTimePicker:function(){var t=this.inst.dpDiv,e=this.inst.settings,i=this,n="",s="",a=null,o={},r={},l=null,h=0,u=0;if(0===t.find("div.ui-timepicker-div").length&&e.showTimepicker){var c=' style="display:none;"',d='<div class="ui-timepicker-div'+(e.isRTL?" ui-timepicker-rtl":"")+'"><dl><dt class="ui_tpicker_time_label"'+(e.showTime?"":c)+">"+e.timeText+'</dt><dd class="ui_tpicker_time"'+(e.showTime?"":c)+"></dd>";for(h=0,u=this.units.length;u>h;h++){if(n=this.units[h],s=n.substr(0,1).toUpperCase()+n.substr(1),a=null!==e["show"+s]?e["show"+s]:this.support[n],o[n]=parseInt(e[n+"Max"]-(e[n+"Max"]-e[n+"Min"])%e["step"+s],10),r[n]=0,d+='<dt class="ui_tpicker_'+n+'_label"'+(a?"":c)+">"+e[n+"Text"]+'</dt><dd class="ui_tpicker_'+n+'"><div class="ui_tpicker_'+n+'_slider"'+(a?"":c)+"></div>",a&&e[n+"Grid"]>0){if(d+='<div style="padding-left: 1px"><table class="ui-tpicker-grid-label"><tr>',"hour"===n)for(var p=e[n+"Min"];p<=o[n];p+=parseInt(e[n+"Grid"],10)){r[n]++;var f=$.datepicker.formatTime(this.support.ampm?"hht":"HH",{hour:p},e);d+='<td data-for="'+n+'">'+f+"</td>"}else for(var m=e[n+"Min"];m<=o[n];m+=parseInt(e[n+"Grid"],10))r[n]++,d+='<td data-for="'+n+'">'+(10>m?"0":"")+m+"</td>";d+="</tr></table></div>"}d+="</dd>"}var g=null!==e.showTimezone?e.showTimezone:this.support.timezone;d+='<dt class="ui_tpicker_timezone_label"'+(g?"":c)+">"+e.timezoneText+"</dt>",d+='<dd class="ui_tpicker_timezone" '+(g?"":c)+"></dd>",d+="</dl></div>";var v=$(d);for(e.timeOnly===!0&&(v.prepend('<div class="ui-widget-header ui-helper-clearfix ui-corner-all"><div class="ui-datepicker-title">'+e.timeOnlyTitle+"</div></div>"),t.find(".ui-datepicker-header, .ui-datepicker-calendar").hide()),h=0,u=i.units.length;u>h;h++)n=i.units[h],s=n.substr(0,1).toUpperCase()+n.substr(1),a=null!==e["show"+s]?e["show"+s]:this.support[n],i[n+"_slider"]=i.control.create(i,v.find(".ui_tpicker_"+n+"_slider"),n,i[n],e[n+"Min"],o[n],e["step"+s]),a&&e[n+"Grid"]>0&&(l=100*r[n]*e[n+"Grid"]/(o[n]-e[n+"Min"]),v.find(".ui_tpicker_"+n+" table").css({width:l+"%",marginLeft:e.isRTL?"0":l/(-2*r[n])+"%",marginRight:e.isRTL?l/(-2*r[n])+"%":"0",borderCollapse:"collapse"}).find("td").click(function(){var t=$(this),e=t.html(),s=parseInt(e.replace(/[^0-9]/g),10),a=e.replace(/[^apm]/gi),o=t.data("for");"hour"===o&&(-1!==a.indexOf("p")&&12>s?s+=12:-1!==a.indexOf("a")&&12===s&&(s=0)),i.control.value(i,i[o+"_slider"],n,s),i._onTimeChange(),i._onSelectHandler()}).css({cursor:"pointer",width:100/r[n]+"%",textAlign:"center",overflow:"hidden"}));if(this.timezone_select=v.find(".ui_tpicker_timezone").append("<select></select>").find("select"),$.fn.append.apply(this.timezone_select,$.map(e.timezoneList,function(t){return $("<option />").val("object"==typeof t?t.value:t).text("object"==typeof t?t.label:t)})),"undefined"!=typeof this.timezone&&null!==this.timezone&&""!==this.timezone){var _=-1*new Date(this.inst.selectedYear,this.inst.selectedMonth,this.inst.selectedDay,12).getTimezoneOffset();_===this.timezone?selectLocalTimezone(i):this.timezone_select.val(this.timezone)}else"undefined"!=typeof this.hour&&null!==this.hour&&""!==this.hour?this.timezone_select.val(e.timezone):selectLocalTimezone(i);this.timezone_select.change(function(){i._onTimeChange(),i._onSelectHandler()});var b=t.find(".ui-datepicker-buttonpane");if(b.length?b.before(v):t.append(v),this.$timeObj=v.find(".ui_tpicker_time"),null!==this.inst){var y=this.timeDefined;this._onTimeChange(),this.timeDefined=y}if(this._defaults.addSliderAccess){var x=this._defaults.sliderAccessArgs,w=this._defaults.isRTL;x.isRTL=w,setTimeout(function(){if(0===v.find(".ui-slider-access").length){v.find(".ui-slider:visible").sliderAccess(x);var t=v.find(".ui-slider-access:eq(0)").outerWidth(!0);t&&v.find("table:visible").each(function(){var e=$(this),i=e.outerWidth(),n=e.css(w?"marginRight":"marginLeft").toString().replace("%",""),s=i-t,a=n*s/i+"%",o={width:s,marginRight:0,marginLeft:0};o[w?"marginRight":"marginLeft"]=a,e.css(o)})}},10)}i._limitMinMaxDateTime(this.inst,!0)}},_limitMinMaxDateTime:function(t,e){var i=this._defaults,n=new Date(t.selectedYear,t.selectedMonth,t.selectedDay);if(this._defaults.showTimepicker){if(null!==$.datepicker._get(t,"minDateTime")&&void 0!==$.datepicker._get(t,"minDateTime")&&n){var s=$.datepicker._get(t,"minDateTime"),a=new Date(s.getFullYear(),s.getMonth(),s.getDate(),0,0,0,0);(null===this.hourMinOriginal||null===this.minuteMinOriginal||null===this.secondMinOriginal||null===this.millisecMinOriginal||null===this.microsecMinOriginal)&&(this.hourMinOriginal=i.hourMin,this.minuteMinOriginal=i.minuteMin,this.secondMinOriginal=i.secondMin,this.millisecMinOriginal=i.millisecMin,this.microsecMinOriginal=i.microsecMin),t.settings.timeOnly||a.getTime()===n.getTime()?(this._defaults.hourMin=s.getHours(),this.hour<=this._defaults.hourMin?(this.hour=this._defaults.hourMin,this._defaults.minuteMin=s.getMinutes(),this.minute<=this._defaults.minuteMin?(this.minute=this._defaults.minuteMin,this._defaults.secondMin=s.getSeconds(),this.second<=this._defaults.secondMin?(this.second=this._defaults.secondMin,this._defaults.millisecMin=s.getMilliseconds(),this.millisec<=this._defaults.millisecMin?(this.millisec=this._defaults.millisecMin,this._defaults.microsecMin=s.getMicroseconds()):(this.microsec<this._defaults.microsecMin&&(this.microsec=this._defaults.microsecMin),this._defaults.microsecMin=this.microsecMinOriginal)):(this._defaults.millisecMin=this.millisecMinOriginal,this._defaults.microsecMin=this.microsecMinOriginal)):(this._defaults.secondMin=this.secondMinOriginal,this._defaults.millisecMin=this.millisecMinOriginal,this._defaults.microsecMin=this.microsecMinOriginal)):(this._defaults.minuteMin=this.minuteMinOriginal,this._defaults.secondMin=this.secondMinOriginal,this._defaults.millisecMin=this.millisecMinOriginal,this._defaults.microsecMin=this.microsecMinOriginal)):(this._defaults.hourMin=this.hourMinOriginal,this._defaults.minuteMin=this.minuteMinOriginal,this._defaults.secondMin=this.secondMinOriginal,this._defaults.millisecMin=this.millisecMinOriginal,this._defaults.microsecMin=this.microsecMinOriginal)}if(null!==$.datepicker._get(t,"maxDateTime")&&void 0!==$.datepicker._get(t,"maxDateTime")&&n){var o=$.datepicker._get(t,"maxDateTime"),r=new Date(o.getFullYear(),o.getMonth(),o.getDate(),0,0,0,0);(null===this.hourMaxOriginal||null===this.minuteMaxOriginal||null===this.secondMaxOriginal||null===this.millisecMaxOriginal)&&(this.hourMaxOriginal=i.hourMax,this.minuteMaxOriginal=i.minuteMax,this.secondMaxOriginal=i.secondMax,this.millisecMaxOriginal=i.millisecMax,this.microsecMaxOriginal=i.microsecMax),t.settings.timeOnly||r.getTime()===n.getTime()?(this._defaults.hourMax=o.getHours(),this.hour>=this._defaults.hourMax?(this.hour=this._defaults.hourMax,this._defaults.minuteMax=o.getMinutes(),this.minute>=this._defaults.minuteMax?(this.minute=this._defaults.minuteMax,this._defaults.secondMax=o.getSeconds(),this.second>=this._defaults.secondMax?(this.second=this._defaults.secondMax,this._defaults.millisecMax=o.getMilliseconds(),this.millisec>=this._defaults.millisecMax?(this.millisec=this._defaults.millisecMax,this._defaults.microsecMax=o.getMicroseconds()):(this.microsec>this._defaults.microsecMax&&(this.microsec=this._defaults.microsecMax),this._defaults.microsecMax=this.microsecMaxOriginal)):(this._defaults.millisecMax=this.millisecMaxOriginal,this._defaults.microsecMax=this.microsecMaxOriginal)):(this._defaults.secondMax=this.secondMaxOriginal,this._defaults.millisecMax=this.millisecMaxOriginal,this._defaults.microsecMax=this.microsecMaxOriginal)):(this._defaults.minuteMax=this.minuteMaxOriginal,this._defaults.secondMax=this.secondMaxOriginal,this._defaults.millisecMax=this.millisecMaxOriginal,this._defaults.microsecMax=this.microsecMaxOriginal)):(this._defaults.hourMax=this.hourMaxOriginal,this._defaults.minuteMax=this.minuteMaxOriginal,this._defaults.secondMax=this.secondMaxOriginal,this._defaults.millisecMax=this.millisecMaxOriginal,this._defaults.microsecMax=this.microsecMaxOriginal)}if(void 0!==e&&e===!0){var l=parseInt(this._defaults.hourMax-(this._defaults.hourMax-this._defaults.hourMin)%this._defaults.stepHour,10),h=parseInt(this._defaults.minuteMax-(this._defaults.minuteMax-this._defaults.minuteMin)%this._defaults.stepMinute,10),u=parseInt(this._defaults.secondMax-(this._defaults.secondMax-this._defaults.secondMin)%this._defaults.stepSecond,10),c=parseInt(this._defaults.millisecMax-(this._defaults.millisecMax-this._defaults.millisecMin)%this._defaults.stepMillisec,10),d=parseInt(this._defaults.microsecMax-(this._defaults.microsecMax-this._defaults.microsecMin)%this._defaults.stepMicrosec,10);this.hour_slider&&(this.control.options(this,this.hour_slider,"hour",{min:this._defaults.hourMin,max:l}),this.control.value(this,this.hour_slider,"hour",this.hour-this.hour%this._defaults.stepHour)),this.minute_slider&&(this.control.options(this,this.minute_slider,"minute",{min:this._defaults.minuteMin,max:h}),this.control.value(this,this.minute_slider,"minute",this.minute-this.minute%this._defaults.stepMinute)),this.second_slider&&(this.control.options(this,this.second_slider,"second",{min:this._defaults.secondMin,max:u}),this.control.value(this,this.second_slider,"second",this.second-this.second%this._defaults.stepSecond)),this.millisec_slider&&(this.control.options(this,this.millisec_slider,"millisec",{min:this._defaults.millisecMin,max:c}),this.control.value(this,this.millisec_slider,"millisec",this.millisec-this.millisec%this._defaults.stepMillisec)),this.microsec_slider&&(this.control.options(this,this.microsec_slider,"microsec",{min:this._defaults.microsecMin,max:d}),this.control.value(this,this.microsec_slider,"microsec",this.microsec-this.microsec%this._defaults.stepMicrosec))}}},_onTimeChange:function(){if(this._defaults.showTimepicker){var t=this.hour_slider?this.control.value(this,this.hour_slider,"hour"):!1,e=this.minute_slider?this.control.value(this,this.minute_slider,"minute"):!1,i=this.second_slider?this.control.value(this,this.second_slider,"second"):!1,n=this.millisec_slider?this.control.value(this,this.millisec_slider,"millisec"):!1,s=this.microsec_slider?this.control.value(this,this.microsec_slider,"microsec"):!1,a=this.timezone_select?this.timezone_select.val():!1,o=this._defaults,r=o.pickerTimeFormat||o.timeFormat,l=o.pickerTimeSuffix||o.timeSuffix;"object"==typeof t&&(t=!1),"object"==typeof e&&(e=!1),"object"==typeof i&&(i=!1),"object"==typeof n&&(n=!1),"object"==typeof s&&(s=!1),"object"==typeof a&&(a=!1),t!==!1&&(t=parseInt(t,10)),e!==!1&&(e=parseInt(e,10)),i!==!1&&(i=parseInt(i,10)),n!==!1&&(n=parseInt(n,10)),s!==!1&&(s=parseInt(s,10)),a!==!1&&(a=a.toString());var h=o[12>t?"amNames":"pmNames"][0],u=t!==parseInt(this.hour,10)||e!==parseInt(this.minute,10)||i!==parseInt(this.second,10)||n!==parseInt(this.millisec,10)||s!==parseInt(this.microsec,10)||this.ampm.length>0&&12>t!=(-1!==$.inArray(this.ampm.toUpperCase(),this.amNames))||null!==this.timezone&&a!==this.timezone.toString();u&&(t!==!1&&(this.hour=t),e!==!1&&(this.minute=e),i!==!1&&(this.second=i),n!==!1&&(this.millisec=n),s!==!1&&(this.microsec=s),a!==!1&&(this.timezone=a),this.inst||(this.inst=$.datepicker._getInst(this.$input[0])),this._limitMinMaxDateTime(this.inst,!0)),this.support.ampm&&(this.ampm=h),this.formattedTime=$.datepicker.formatTime(o.timeFormat,this,o),this.$timeObj&&this.$timeObj.text(r===o.timeFormat?this.formattedTime+l:$.datepicker.formatTime(r,this,o)+l),this.timeDefined=!0,u&&(this._updateDateTime(),this.$input.focus())}},_onSelectHandler:function(){var t=this._defaults.onSelect||this.inst.settings.onSelect,e=this.$input?this.$input[0]:null;t&&e&&t.apply(e,[this.formattedDateTime,this])},_updateDateTime:function(t){t=this.inst||t;var e=t.currentYear>0?new Date(t.currentYear,t.currentMonth,t.currentDay):new Date(t.selectedYear,t.selectedMonth,t.selectedDay),i=$.datepicker._daylightSavingAdjust(e),n=$.datepicker._get(t,"dateFormat"),s=$.datepicker._getFormatConfig(t),a=null!==i&&this.timeDefined;this.formattedDate=$.datepicker.formatDate(n,null===i?new Date:i,s);var o=this.formattedDate;if(""===t.lastVal&&(t.currentYear=t.selectedYear,t.currentMonth=t.selectedMonth,t.currentDay=t.selectedDay),this._defaults.timeOnly===!0?o=this.formattedTime:this._defaults.timeOnly!==!0&&(this._defaults.alwaysSetTime||a)&&(o+=this._defaults.separator+this.formattedTime+this._defaults.timeSuffix),this.formattedDateTime=o,this._defaults.showTimepicker)if(this.$altInput&&this._defaults.timeOnly===!1&&this._defaults.altFieldTimeOnly===!0)this.$altInput.val(this.formattedTime),this.$input.val(this.formattedDate);else if(this.$altInput){this.$input.val(o);var r="",l=this._defaults.altSeparator?this._defaults.altSeparator:this._defaults.separator,h=this._defaults.altTimeSuffix?this._defaults.altTimeSuffix:this._defaults.timeSuffix;this._defaults.timeOnly||(r=this._defaults.altFormat?$.datepicker.formatDate(this._defaults.altFormat,null===i?new Date:i,s):this.formattedDate,r&&(r+=l)),r+=this._defaults.altTimeFormat?$.datepicker.formatTime(this._defaults.altTimeFormat,this,this._defaults)+h:this.formattedTime+h,this.$altInput.val(r)}else this.$input.val(o);else this.$input.val(this.formattedDate);this.$input.trigger("change")},_onFocus:function(){if(!this.$input.val()&&this._defaults.defaultValue){this.$input.val(this._defaults.defaultValue);var t=$.datepicker._getInst(this.$input.get(0)),e=$.datepicker._get(t,"timepicker");if(e&&e._defaults.timeOnly&&t.input.val()!==t.lastVal)try{$.datepicker._updateDatepicker(t)}catch(i){$.timepicker.log(i)}}},_controls:{slider:{create:function(t,e,i,n,s,a,o){var r=t._defaults.isRTL;return e.prop("slide",null).slider({orientation:"horizontal",value:r?-1*n:n,min:r?-1*a:s,max:r?-1*s:a,step:o,slide:function(e,n){t.control.value(t,$(this),i,r?-1*n.value:n.value),t._onTimeChange()},stop:function(){t._onSelectHandler()}})},options:function(t,e,i,n,s){if(t._defaults.isRTL){if("string"==typeof n)return"min"===n||"max"===n?void 0!==s?e.slider(n,-1*s):Math.abs(e.slider(n)):e.slider(n);var a=n.min,o=n.max;return n.min=n.max=null,void 0!==a&&(n.max=-1*a),void 0!==o&&(n.min=-1*o),e.slider(n)}return"string"==typeof n&&void 0!==s?e.slider(n,s):e.slider(n)},value:function(t,e,i,n){return t._defaults.isRTL?void 0!==n?e.slider("value",-1*n):Math.abs(e.slider("value")):void 0!==n?e.slider("value",n):e.slider("value")}},select:{create:function(t,e,i,n,s,a,o){for(var r='<select class="ui-timepicker-select" data-unit="'+i+'" data-min="'+s+'" data-max="'+a+'" data-step="'+o+'">',l=t._defaults.pickerTimeFormat||t._defaults.timeFormat,h=s;a>=h;h+=o)r+='<option value="'+h+'"'+(h===n?" selected":"")+">",r+="hour"===i?$.datepicker.formatTime($.trim(l.replace(/[^ht ]/gi,"")),{hour:h},t._defaults):"millisec"===i||"microsec"===i||h>=10?h:"0"+h.toString(),r+="</option>";return r+="</select>",e.children("select").remove(),$(r).appendTo(e).change(function(){t._onTimeChange(),t._onSelectHandler()}),e},options:function(t,e,i,n,s){var a={},o=e.children("select");if("string"==typeof n){if(void 0===s)return o.data(n);a[n]=s}else a=n;return t.control.create(t,e,o.data("unit"),o.val(),a.min||o.data("min"),a.max||o.data("max"),a.step||o.data("step"))},value:function(t,e,i,n){var s=e.children("select");return void 0!==n?s.val(n):s.val()}}}}),$.fn.extend({timepicker:function(t){t=t||{};var e=Array.prototype.slice.call(arguments);return"object"==typeof t&&(e[0]=$.extend(t,{timeOnly:!0})),$(this).each(function(){$.fn.datetimepicker.apply($(this),e)})},datetimepicker:function(t){t=t||{};var e=arguments;return"string"==typeof t?"getDate"===t?$.fn.datepicker.apply($(this[0]),e):this.each(function(){var t=$(this);t.datepicker.apply(t,e)}):this.each(function(){var e=$(this);e.datepicker($.timepicker._newInst(e,t)._defaults)})}}),$.datepicker.parseDateTime=function(t,e,i,n,s){var a=parseDateTimeInternal(t,e,i,n,s);if(a.timeObj){var o=a.timeObj;a.date.setHours(o.hour,o.minute,o.second,o.millisec),a.date.setMicroseconds(o.microsec)}return a.date},$.datepicker.parseTime=function(t,e,i){var n=extendRemove(extendRemove({},$.timepicker._defaults),i||{}),s=(-1!==t.replace(/\'.*?\'/g,"").indexOf("Z"),function(t,e,i){var n,s=function(t,e){var i=[];return t&&$.merge(i,t),e&&$.merge(i,e),i=$.map(i,function(t){return t.replace(/[.*+?|()\[\]{}\\]/g,"\\$&")}),"("+i.join("|")+")?"},a=function(t){var e=t.toLowerCase().match(/(h{1,2}|m{1,2}|s{1,2}|l{1}|c{1}|t{1,2}|z|'.*?')/g),i={h:-1,m:-1,s:-1,l:-1,c:-1,t:-1,z:-1};if(e)for(var n=0;n<e.length;n++)-1===i[e[n].toString().charAt(0)]&&(i[e[n].toString().charAt(0)]=n+1);return i},o="^"+t.toString().replace(/([hH]{1,2}|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g,function(t){var e=t.length;switch(t.charAt(0).toLowerCase()){case"h":return 1===e?"(\\d?\\d)":"(\\d{"+e+"})";case"m":return 1===e?"(\\d?\\d)":"(\\d{"+e+"})";case"s":return 1===e?"(\\d?\\d)":"(\\d{"+e+"})";case"l":return"(\\d?\\d?\\d)";case"c":return"(\\d?\\d?\\d)";case"z":return"(z|[-+]\\d\\d:?\\d\\d|\\S+)?";case"t":return s(i.amNames,i.pmNames);default:return"("+t.replace(/\'/g,"").replace(/(\.|\$|\^|\\|\/|\(|\)|\[|\]|\?|\+|\*)/g,function(t){return"\\"+t})+")?"}}).replace(/\s/g,"\\s?")+i.timeSuffix+"$",r=a(t),l="";n=e.match(new RegExp(o,"i"));var h={hour:0,minute:0,second:0,millisec:0,microsec:0};return n?(-1!==r.t&&(void 0===n[r.t]||0===n[r.t].length?(l="",h.ampm=""):(l=-1!==$.inArray(n[r.t].toUpperCase(),i.amNames)?"AM":"PM",h.ampm=i["AM"===l?"amNames":"pmNames"][0])),-1!==r.h&&(h.hour="AM"===l&&"12"===n[r.h]?0:"PM"===l&&"12"!==n[r.h]?parseInt(n[r.h],10)+12:Number(n[r.h])),-1!==r.m&&(h.minute=Number(n[r.m])),-1!==r.s&&(h.second=Number(n[r.s])),-1!==r.l&&(h.millisec=Number(n[r.l])),-1!==r.c&&(h.microsec=Number(n[r.c])),-1!==r.z&&void 0!==n[r.z]&&(h.timezone=$.timepicker.timezoneOffsetNumber(n[r.z])),h):!1}),a=function(t,e,i){try{var n=new Date("2012-01-01 "+e);if(isNaN(n.getTime())&&(n=new Date("2012-01-01T"+e),isNaN(n.getTime())&&(n=new Date("01/01/2012 "+e),isNaN(n.getTime()))))throw"Unable to parse time with native Date: "+e;return{hour:n.getHours(),minute:n.getMinutes(),second:n.getSeconds(),millisec:n.getMilliseconds(),microsec:n.getMicroseconds(),timezone:-1*n.getTimezoneOffset()}}catch(a){try{return s(t,e,i)}catch(o){$.timepicker.log("Unable to parse \ntimeString: "+e+"\ntimeFormat: "+t)}}return!1};return"function"==typeof n.parse?n.parse(t,e,n):"loose"===n.parse?a(t,e,n):s(t,e,n)},$.datepicker.formatTime=function(t,e,i){i=i||{},i=$.extend({},$.timepicker._defaults,i),e=$.extend({hour:0,minute:0,second:0,millisec:0,microsec:0,timezone:null},e);var n=t,s=i.amNames[0],a=parseInt(e.hour,10);return a>11&&(s=i.pmNames[0]),n=n.replace(/(?:HH?|hh?|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g,function(t){switch(t){case"HH":return("0"+a).slice(-2);case"H":return a;case"hh":return("0"+convert24to12(a)).slice(-2);case"h":return convert24to12(a);case"mm":return("0"+e.minute).slice(-2);case"m":return e.minute;case"ss":return("0"+e.second).slice(-2);case"s":return e.second;case"l":return("00"+e.millisec).slice(-3);case"c":return("00"+e.microsec).slice(-3);case"z":return $.timepicker.timezoneOffsetString(null===e.timezone?i.timezone:e.timezone,!1);case"Z":return $.timepicker.timezoneOffsetString(null===e.timezone?i.timezone:e.timezone,!0);case"T":return s.charAt(0).toUpperCase();case"TT":return s.toUpperCase();case"t":return s.charAt(0).toLowerCase();case"tt":return s.toLowerCase();default:return t.replace(/'/g,"")}})},$.datepicker._base_selectDate=$.datepicker._selectDate,$.datepicker._selectDate=function(t,e){var i=this._getInst($(t)[0]),n=this._get(i,"timepicker");n?(n._limitMinMaxDateTime(i,!0),i.inline=i.stay_open=!0,this._base_selectDate(t,e),i.inline=i.stay_open=!1,this._notifyChange(i),this._updateDatepicker(i)):this._base_selectDate(t,e)},$.datepicker._base_updateDatepicker=$.datepicker._updateDatepicker,$.datepicker._updateDatepicker=function(t){var e=t.input[0];if(!($.datepicker._curInst&&$.datepicker._curInst!==t&&$.datepicker._datepickerShowing&&$.datepicker._lastInput!==e||"boolean"==typeof t.stay_open&&t.stay_open!==!1)){this._base_updateDatepicker(t);var i=this._get(t,"timepicker");i&&i._addTimePicker(t)}},$.datepicker._base_doKeyPress=$.datepicker._doKeyPress,$.datepicker._doKeyPress=function(t){var e=$.datepicker._getInst(t.target),i=$.datepicker._get(e,"timepicker");if(i&&$.datepicker._get(e,"constrainInput")){var n=i.support.ampm,s=null!==i._defaults.showTimezone?i._defaults.showTimezone:i.support.timezone,a=$.datepicker._possibleChars($.datepicker._get(e,"dateFormat")),o=i._defaults.timeFormat.toString().replace(/[hms]/g,"").replace(/TT/g,n?"APM":"").replace(/Tt/g,n?"AaPpMm":"").replace(/tT/g,n?"AaPpMm":"").replace(/T/g,n?"AP":"").replace(/tt/g,n?"apm":"").replace(/t/g,n?"ap":"")+" "+i._defaults.separator+i._defaults.timeSuffix+(s?i._defaults.timezoneList.join(""):"")+i._defaults.amNames.join("")+i._defaults.pmNames.join("")+a,r=String.fromCharCode(void 0===t.charCode?t.keyCode:t.charCode);return t.ctrlKey||" ">r||!a||o.indexOf(r)>-1}return $.datepicker._base_doKeyPress(t)},$.datepicker._base_updateAlternate=$.datepicker._updateAlternate,$.datepicker._updateAlternate=function(t){var e=this._get(t,"timepicker");if(e){var i=e._defaults.altField;if(i){var n=(e._defaults.altFormat||e._defaults.dateFormat,this._getDate(t)),s=$.datepicker._getFormatConfig(t),a="",o=e._defaults.altSeparator?e._defaults.altSeparator:e._defaults.separator,r=e._defaults.altTimeSuffix?e._defaults.altTimeSuffix:e._defaults.timeSuffix,l=null!==e._defaults.altTimeFormat?e._defaults.altTimeFormat:e._defaults.timeFormat;a+=$.datepicker.formatTime(l,e,e._defaults)+r,e._defaults.timeOnly||e._defaults.altFieldTimeOnly||null===n||(a=e._defaults.altFormat?$.datepicker.formatDate(e._defaults.altFormat,n,s)+o+a:e.formattedDate+o+a),$(i).val(a)}}else $.datepicker._base_updateAlternate(t)},$.datepicker._base_doKeyUp=$.datepicker._doKeyUp,$.datepicker._doKeyUp=function(t){var e=$.datepicker._getInst(t.target),i=$.datepicker._get(e,"timepicker");if(i&&i._defaults.timeOnly&&e.input.val()!==e.lastVal)try{$.datepicker._updateDatepicker(e)}catch(n){$.timepicker.log(n)}return $.datepicker._base_doKeyUp(t)},$.datepicker._base_gotoToday=$.datepicker._gotoToday,$.datepicker._gotoToday=function(t){var e=this._getInst($(t)[0]),i=e.dpDiv;this._base_gotoToday(t);var n=this._get(e,"timepicker");selectLocalTimezone(n);var s=new Date;this._setTime(e,s),$(".ui-datepicker-today",i).click()},$.datepicker._disableTimepickerDatepicker=function(t){var e=this._getInst(t);if(e){var i=this._get(e,"timepicker");$(t).datepicker("getDate"),i&&(e.settings.showTimepicker=!1,i._defaults.showTimepicker=!1,i._updateDateTime(e))}},$.datepicker._enableTimepickerDatepicker=function(t){var e=this._getInst(t);if(e){var i=this._get(e,"timepicker");$(t).datepicker("getDate"),i&&(e.settings.showTimepicker=!0,i._defaults.showTimepicker=!0,i._addTimePicker(e),i._updateDateTime(e))}},$.datepicker._setTime=function(t,e){var i=this._get(t,"timepicker");if(i){var n=i._defaults;i.hour=e?e.getHours():n.hour,i.minute=e?e.getMinutes():n.minute,i.second=e?e.getSeconds():n.second,i.millisec=e?e.getMilliseconds():n.millisec,i.microsec=e?e.getMicroseconds():n.microsec,i._limitMinMaxDateTime(t,!0),i._onTimeChange(),i._updateDateTime(t)}},$.datepicker._setTimeDatepicker=function(t,e,i){var n=this._getInst(t);if(n){var s=this._get(n,"timepicker");if(s){this._setDateFromField(n);var a;e&&("string"==typeof e?(s._parseTime(e,i),a=new Date,a.setHours(s.hour,s.minute,s.second,s.millisec),a.setMicroseconds(s.microsec)):(a=new Date(e.getTime()),a.setMicroseconds(e.getMicroseconds())),"Invalid Date"===a.toString()&&(a=void 0),this._setTime(n,a))
}}},$.datepicker._base_setDateDatepicker=$.datepicker._setDateDatepicker,$.datepicker._setDateDatepicker=function(t,e){var i=this._getInst(t);if(i){"string"==typeof e&&(e=new Date(e),e.getTime()||$.timepicker.log("Error creating Date object from string."));var n,s=this._get(i,"timepicker");e instanceof Date?(n=new Date(e.getTime()),n.setMicroseconds(e.getMicroseconds())):n=e,s&&n&&(s.support.timezone||null!==s._defaults.timezone||(s.timezone=-1*n.getTimezoneOffset()),e=$.timepicker.timezoneAdjust(e,s.timezone),n=$.timepicker.timezoneAdjust(n,s.timezone)),this._updateDatepicker(i),this._base_setDateDatepicker.apply(this,arguments),this._setTimeDatepicker(t,n,!0)}},$.datepicker._base_getDateDatepicker=$.datepicker._getDateDatepicker,$.datepicker._getDateDatepicker=function(t,e){var i=this._getInst(t);if(i){var n=this._get(i,"timepicker");if(n){void 0===i.lastVal&&this._setDateFromField(i,e);var s=this._getDate(i);return s&&n._parseTime($(t).val(),n.timeOnly)&&(s.setHours(n.hour,n.minute,n.second,n.millisec),s.setMicroseconds(n.microsec),null!=n.timezone&&(n.support.timezone||null!==n._defaults.timezone||(n.timezone=-1*s.getTimezoneOffset()),s=$.timepicker.timezoneAdjust(s,n.timezone))),s}return this._base_getDateDatepicker(t,e)}},$.datepicker._base_parseDate=$.datepicker.parseDate,$.datepicker.parseDate=function(t,e,i){var n;try{n=this._base_parseDate(t,e,i)}catch(s){if(!(s.indexOf(":")>=0))throw s;n=this._base_parseDate(t,e.substring(0,e.length-(s.length-s.indexOf(":")-2)),i),$.timepicker.log("Error parsing the date string: "+s+"\ndate string = "+e+"\ndate format = "+t)}return n},$.datepicker._base_formatDate=$.datepicker._formatDate,$.datepicker._formatDate=function(t){var e=this._get(t,"timepicker");return e?(e._updateDateTime(t),e.$input.val()):this._base_formatDate(t)},$.datepicker._base_optionDatepicker=$.datepicker._optionDatepicker,$.datepicker._optionDatepicker=function(t,e,i){var n,s=this._getInst(t);if(!s)return null;var a=this._get(s,"timepicker");if(a){var o,r=null,l=null,h=null,u=a._defaults.evnts,c={};if("string"==typeof e){if("minDate"===e||"minDateTime"===e)r=i;else if("maxDate"===e||"maxDateTime"===e)l=i;else if("onSelect"===e)h=i;else if(u.hasOwnProperty(e)){if("undefined"==typeof i)return u[e];c[e]=i,n={}}}else if("object"==typeof e){e.minDate?r=e.minDate:e.minDateTime?r=e.minDateTime:e.maxDate?l=e.maxDate:e.maxDateTime&&(l=e.maxDateTime);for(o in u)u.hasOwnProperty(o)&&e[o]&&(c[o]=e[o])}for(o in c)c.hasOwnProperty(o)&&(u[o]=c[o],n||(n=$.extend({},e)),delete n[o]);if(n&&isEmptyObject(n))return;r?(r=0===r?new Date:new Date(r),a._defaults.minDate=r,a._defaults.minDateTime=r):l?(l=0===l?new Date:new Date(l),a._defaults.maxDate=l,a._defaults.maxDateTime=l):h&&(a._defaults.onSelect=h)}return void 0===i?this._base_optionDatepicker.call($.datepicker,t,e):this._base_optionDatepicker.call($.datepicker,t,n||e,i)};var isEmptyObject=function(t){var e;for(e in t)if(t.hasOwnProperty(e))return!1;return!0},extendRemove=function(t,e){$.extend(t,e);for(var i in e)(null===e[i]||void 0===e[i])&&(t[i]=e[i]);return t},detectSupport=function(t){var e=t.replace(/'.*?'/g,"").toLowerCase(),i=function(t,e){return-1!==t.indexOf(e)?!0:!1};return{hour:i(e,"h"),minute:i(e,"m"),second:i(e,"s"),millisec:i(e,"l"),microsec:i(e,"c"),timezone:i(e,"z"),ampm:i(e,"t")&&i(t,"h"),iso8601:i(t,"Z")}},convert24to12=function(t){return t%=12,0===t&&(t=12),String(t)},computeEffectiveSetting=function(t,e){return t&&t[e]?t[e]:$.timepicker._defaults[e]},splitDateTime=function(t,e){var i=computeEffectiveSetting(e,"separator"),n=computeEffectiveSetting(e,"timeFormat"),s=n.split(i),a=s.length,o=t.split(i),r=o.length;return r>1?{dateString:o.splice(0,r-a).join(i),timeString:o.splice(0,a).join(i)}:{dateString:t,timeString:""}},parseDateTimeInternal=function(t,e,i,n,s){var a,o,r;if(o=splitDateTime(i,s),a=$.datepicker._base_parseDate(t,o.dateString,n),""===o.timeString)return{date:a};if(r=$.datepicker.parseTime(e,o.timeString,s),!r)throw"Wrong time format";return{date:a,timeObj:r}},selectLocalTimezone=function(t,e){if(t&&t.timezone_select){var i=e||new Date;t.timezone_select.val(-i.getTimezoneOffset())}};$.timepicker=new Timepicker,$.timepicker.timezoneOffsetString=function(t,e){if(isNaN(t)||t>840||-720>t)return t;var i=t,n=i%60,s=(i-n)/60,a=e?":":"",o=(i>=0?"+":"-")+("0"+Math.abs(s)).slice(-2)+a+("0"+Math.abs(n)).slice(-2);return"+00:00"===o?"Z":o},$.timepicker.timezoneOffsetNumber=function(t){var e=t.toString().replace(":","");return"Z"===e.toUpperCase()?0:/^(\-|\+)\d{4}$/.test(e)?("-"===e.substr(0,1)?-1:1)*(60*parseInt(e.substr(1,2),10)+parseInt(e.substr(3,2),10)):t},$.timepicker.timezoneAdjust=function(t,e){var i=$.timepicker.timezoneOffsetNumber(e);return isNaN(i)||t.setMinutes(t.getMinutes()+-t.getTimezoneOffset()-i),t},$.timepicker.timeRange=function(t,e,i){return $.timepicker.handleRange("timepicker",t,e,i)},$.timepicker.datetimeRange=function(t,e,i){$.timepicker.handleRange("datetimepicker",t,e,i)},$.timepicker.dateRange=function(t,e,i){$.timepicker.handleRange("datepicker",t,e,i)},$.timepicker.handleRange=function(t,e,i,n){function s(s,a){var o=e[t]("getDate"),r=i[t]("getDate"),l=s[t]("getDate");if(null!==o){var h=new Date(o.getTime()),u=new Date(o.getTime());h.setMilliseconds(h.getMilliseconds()+n.minInterval),u.setMilliseconds(u.getMilliseconds()+n.maxInterval),n.minInterval>0&&h>r?i[t]("setDate",h):n.maxInterval>0&&r>u?i[t]("setDate",u):o>r&&a[t]("setDate",l)}}function a(e,i,s){if(e.val()){var a=e[t].call(e,"getDate");null!==a&&n.minInterval>0&&("minDate"===s&&a.setMilliseconds(a.getMilliseconds()+n.minInterval),"maxDate"===s&&a.setMilliseconds(a.getMilliseconds()-n.minInterval)),a.getTime&&i[t].call(i,"option",s,a)}}return n=$.extend({},{minInterval:0,maxInterval:0,start:{},end:{}},n),$.fn[t].call(e,$.extend({onClose:function(){s($(this),i)},onSelect:function(){a($(this),i,"minDate")}},n,n.start)),$.fn[t].call(i,$.extend({onClose:function(){s($(this),e)},onSelect:function(){a($(this),e,"maxDate")}},n,n.end)),s(e,i),a(e,i,"minDate"),a(i,e,"maxDate"),$([e.get(0),i.get(0)])},$.timepicker.log=function(t){window.console&&window.console.log(t)},$.timepicker._util={_extendRemove:extendRemove,_isEmptyObject:isEmptyObject,_convert24to12:convert24to12,_detectSupport:detectSupport,_selectLocalTimezone:selectLocalTimezone,_computeEffectiveSetting:computeEffectiveSetting,_splitDateTime:splitDateTime,_parseDateTimeInternal:parseDateTimeInternal},Date.prototype.getMicroseconds||(Date.prototype.microseconds=0,Date.prototype.getMicroseconds=function(){return this.microseconds},Date.prototype.setMicroseconds=function(t){return this.setMilliseconds(this.getMilliseconds()+Math.floor(t/1e3)),this.microseconds=t%1e3,this}),$.timepicker.version="1.4.3"}}(jQuery),define("lib.jquery-ui.timepicker",function(){})});
/**
 * Copyright 2014 - mcandela
 * Date: 11/07/14
 * Time: 11:37
 */
define('lib.jquery-libs-amd',["lib.jquery-libs"], function () {
    return jQuery.noConflict(true);
});
/**
 * Created by mcandela on 11/12/13.
 */

define('env.params-manager',[
    "env.utils",
    "lib.jquery-libs-amd"
], function(utils, $){

    /**
     * ParamsManager is the only component aware about the translation between external and internal parameters.
     * It allows to have high-level internal parameters expressed as visualisation terms and external domain related
     * parameters. This approach allows to easily introduce at any time new "views" based on different data elements
     * using the same graphic metaphor.
     *
     * @class ParamsManager
     * @constructor
     * @module environment
     */

    var ParamsManager = function(){


        /**
         * This method merges two parameters vectors
         *
         * @method mergeParams
         * @input {Object} actualParams A vector of parameters
         * @input {Object} newParams A vector of parameters
         * @return {Object} A vector of parameters
         */

        this.mergeParams = function(actualParams, newParams){
            for (var paramKey in newParams){ // MAP not Array
                actualParams[paramKey] = newParams[paramKey];
            }

            return actualParams;
        };


        /**
         * This method converts the parameters vector from the external to the internal format.
         * It is an indirection layer able to converts parameters from an external domain to a graphical domain
         * stopping at the same time the propagation of changes involving the external parameters.
         *
         * @method fromExternalToInternal
         * @input {Object} params A vector of parameters
         * @return {Object} A vector of parameters
         */

        this.fromExternalToInternal = function(params){
            var zone, server, type, startDate, selectedRows, outParams, endDate, zoneName, serverName, typeName,
                startDateName, endDateName, selectedRowsName, isTcp, ipVersion, isTcpName, ipVersionName, validatorMap,
                timeWindowName, timeWindow, filterProbesName, filterProbes;

            zoneName = "zone";
            serverName = "server";
            typeName = "type";
            startDateName = "startTime";
            endDateName = "endTime";
            selectedRowsName = "selectedRows";
            isTcpName = "isTcp";
            ipVersionName = "ipVersion";
            timeWindowName = "defaultTimeWindow";
            filterProbesName = "filterProbes";

            validatorMap = {
                "zone": {
                    type: "string"
                },

                "server": {
                    type: "string"
                },

                "type": {
                    type: function(val){ return (val == "zone-servers" || val == "server-probes" || val == "server-instances");},
                    message: "The type param can be one of 'zone-servers', 'server-probes' or 'server-instances'"
                },

                "startTime": {
                    type: "number",
                    cast: function(val){ return ((typeof val == "string") ? parseInt(val) : val); }, // This is a cast for multiple types input
                    message: "startTime it is not a valid Unix timestamp"
                },

                "endTime": {
                    type: "number",
                    cast: function(val){ return ((typeof val == "string") ? parseInt(val) : val); }, // This is a cast for multiple types input
                    message: "endTime it is not a valid Unix timestamp"
                },

                "selectedRows": {
                    type: "string",
                    message: "The selectedRows params must be a list of comma-separated ids"
                },

                "ipVersion": {
                    type: function(val){ return (val == "6" || val == "4" || val == "both");},
                    cast: function(val){ return (val == "6" || val == "4") ? parseInt(val) : "both"; }, // This is a cast for multiple types input
                    message: "The ipVersion param can be '4', '6' or 'both'"
                },

                "isTcp": {
                    type: "boolean",
                    cast: function(val){
                        return ((typeof val == "string") ? (val == "true") : val);// This is a cast for multiple types input
                    }
                },

                "filterProbes": {
                    type: "boolean",
                    cast: function(val){
                        return ((typeof val == "string") ? (val == "true") : val);// This is a cast for multiple types input
                    }
                },

                "defaultTimeWindow": {
                    type: function(val){ return (val == "5h" || val == "1d" || val == "1w" || val == "1m");},
                    message: "The defaultTimeWindow param can be '5h', '1d', '1w', or '1m' or an interval expressed in seconds"
                }
            };

            params = this._helper(validatorMap, params);

            outParams = {};

            zone = params[zoneName];
            server = params[serverName];
            type = params[typeName];
            startDate = params[startDateName];
            endDate = params[endDateName];
            timeWindow = params[timeWindowName];
            selectedRows = params[selectedRowsName];
            filterProbes = params[filterProbesName];
            isTcp = params[isTcpName];
            ipVersion = params[ipVersionName];

            if (server){
                outParams.group = this.convertRemoteToLocalId(server);
                if (zone) outParams.root = this.convertRemoteToLocalId(zone);
            }else{
                if (zone) outParams.group = this.convertRemoteToLocalId(zone);
            }

            if (type) outParams.type = this.convertRemoteToLocalType(type);
            if (filterProbes != null) outParams.filterProbes = filterProbes;

            if (startDate) outParams.startDate = this.convertRemoteToLocalDate(startDate);
            if (endDate) outParams.endDate = this.convertRemoteToLocalDate(endDate);

            if (selectedRows != null) outParams.selectedRows = this.convertRemoteToLocalSelectedRows(selectedRows);


            if (ipVersion) outParams.ipVersion = ((ipVersion == 'both') ? null : ipVersion);
            if (timeWindow) outParams.timeWindow = this.convertRemoteToLocalTimeWindow(timeWindow);

            if (isTcp != null) outParams.isTcp = isTcp;

            return outParams;
        };


        /**
         * This method converts the parameters vector from the internal to the external format.
         * It is the opposite of fromExternalToInternal.
         *
         * @method fromInternalToExternal
         * @input {Object} params A vector of parameters
         * @return {Object} A vector of parameters
         */

        this.fromInternalToExternal = function(params){
            var zone, server, outParams, zoneName, serverName, typeName, startDateName, endDateName, selectedRowsName,
                ipVersionName, isTcpName, timeWindowName, filterProbesName;

            zoneName = "zone";
            serverName = "server";
            typeName = "type";
            startDateName = "startTime";
            endDateName = "endTime";
            selectedRowsName = "selectedRows";
            ipVersionName = "ipVersion";
            isTcpName = "isTcp";
            timeWindowName = "timeWindow";
            filterProbesName = "filterProbes";

            outParams = {};

            outParams[typeName] = this.convertLocalToRemoteType(params.type);

            if (params.type == 'probes'){
                outParams[serverName] = (params.group) ? this.convertLocalToRemoteId(params.group) : null;
                outParams[zoneName] = this.convertLocalToRemoteId(params.root);
            }else if (params.type == 'servers'){
                outParams[serverName] = null;
                outParams[zoneName] = (params.group) ? this.convertLocalToRemoteId(params.group) : null;
            }


            outParams[startDateName] =  (params.startDate) ? this.convertLocalToRemoteDate(params.startDate) : null;

            outParams[endDateName] = (params.endDate)  ? this.convertLocalToRemoteDate(params.endDate) : null;
            outParams[selectedRowsName] = this.convertLocalToRemoteSelectedRows(params.selectedRows);

            outParams[filterProbesName] = params.filterProbes;

            outParams[timeWindowName] = (params.timeWindow) ? this.convertLocalToRemoteTimeWindow(params.timeWindow) : null;

            outParams[ipVersionName] = params.ipVersion || 'both';

            outParams[isTcpName] = params.isTcp;

            return outParams;
        };


        /**
         * This method is an input checker for the external parameters.
         *
         * @method _helper
         * @private
         * @input {Object} validationMap A validation Map composed of types, cast functions and error messages
         * @input {Object} parameters A vector of parameters
         * @return {Object} A vector of parameters cased with the cast functions described in the validationMap
         */

        this._helper = function(validationMap, parameters){
            var validationItem, validator, messages, value;

            messages = [];

            for (var parameter in parameters){

                validationItem = validationMap[parameter];
                value = parameters[parameter];

                if (value && validationItem){

                    if (validationItem.cast){
                        parameters[parameter] = validationItem.cast(value);
                        value = parameters[parameter];
                    }

                    validator = (typeof validationItem.type == "function") ? validationItem.type : function(val){ return (typeof val == validationItem.type); };

                    if (!validator(value)){
                        if (validationItem.message){
                            messages.push(validationItem.message);
                        }else{
                            messages.push(parameter + " must be a " + validationItem.type);
                        }
                    }
                }
            }

            if (messages.length > 0){
                alert("Input errors: " + messages.join(', '));
            }

            return parameters;
        };


        /**
         * This method initializes an empty/default vector of parameters
         *
         * @method createInternalParamVector
         * @return {Object} A vector of parameters
         */

        this.createInternalParamVector = function(){
            return {
                startDate: null,
                endDate : null,
                type: null,
                group: null,
                root: null,
                selectedRows: [],
                ipVersion: null,
                isTcp: null,
                filterProbes: false,
                defaultTimeWindow: null
            };
        };


        /**
         * This method converts a set of selectedRows from the internal to the external format
         *
         * @method convertLocalToRemoteSelectedRows
         * @input {String} selectedRows An array of rows IDs
         * @return {String} A string of comma separated rows IDs
         */

        this.convertLocalToRemoteSelectedRows = function(selectedRows){
            return (selectedRows.length > 0) ? utils.join($.map(selectedRows, this.convertLocalToRemoteId), ',') : '';
        };


        /**
         * This method converts a set of selectedRows from the external to the internal format
         *
         * @method convertRemoteToLocalSelectedRows
         * @input {String} selectedRows A string of comma separated rows IDs
         * @return {Array} An array of rows IDs
         */
        this.convertRemoteToLocalSelectedRows = function(selectedRows){
            return (selectedRows != '') ? $.map(selectedRows.split(','), this.convertRemoteToLocalId) : [];
        };


        /**
         * This method converts IDs from the external to the internal format
         *
         * @method convertRemoteToLocalId
         * @input {String} remoteId An ID in the external format
         * @return {String} An ID in the internal format
         */

        this.convertRemoteToLocalId = function(remoteId){
            return new String(remoteId)
                .replace(/\./g, 'dnsmndt')
                .replace(/\:/g, 'dnsmnsmcl');
        };


        /**
         * This method converts IDs from the internal to the external format
         *
         * @method convertLocalToRemoteId
         * @input {String} remoteId An ID in the internal format
         * @return {String} An ID in the external format
         */

        this.convertLocalToRemoteId = function(localId){
            return new String(localId)
                .replace(/dnsmndt/g, '.')
                .replace(/dnsmnsmcl/g, ':');
        };


        /**
         * This method converts Dates from the internal to the external format
         *
         * @method convertLocalToRemoteDate
         * @input {Date} local A Date object
         * @return {Number} A Unix timestamp
         */

        this.convertLocalToRemoteDate = function(local){
            return (!local) ? null : utils.dateToUTCTimestamp(local);
        };


        /**
         * This method converts Dates from the external to the internal format
         *
         * @method convertRemoteToLocalDate
         * @input {Date} remote A date object in the external format
         * @return {Number} A Unix timestamp
         */

        this.convertRemoteToLocalDate = function(remote){
            return (!remote) ? null : utils.timestampToLocalDate(remote);
        };


        /**
         * This method converts Types from the external to the internal format
         *
         * @method convertRemoteToLocalType
         * @input {String} remote A Type in the external format
         * @return {String} A Type in the internal format
         */

        this.convertRemoteToLocalType = function(remote){
            var out;

            switch(remote){
                case "zone-servers":
                    out = "servers";
                    break;

                case "server-probes":
                    out = "probes";
                    break;
            }

            return out;
        };


        /**
         * This method converts types from the internal to the external format
         *
         * @method convertLocalToRemoteType
         * @input {String} local A Type in the internal format
         * @return {String} A Type in the external format
         */

        this.convertLocalToRemoteType = function(local){
            var out;

            switch(local){
                case "servers":
                    out = "zone-servers";
                    break;

                case "probes":
                    out = "server-probes";
                    break;
            }

            return out;
        };


        /**
         * This method converts time windows from the external to the internal format
         *
         * @method convertRemoteToLocalTimeWindow
         * @input {Object} remote A time window can be expressed as a string (i.e. "5h", "1d", "1w", "1m") or as an amount of seconds
         * @return {Number} A time window expressed in seconds
         */

        this.convertRemoteToLocalTimeWindow = function(remote){
            var value;

            if (typeof remote == 'string'){

                switch(remote){

                    case "5h":
                        value = 5 * 3600;
                        break;

                    case "1d":
                        value = 24 * 3600;
                        break;

                    case "1w":
                        value = 7 * 24 * 3600;
                        break;

                    case "1m":
                        value = 30 * 24 * 3600;
                        break;
                }
            }else{
                value = remote;
            }

            return value; // seconds
        };


        /**
         * This method converts time windows from the internal to the external format
         *
         * @method convertLocalToRemoteTimeWindow
         * @input {Number} local A time window expressed in seconds
         * @return {Object} A time window expressed in seconds, in future also strings can be used
         */

        this.convertLocalToRemoteTimeWindow = function(local){
            return local; // No conversion
        }



    };

    return new ParamsManager(); //singleton
});
!function() {
    var d3 = {
        version: "3.4.1"
    };
    if (!Date.now) Date.now = function() {
        return +new Date();
    };
    var d3_arraySlice = [].slice, d3_array = function(list) {
        return d3_arraySlice.call(list);
    };
    var d3_document = document, d3_documentElement = d3_document.documentElement, d3_window = window;
    try {
        d3_array(d3_documentElement.childNodes)[0].nodeType;
    } catch (e) {
        d3_array = function(list) {
            var i = list.length, array = new Array(i);
            while (i--) array[i] = list[i];
            return array;
        };
    }
    try {
        d3_document.createElement("div").style.setProperty("opacity", 0, "");
    } catch (error) {
        var d3_element_prototype = d3_window.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = d3_window.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
        d3_element_prototype.setAttribute = function(name, value) {
            d3_element_setAttribute.call(this, name, value + "");
        };
        d3_element_prototype.setAttributeNS = function(space, local, value) {
            d3_element_setAttributeNS.call(this, space, local, value + "");
        };
        d3_style_prototype.setProperty = function(name, value, priority) {
            d3_style_setProperty.call(this, name, value + "", priority);
        };
    }
    d3.ascending = function(a, b) {
        return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    };
    d3.descending = function(a, b) {
        return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    };
    d3.min = function(array, f) {
        var i = -1, n = array.length, a, b;
        if (arguments.length === 1) {
            while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
            while (++i < n) if ((b = array[i]) != null && a > b) a = b;
        } else {
            while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
            while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
        }
        return a;
    };
    d3.max = function(array, f) {
        var i = -1, n = array.length, a, b;
        if (arguments.length === 1) {
            while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
            while (++i < n) if ((b = array[i]) != null && b > a) a = b;
        } else {
            while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
            while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
        }
        return a;
    };
    d3.extent = function(array, f) {
        var i = -1, n = array.length, a, b, c;
        if (arguments.length === 1) {
            while (++i < n && !((a = c = array[i]) != null && a <= a)) a = c = undefined;
            while (++i < n) if ((b = array[i]) != null) {
                if (a > b) a = b;
                if (c < b) c = b;
            }
        } else {
            while (++i < n && !((a = c = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
            while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
                if (a > b) a = b;
                if (c < b) c = b;
            }
        }
        return [ a, c ];
    };
    d3.sum = function(array, f) {
        var s = 0, n = array.length, a, i = -1;
        if (arguments.length === 1) {
            while (++i < n) if (!isNaN(a = +array[i])) s += a;
        } else {
            while (++i < n) if (!isNaN(a = +f.call(array, array[i], i))) s += a;
        }
        return s;
    };
    function d3_number(x) {
        return x != null && !isNaN(x);
    }
    d3.mean = function(array, f) {
        var n = array.length, a, m = 0, i = -1, j = 0;
        if (arguments.length === 1) {
            while (++i < n) if (d3_number(a = array[i])) m += (a - m) / ++j;
        } else {
            while (++i < n) if (d3_number(a = f.call(array, array[i], i))) m += (a - m) / ++j;
        }
        return j ? m : undefined;
    };
    d3.quantile = function(values, p) {
        var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
        return e ? v + e * (values[h] - v) : v;
    };
    d3.median = function(array, f) {
        if (arguments.length > 1) array = array.map(f);
        array = array.filter(d3_number);
        return array.length ? d3.quantile(array.sort(d3.ascending), .5) : undefined;
    };
    d3.bisector = function(f) {
        return {
            left: function(a, x, lo, hi) {
                if (arguments.length < 3) lo = 0;
                if (arguments.length < 4) hi = a.length;
                while (lo < hi) {
                    var mid = lo + hi >>> 1;
                    if (f.call(a, a[mid], mid) < x) lo = mid + 1; else hi = mid;
                }
                return lo;
            },
            right: function(a, x, lo, hi) {
                if (arguments.length < 3) lo = 0;
                if (arguments.length < 4) hi = a.length;
                while (lo < hi) {
                    var mid = lo + hi >>> 1;
                    if (x < f.call(a, a[mid], mid)) hi = mid; else lo = mid + 1;
                }
                return lo;
            }
        };
    };
    var d3_bisector = d3.bisector(function(d) {
        return d;
    });
    d3.bisectLeft = d3_bisector.left;
    d3.bisect = d3.bisectRight = d3_bisector.right;
    d3.shuffle = function(array) {
        var m = array.length, t, i;
        while (m) {
            i = Math.random() * m-- | 0;
            t = array[m], array[m] = array[i], array[i] = t;
        }
        return array;
    };
    d3.permute = function(array, indexes) {
        var i = indexes.length, permutes = new Array(i);
        while (i--) permutes[i] = array[indexes[i]];
        return permutes;
    };
    d3.pairs = function(array) {
        var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
        while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
        return pairs;
    };
    d3.zip = function() {
        if (!(n = arguments.length)) return [];
        for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {
            for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {
                zip[j] = arguments[j][i];
            }
        }
        return zips;
    };
    function d3_zipLength(d) {
        return d.length;
    }
    d3.transpose = function(matrix) {
        return d3.zip.apply(d3, matrix);
    };
    d3.keys = function(map) {
        var keys = [];
        for (var key in map) keys.push(key);
        return keys;
    };
    d3.values = function(map) {
        var values = [];
        for (var key in map) values.push(map[key]);
        return values;
    };
    d3.entries = function(map) {
        var entries = [];
        for (var key in map) entries.push({
            key: key,
            value: map[key]
        });
        return entries;
    };
    d3.merge = function(arrays) {
        var n = arrays.length, m, i = -1, j = 0, merged, array;
        while (++i < n) j += arrays[i].length;
        merged = new Array(j);
        while (--n >= 0) {
            array = arrays[n];
            m = array.length;
            while (--m >= 0) {
                merged[--j] = array[m];
            }
        }
        return merged;
    };
    var abs = Math.abs;
    d3.range = function(start, stop, step) {
        if (arguments.length < 3) {
            step = 1;
            if (arguments.length < 2) {
                stop = start;
                start = 0;
            }
        }
        if ((stop - start) / step === Infinity) throw new Error("infinite range");
        var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
        start *= k, stop *= k, step *= k;
        if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
        return range;
    };
    function d3_range_integerScale(x) {
        var k = 1;
        while (x * k % 1) k *= 10;
        return k;
    }
    function d3_class(ctor, properties) {
        try {
            for (var key in properties) {
                Object.defineProperty(ctor.prototype, key, {
                    value: properties[key],
                    enumerable: false
                });
            }
        } catch (e) {
            ctor.prototype = properties;
        }
    }
    d3.map = function(object) {
        var map = new d3_Map();
        if (object instanceof d3_Map) object.forEach(function(key, value) {
            map.set(key, value);
        }); else for (var key in object) map.set(key, object[key]);
        return map;
    };
    function d3_Map() {}
    d3_class(d3_Map, {
        has: d3_map_has,
        get: function(key) {
            return this[d3_map_prefix + key];
        },
        set: function(key, value) {
            return this[d3_map_prefix + key] = value;
        },
        remove: d3_map_remove,
        keys: d3_map_keys,
        values: function() {
            var values = [];
            this.forEach(function(key, value) {
                values.push(value);
            });
            return values;
        },
        entries: function() {
            var entries = [];
            this.forEach(function(key, value) {
                entries.push({
                    key: key,
                    value: value
                });
            });
            return entries;
        },
        size: d3_map_size,
        empty: d3_map_empty,
        forEach: function(f) {
            for (var key in this) if (key.charCodeAt(0) === d3_map_prefixCode) f.call(this, key.substring(1), this[key]);
        }
    });
    var d3_map_prefix = "\x00", d3_map_prefixCode = d3_map_prefix.charCodeAt(0);
    function d3_map_has(key) {
        return d3_map_prefix + key in this;
    }
    function d3_map_remove(key) {
        key = d3_map_prefix + key;
        return key in this && delete this[key];
    }
    function d3_map_keys() {
        var keys = [];
        this.forEach(function(key) {
            keys.push(key);
        });
        return keys;
    }
    function d3_map_size() {
        var size = 0;
        for (var key in this) if (key.charCodeAt(0) === d3_map_prefixCode) ++size;
        return size;
    }
    function d3_map_empty() {
        for (var key in this) if (key.charCodeAt(0) === d3_map_prefixCode) return false;
        return true;
    }
    d3.nest = function() {
        var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
        function map(mapType, array, depth) {
            if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
            var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
            while (++i < n) {
                if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
                    values.push(object);
                } else {
                    valuesByKey.set(keyValue, [ object ]);
                }
            }
            if (mapType) {
                object = mapType();
                setter = function(keyValue, values) {
                    object.set(keyValue, map(mapType, values, depth));
                };
            } else {
                object = {};
                setter = function(keyValue, values) {
                    object[keyValue] = map(mapType, values, depth);
                };
            }
            valuesByKey.forEach(setter);
            return object;
        }
        function entries(map, depth) {
            if (depth >= keys.length) return map;
            var array = [], sortKey = sortKeys[depth++];
            map.forEach(function(key, keyMap) {
                array.push({
                    key: key,
                    values: entries(keyMap, depth)
                });
            });
            return sortKey ? array.sort(function(a, b) {
                return sortKey(a.key, b.key);
            }) : array;
        }
        nest.map = function(array, mapType) {
            return map(mapType, array, 0);
        };
        nest.entries = function(array) {
            return entries(map(d3.map, array, 0), 0);
        };
        nest.key = function(d) {
            keys.push(d);
            return nest;
        };
        nest.sortKeys = function(order) {
            sortKeys[keys.length - 1] = order;
            return nest;
        };
        nest.sortValues = function(order) {
            sortValues = order;
            return nest;
        };
        nest.rollup = function(f) {
            rollup = f;
            return nest;
        };
        return nest;
    };
    d3.set = function(array) {
        var set = new d3_Set();
        if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
        return set;
    };
    function d3_Set() {}
    d3_class(d3_Set, {
        has: d3_map_has,
        add: function(value) {
            this[d3_map_prefix + value] = true;
            return value;
        },
        remove: function(value) {
            value = d3_map_prefix + value;
            return value in this && delete this[value];
        },
        values: d3_map_keys,
        size: d3_map_size,
        empty: d3_map_empty,
        forEach: function(f) {
            for (var value in this) if (value.charCodeAt(0) === d3_map_prefixCode) f.call(this, value.substring(1));
        }
    });
    d3.behavior = {};
    d3.rebind = function(target, source) {
        var i = 1, n = arguments.length, method;
        while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
        return target;
    };
    function d3_rebind(target, source, method) {
        return function() {
            var value = method.apply(source, arguments);
            return value === source ? target : value;
        };
    }
    function d3_vendorSymbol(object, name) {
        if (name in object) return name;
        name = name.charAt(0).toUpperCase() + name.substring(1);
        for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
            var prefixName = d3_vendorPrefixes[i] + name;
            if (prefixName in object) return prefixName;
        }
    }
    var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
    function d3_noop() {}
    d3.dispatch = function() {
        var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
        while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
        return dispatch;
    };
    function d3_dispatch() {}
    d3_dispatch.prototype.on = function(type, listener) {
        var i = type.indexOf("."), name = "";
        if (i >= 0) {
            name = type.substring(i + 1);
            type = type.substring(0, i);
        }
        if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
        if (arguments.length === 2) {
            if (listener == null) for (type in this) {
                if (this.hasOwnProperty(type)) this[type].on(name, null);
            }
            return this;
        }
    };
    function d3_dispatch_event(dispatch) {
        var listeners = [], listenerByName = new d3_Map();
        function event() {
            var z = listeners, i = -1, n = z.length, l;
            while (++i < n) if (l = z[i].on) l.apply(this, arguments);
            return dispatch;
        }
        event.on = function(name, listener) {
            var l = listenerByName.get(name), i;
            if (arguments.length < 2) return l && l.on;
            if (l) {
                l.on = null;
                listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
                listenerByName.remove(name);
            }
            if (listener) listeners.push(listenerByName.set(name, {
                on: listener
            }));
            return dispatch;
        };
        return event;
    }
    d3.event = null;
    function d3_eventPreventDefault() {
        d3.event.preventDefault();
    }
    function d3_eventSource() {
        var e = d3.event, s;
        while (s = e.sourceEvent) e = s;
        return e;
    }
    function d3_eventDispatch(target) {
        var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
        while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
        dispatch.of = function(thiz, argumentz) {
            return function(e1) {
                try {
                    var e0 = e1.sourceEvent = d3.event;
                    e1.target = target;
                    d3.event = e1;
                    dispatch[e1.type].apply(thiz, argumentz);
                } finally {
                    d3.event = e0;
                }
            };
        };
        return dispatch;
    }
    d3.requote = function(s) {
        return s.replace(d3_requote_re, "\\$&");
    };
    var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
    var d3_subclass = {}.__proto__ ? function(object, prototype) {
        object.__proto__ = prototype;
    } : function(object, prototype) {
        for (var property in prototype) object[property] = prototype[property];
    };
    function d3_selection(groups) {
        d3_subclass(groups, d3_selectionPrototype);
        return groups;
    }
    var d3_select = function(s, n) {
        return n.querySelector(s);
    }, d3_selectAll = function(s, n) {
        return n.querySelectorAll(s);
    }, d3_selectMatcher = d3_documentElement[d3_vendorSymbol(d3_documentElement, "matchesSelector")], d3_selectMatches = function(n, s) {
        return d3_selectMatcher.call(n, s);
    };
    if (typeof Sizzle === "function") {
        d3_select = function(s, n) {
            return Sizzle(s, n)[0] || null;
        };
        d3_selectAll = function(s, n) {
            return Sizzle.uniqueSort(Sizzle(s, n));
        };
        d3_selectMatches = Sizzle.matchesSelector;
    }
    d3.selection = function() {
        return d3_selectionRoot;
    };
    var d3_selectionPrototype = d3.selection.prototype = [];
    d3_selectionPrototype.select = function(selector) {
        var subgroups = [], subgroup, subnode, group, node;
        selector = d3_selection_selector(selector);
        for (var j = -1, m = this.length; ++j < m; ) {
            subgroups.push(subgroup = []);
            subgroup.parentNode = (group = this[j]).parentNode;
            for (var i = -1, n = group.length; ++i < n; ) {
                if (node = group[i]) {
                    subgroup.push(subnode = selector.call(node, node.__data__, i, j));
                    if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
                } else {
                    subgroup.push(null);
                }
            }
        }
        return d3_selection(subgroups);
    };
    function d3_selection_selector(selector) {
        return typeof selector === "function" ? selector : function() {
            return d3_select(selector, this);
        };
    }
    d3_selectionPrototype.selectAll = function(selector) {
        var subgroups = [], subgroup, node;
        selector = d3_selection_selectorAll(selector);
        for (var j = -1, m = this.length; ++j < m; ) {
            for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
                if (node = group[i]) {
                    subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
                    subgroup.parentNode = node;
                }
            }
        }
        return d3_selection(subgroups);
    };
    function d3_selection_selectorAll(selector) {
        return typeof selector === "function" ? selector : function() {
            return d3_selectAll(selector, this);
        };
    }
    var d3_nsPrefix = {
        svg: "http://www.w3.org/2000/svg",
        xhtml: "http://www.w3.org/1999/xhtml",
        xlink: "http://www.w3.org/1999/xlink",
        xml: "http://www.w3.org/XML/1998/namespace",
        xmlns: "http://www.w3.org/2000/xmlns/"
    };
    d3.ns = {
        prefix: d3_nsPrefix,
        qualify: function(name) {
            var i = name.indexOf(":"), prefix = name;
            if (i >= 0) {
                prefix = name.substring(0, i);
                name = name.substring(i + 1);
            }
            return d3_nsPrefix.hasOwnProperty(prefix) ? {
                space: d3_nsPrefix[prefix],
                local: name
            } : name;
        }
    };
    d3_selectionPrototype.attr = function(name, value) {
        if (arguments.length < 2) {
            if (typeof name === "string") {
                var node = this.node();
                name = d3.ns.qualify(name);
                return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
            }
            for (value in name) this.each(d3_selection_attr(value, name[value]));
            return this;
        }
        return this.each(d3_selection_attr(name, value));
    };
    function d3_selection_attr(name, value) {
        name = d3.ns.qualify(name);
        function attrNull() {
            this.removeAttribute(name);
        }
        function attrNullNS() {
            this.removeAttributeNS(name.space, name.local);
        }
        function attrConstant() {
            this.setAttribute(name, value);
        }
        function attrConstantNS() {
            this.setAttributeNS(name.space, name.local, value);
        }
        function attrFunction() {
            var x = value.apply(this, arguments);
            if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
        }
        function attrFunctionNS() {
            var x = value.apply(this, arguments);
            if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
        }
        return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
    }
    function d3_collapse(s) {
        return s.trim().replace(/\s+/g, " ");
    }
    d3_selectionPrototype.classed = function(name, value) {
        if (arguments.length < 2) {
            if (typeof name === "string") {
                var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
                if (value = node.classList) {
                    while (++i < n) if (!value.contains(name[i])) return false;
                } else {
                    value = node.getAttribute("class");
                    while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
                }
                return true;
            }
            for (value in name) this.each(d3_selection_classed(value, name[value]));
            return this;
        }
        return this.each(d3_selection_classed(name, value));
    };
    function d3_selection_classedRe(name) {
        return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
    }
    function d3_selection_classes(name) {
        return name.trim().split(/^|\s+/);
    }
    function d3_selection_classed(name, value) {
        name = d3_selection_classes(name).map(d3_selection_classedName);
        var n = name.length;
        function classedConstant() {
            var i = -1;
            while (++i < n) name[i](this, value);
        }
        function classedFunction() {
            var i = -1, x = value.apply(this, arguments);
            while (++i < n) name[i](this, x);
        }
        return typeof value === "function" ? classedFunction : classedConstant;
    }
    function d3_selection_classedName(name) {
        var re = d3_selection_classedRe(name);
        return function(node, value) {
            if (c = node.classList) return value ? c.add(name) : c.remove(name);
            var c = node.getAttribute("class") || "";
            if (value) {
                re.lastIndex = 0;
                if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
            } else {
                node.setAttribute("class", d3_collapse(c.replace(re, " ")));
            }
        };
    }
    d3_selectionPrototype.style = function(name, value, priority) {
        var n = arguments.length;
        if (n < 3) {
            if (typeof name !== "string") {
                if (n < 2) value = "";
                for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
                return this;
            }
            if (n < 2) return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name);
            priority = "";
        }
        return this.each(d3_selection_style(name, value, priority));
    };
    function d3_selection_style(name, value, priority) {
        function styleNull() {
            this.style.removeProperty(name);
        }
        function styleConstant() {
            this.style.setProperty(name, value, priority);
        }
        function styleFunction() {
            var x = value.apply(this, arguments);
            if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
        }
        return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
    }
    d3_selectionPrototype.property = function(name, value) {
        if (arguments.length < 2) {
            if (typeof name === "string") return this.node()[name];
            for (value in name) this.each(d3_selection_property(value, name[value]));
            return this;
        }
        return this.each(d3_selection_property(name, value));
    };
    function d3_selection_property(name, value) {
        function propertyNull() {
            delete this[name];
        }
        function propertyConstant() {
            this[name] = value;
        }
        function propertyFunction() {
            var x = value.apply(this, arguments);
            if (x == null) delete this[name]; else this[name] = x;
        }
        return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
    }
    d3_selectionPrototype.text = function(value) {
        return arguments.length ? this.each(typeof value === "function" ? function() {
            var v = value.apply(this, arguments);
            this.textContent = v == null ? "" : v;
        } : value == null ? function() {
            this.textContent = "";
        } : function() {
            this.textContent = value;
        }) : this.node().textContent;
    };
    d3_selectionPrototype.html = function(value) {
        return arguments.length ? this.each(typeof value === "function" ? function() {
            var v = value.apply(this, arguments);
            this.innerHTML = v == null ? "" : v;
        } : value == null ? function() {
            this.innerHTML = "";
        } : function() {
            this.innerHTML = value;
        }) : this.node().innerHTML;
    };
    d3_selectionPrototype.append = function(name) {
        name = d3_selection_creator(name);
        return this.select(function() {
            return this.appendChild(name.apply(this, arguments));
        });
    };
    function d3_selection_creator(name) {
        return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? function() {
            return this.ownerDocument.createElementNS(name.space, name.local);
        } : function() {
            return this.ownerDocument.createElementNS(this.namespaceURI, name);
        };
    }
    d3_selectionPrototype.insert = function(name, before) {
        name = d3_selection_creator(name);
        before = d3_selection_selector(before);
        return this.select(function() {
            return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
        });
    };
    d3_selectionPrototype.remove = function() {
        return this.each(function() {
            var parent = this.parentNode;
            if (parent) parent.removeChild(this);
        });
    };
    d3_selectionPrototype.data = function(value, key) {
        var i = -1, n = this.length, group, node;
        if (!arguments.length) {
            value = new Array(n = (group = this[0]).length);
            while (++i < n) {
                if (node = group[i]) {
                    value[i] = node.__data__;
                }
            }
            return value;
        }
        function bind(group, groupData) {
            var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
            if (key) {
                var nodeByKeyValue = new d3_Map(), dataByKeyValue = new d3_Map(), keyValues = [], keyValue;
                for (i = -1; ++i < n; ) {
                    keyValue = key.call(node = group[i], node.__data__, i);
                    if (nodeByKeyValue.has(keyValue)) {
                        exitNodes[i] = node;
                    } else {
                        nodeByKeyValue.set(keyValue, node);
                    }
                    keyValues.push(keyValue);
                }
                for (i = -1; ++i < m; ) {
                    keyValue = key.call(groupData, nodeData = groupData[i], i);
                    if (node = nodeByKeyValue.get(keyValue)) {
                        updateNodes[i] = node;
                        node.__data__ = nodeData;
                    } else if (!dataByKeyValue.has(keyValue)) {
                        enterNodes[i] = d3_selection_dataNode(nodeData);
                    }
                    dataByKeyValue.set(keyValue, nodeData);
                    nodeByKeyValue.remove(keyValue);
                }
                for (i = -1; ++i < n; ) {
                    if (nodeByKeyValue.has(keyValues[i])) {
                        exitNodes[i] = group[i];
                    }
                }
            } else {
                for (i = -1; ++i < n0; ) {
                    node = group[i];
                    nodeData = groupData[i];
                    if (node) {
                        node.__data__ = nodeData;
                        updateNodes[i] = node;
                    } else {
                        enterNodes[i] = d3_selection_dataNode(nodeData);
                    }
                }
                for (;i < m; ++i) {
                    enterNodes[i] = d3_selection_dataNode(groupData[i]);
                }
                for (;i < n; ++i) {
                    exitNodes[i] = group[i];
                }
            }
            enterNodes.update = updateNodes;
            enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
            enter.push(enterNodes);
            update.push(updateNodes);
            exit.push(exitNodes);
        }
        var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
        if (typeof value === "function") {
            while (++i < n) {
                bind(group = this[i], value.call(group, group.parentNode.__data__, i));
            }
        } else {
            while (++i < n) {
                bind(group = this[i], value);
            }
        }
        update.enter = function() {
            return enter;
        };
        update.exit = function() {
            return exit;
        };
        return update;
    };
    function d3_selection_dataNode(data) {
        return {
            __data__: data
        };
    }
    d3_selectionPrototype.datum = function(value) {
        return arguments.length ? this.property("__data__", value) : this.property("__data__");
    };
    d3_selectionPrototype.filter = function(filter) {
        var subgroups = [], subgroup, group, node;
        if (typeof filter !== "function") filter = d3_selection_filter(filter);
        for (var j = 0, m = this.length; j < m; j++) {
            subgroups.push(subgroup = []);
            subgroup.parentNode = (group = this[j]).parentNode;
            for (var i = 0, n = group.length; i < n; i++) {
                if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
                    subgroup.push(node);
                }
            }
        }
        return d3_selection(subgroups);
    };
    function d3_selection_filter(selector) {
        return function() {
            return d3_selectMatches(this, selector);
        };
    }
    d3_selectionPrototype.order = function() {
        for (var j = -1, m = this.length; ++j < m; ) {
            for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
                if (node = group[i]) {
                    if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
                    next = node;
                }
            }
        }
        return this;
    };
    d3_selectionPrototype.sort = function(comparator) {
        comparator = d3_selection_sortComparator.apply(this, arguments);
        for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
        return this.order();
    };
    function d3_selection_sortComparator(comparator) {
        if (!arguments.length) comparator = d3.ascending;
        return function(a, b) {
            return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
        };
    }
    d3_selectionPrototype.each = function(callback) {
        return d3_selection_each(this, function(node, i, j) {
            callback.call(node, node.__data__, i, j);
        });
    };
    function d3_selection_each(groups, callback) {
        for (var j = 0, m = groups.length; j < m; j++) {
            for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
                if (node = group[i]) callback(node, i, j);
            }
        }
        return groups;
    }
    d3_selectionPrototype.call = function(callback) {
        var args = d3_array(arguments);
        callback.apply(args[0] = this, args);
        return this;
    };
    d3_selectionPrototype.empty = function() {
        return !this.node();
    };
    d3_selectionPrototype.node = function() {
        for (var j = 0, m = this.length; j < m; j++) {
            for (var group = this[j], i = 0, n = group.length; i < n; i++) {
                var node = group[i];
                if (node) return node;
            }
        }
        return null;
    };
    d3_selectionPrototype.size = function() {
        var n = 0;
        this.each(function() {
            ++n;
        });
        return n;
    };
    function d3_selection_enter(selection) {
        d3_subclass(selection, d3_selection_enterPrototype);
        return selection;
    }
    var d3_selection_enterPrototype = [];
    d3.selection.enter = d3_selection_enter;
    d3.selection.enter.prototype = d3_selection_enterPrototype;
    d3_selection_enterPrototype.append = d3_selectionPrototype.append;
    d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
    d3_selection_enterPrototype.node = d3_selectionPrototype.node;
    d3_selection_enterPrototype.call = d3_selectionPrototype.call;
    d3_selection_enterPrototype.size = d3_selectionPrototype.size;
    d3_selection_enterPrototype.select = function(selector) {
        var subgroups = [], subgroup, subnode, upgroup, group, node;
        for (var j = -1, m = this.length; ++j < m; ) {
            upgroup = (group = this[j]).update;
            subgroups.push(subgroup = []);
            subgroup.parentNode = group.parentNode;
            for (var i = -1, n = group.length; ++i < n; ) {
                if (node = group[i]) {
                    subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
                    subnode.__data__ = node.__data__;
                } else {
                    subgroup.push(null);
                }
            }
        }
        return d3_selection(subgroups);
    };
    d3_selection_enterPrototype.insert = function(name, before) {
        if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
        return d3_selectionPrototype.insert.call(this, name, before);
    };
    function d3_selection_enterInsertBefore(enter) {
        var i0, j0;
        return function(d, i, j) {
            var group = enter[j].update, n = group.length, node;
            if (j != j0) j0 = j, i0 = 0;
            if (i >= i0) i0 = i + 1;
            while (!(node = group[i0]) && ++i0 < n) ;
            return node;
        };
    }
    d3_selectionPrototype.transition = function() {
        var id = d3_transitionInheritId || ++d3_transitionId, subgroups = [], subgroup, node, transition = d3_transitionInherit || {
            time: Date.now(),
            ease: d3_ease_cubicInOut,
            delay: 0,
            duration: 250
        };
        for (var j = -1, m = this.length; ++j < m; ) {
            subgroups.push(subgroup = []);
            for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
                if (node = group[i]) d3_transitionNode(node, i, id, transition);
                subgroup.push(node);
            }
        }
        return d3_transition(subgroups, id);
    };
    d3_selectionPrototype.interrupt = function() {
        return this.each(d3_selection_interrupt);
    };
    function d3_selection_interrupt() {
        var lock = this.__transition__;
        if (lock) ++lock.active;
    }
    d3.select = function(node) {
        var group = [ typeof node === "string" ? d3_select(node, d3_document) : node ];
        group.parentNode = d3_documentElement;
        return d3_selection([ group ]);
    };
    d3.selectAll = function(nodes) {
        var group = d3_array(typeof nodes === "string" ? d3_selectAll(nodes, d3_document) : nodes);
        group.parentNode = d3_documentElement;
        return d3_selection([ group ]);
    };
    var d3_selectionRoot = d3.select(d3_documentElement);
    d3_selectionPrototype.on = function(type, listener, capture) {
        var n = arguments.length;
        if (n < 3) {
            if (typeof type !== "string") {
                if (n < 2) listener = false;
                for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
                return this;
            }
            if (n < 2) return (n = this.node()["__on" + type]) && n._;
            capture = false;
        }
        return this.each(d3_selection_on(type, listener, capture));
    };
    function d3_selection_on(type, listener, capture) {
        var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
        if (i > 0) type = type.substring(0, i);
        var filter = d3_selection_onFilters.get(type);
        if (filter) type = filter, wrap = d3_selection_onFilter;
        function onRemove() {
            var l = this[name];
            if (l) {
                this.removeEventListener(type, l, l.$);
                delete this[name];
            }
        }
        function onAdd() {
            var l = wrap(listener, d3_array(arguments));
            onRemove.call(this);
            this.addEventListener(type, this[name] = l, l.$ = capture);
            l._ = listener;
        }
        function removeAll() {
            var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
            for (var name in this) {
                if (match = name.match(re)) {
                    var l = this[name];
                    this.removeEventListener(match[1], l, l.$);
                    delete this[name];
                }
            }
        }
        return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
    }
    var d3_selection_onFilters = d3.map({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    });
    d3_selection_onFilters.forEach(function(k) {
        if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
    });
    function d3_selection_onListener(listener, argumentz) {
        return function(e) {
            var o = d3.event;
            d3.event = e;
            argumentz[0] = this.__data__;
            try {
                listener.apply(this, argumentz);
            } finally {
                d3.event = o;
            }
        };
    }
    function d3_selection_onFilter(listener, argumentz) {
        var l = d3_selection_onListener(listener, argumentz);
        return function(e) {
            var target = this, related = e.relatedTarget;
            if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
                l.call(target, e);
            }
        };
    }
    var d3_event_dragSelect = "onselectstart" in d3_document ? null : d3_vendorSymbol(d3_documentElement.style, "userSelect"), d3_event_dragId = 0;
    function d3_event_dragSuppress() {
        var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
        if (d3_event_dragSelect) {
            var style = d3_documentElement.style, select = style[d3_event_dragSelect];
            style[d3_event_dragSelect] = "none";
        }
        return function(suppressClick) {
            w.on(name, null);
            if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
            if (suppressClick) {
                function off() {
                    w.on(click, null);
                }
                w.on(click, function() {
                    d3_eventPreventDefault();
                    off();
                }, true);
                setTimeout(off, 0);
            }
        };
    }
    d3.mouse = function(container) {
        return d3_mousePoint(container, d3_eventSource());
    };
    var d3_mouse_bug44083 = /WebKit/.test(d3_window.navigator.userAgent) ? -1 : 0;
    function d3_mousePoint(container, e) {
        if (e.changedTouches) e = e.changedTouches[0];
        var svg = container.ownerSVGElement || container;
        if (svg.createSVGPoint) {
            var point = svg.createSVGPoint();
            if (d3_mouse_bug44083 < 0 && (d3_window.scrollX || d3_window.scrollY)) {
                svg = d3.select("body").append("svg").style({
                    position: "absolute",
                    top: 0,
                    left: 0,
                    margin: 0,
                    padding: 0,
                    border: "none"
                }, "important");
                var ctm = svg[0][0].getScreenCTM();
                d3_mouse_bug44083 = !(ctm.f || ctm.e);
                svg.remove();
            }
            if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX,
                point.y = e.clientY;
            point = point.matrixTransform(container.getScreenCTM().inverse());
            return [ point.x, point.y ];
        }
        var rect = container.getBoundingClientRect();
        return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
    }
    d3.touches = function(container, touches) {
        if (arguments.length < 2) touches = d3_eventSource().touches;
        return touches ? d3_array(touches).map(function(touch) {
            var point = d3_mousePoint(container, touch);
            point.identifier = touch.identifier;
            return point;
        }) : [];
    };
    d3.behavior.drag = function() {
        var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, "mousemove", "mouseup"), touchstart = dragstart(touchid, touchposition, "touchmove", "touchend");
        function drag() {
            this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
        }
        function touchid() {
            return d3.event.changedTouches[0].identifier;
        }
        function touchposition(parent, id) {
            return d3.touches(parent).filter(function(p) {
                return p.identifier === id;
            })[0];
        }
        function dragstart(id, position, move, end) {
            return function() {
                var target = this, parent = target.parentNode, event_ = event.of(target, arguments), eventTarget = d3.event.target, eventId = id(), drag = eventId == null ? "drag" : "drag-" + eventId, origin_ = position(parent, eventId), dragged = 0, offset, w = d3.select(d3_window).on(move + "." + drag, moved).on(end + "." + drag, ended), dragRestore = d3_event_dragSuppress();
                if (origin) {
                    offset = origin.apply(target, arguments);
                    offset = [ offset.x - origin_[0], offset.y - origin_[1] ];
                } else {
                    offset = [ 0, 0 ];
                }
                event_({
                    type: "dragstart"
                });
                function moved() {
                    var p = position(parent, eventId), dx = p[0] - origin_[0], dy = p[1] - origin_[1];
                    dragged |= dx | dy;
                    origin_ = p;
                    event_({
                        type: "drag",
                        x: p[0] + offset[0],
                        y: p[1] + offset[1],
                        dx: dx,
                        dy: dy
                    });
                }
                function ended() {
                    w.on(move + "." + drag, null).on(end + "." + drag, null);
                    dragRestore(dragged && d3.event.target === eventTarget);
                    event_({
                        type: "dragend"
                    });
                }
            };
        }
        drag.origin = function(x) {
            if (!arguments.length) return origin;
            origin = x;
            return drag;
        };
        return d3.rebind(drag, event, "on");
    };
    var π = Math.PI, τ = 2 * π, halfπ = π / 2, ε = 1e-6, ε2 = ε * ε, d3_radians = π / 180, d3_degrees = 180 / π;
    function d3_sgn(x) {
        return x > 0 ? 1 : x < 0 ? -1 : 0;
    }
    function d3_cross2d(a, b, c) {
        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
    }
    function d3_acos(x) {
        return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
    }
    function d3_asin(x) {
        return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
    }
    function d3_sinh(x) {
        return ((x = Math.exp(x)) - 1 / x) / 2;
    }
    function d3_cosh(x) {
        return ((x = Math.exp(x)) + 1 / x) / 2;
    }
    function d3_tanh(x) {
        return ((x = Math.exp(2 * x)) - 1) / (x + 1);
    }
    function d3_haversin(x) {
        return (x = Math.sin(x / 2)) * x;
    }
    var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
    d3.interpolateZoom = function(p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];
        var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;
        function interpolate(t) {
            var s = t * S;
            if (dr) {
                var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
                return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
            }
            return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s) ];
        }
        interpolate.duration = S * 1e3;
        return interpolate;
    };
    d3.behavior.zoom = function() {
        var view = {
            x: 0,
            y: 0,
            k: 1
        }, translate0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
        function zoom(g) {
            g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on(mousemove, mousewheelreset).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
        }
        zoom.event = function(g) {
            g.each(function() {
                var event_ = event.of(this, arguments), view1 = view;
                if (d3_transitionInheritId) {
                    d3.select(this).transition().each("start.zoom", function() {
                        view = this.__chart__ || {
                            x: 0,
                            y: 0,
                            k: 1
                        };
                        zoomstarted(event_);
                    }).tween("zoom:zoom", function() {
                            var dx = size[0], dy = size[1], cx = dx / 2, cy = dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
                            return function(t) {
                                var l = i(t), k = dx / l[2];
                                this.__chart__ = view = {
                                    x: cx - l[0] * k,
                                    y: cy - l[1] * k,
                                    k: k
                                };
                                zoomed(event_);
                            };
                        }).each("end.zoom", function() {
                            zoomended(event_);
                        });
                } else {
                    this.__chart__ = view;
                    zoomstarted(event_);
                    zoomed(event_);
                    zoomended(event_);
                }
            });
        };
        zoom.translate = function(_) {
            if (!arguments.length) return [ view.x, view.y ];
            view = {
                x: +_[0],
                y: +_[1],
                k: view.k
            };
            rescale();
            return zoom;
        };
        zoom.scale = function(_) {
            if (!arguments.length) return view.k;
            view = {
                x: view.x,
                y: view.y,
                k: +_
            };
            rescale();
            return zoom;
        };
        zoom.scaleExtent = function(_) {
            if (!arguments.length) return scaleExtent;
            scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
            return zoom;
        };
        zoom.center = function(_) {
            if (!arguments.length) return center;
            center = _ && [ +_[0], +_[1] ];
            return zoom;
        };
        zoom.size = function(_) {
            if (!arguments.length) return size;
            size = _ && [ +_[0], +_[1] ];
            return zoom;
        };
        zoom.x = function(z) {
            if (!arguments.length) return x1;
            x1 = z;
            x0 = z.copy();
            view = {
                x: 0,
                y: 0,
                k: 1
            };
            return zoom;
        };
        zoom.y = function(z) {
            if (!arguments.length) return y1;
            y1 = z;
            y0 = z.copy();
            view = {
                x: 0,
                y: 0,
                k: 1
            };
            return zoom;
        };
        function location(p) {
            return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
        }
        function point(l) {
            return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
        }
        function scaleTo(s) {
            view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
        }
        function translateTo(p, l) {
            l = point(l);
            view.x += p[0] - l[0];
            view.y += p[1] - l[1];
        }
        function rescale() {
            if (x1) x1.domain(x0.range().map(function(x) {
                return (x - view.x) / view.k;
            }).map(x0.invert));
            if (y1) y1.domain(y0.range().map(function(y) {
                return (y - view.y) / view.k;
            }).map(y0.invert));
        }
        function zoomstarted(event) {
            event({
                type: "zoomstart"
            });
        }
        function zoomed(event) {
            rescale();
            event({
                type: "zoom",
                scale: view.k,
                translate: [ view.x, view.y ]
            });
        }
        function zoomended(event) {
            event({
                type: "zoomend"
            });
        }
        function mousedowned() {
            var target = this, event_ = event.of(target, arguments), eventTarget = d3.event.target, dragged = 0, w = d3.select(d3_window).on(mousemove, moved).on(mouseup, ended), l = location(d3.mouse(target)), dragRestore = d3_event_dragSuppress();
            d3_selection_interrupt.call(target);
            zoomstarted(event_);
            function moved() {
                dragged = 1;
                translateTo(d3.mouse(target), l);
                zoomed(event_);
            }
            function ended() {
                w.on(mousemove, d3_window === target ? mousewheelreset : null).on(mouseup, null);
                dragRestore(dragged && d3.event.target === eventTarget);
                zoomended(event_);
            }
        }
        function touchstarted() {
            var target = this, event_ = event.of(target, arguments), locations0 = {}, distance0 = 0, scale0, eventId = d3.event.changedTouches[0].identifier, touchmove = "touchmove.zoom-" + eventId, touchend = "touchend.zoom-" + eventId, w = d3.select(d3_window).on(touchmove, moved).on(touchend, ended), t = d3.select(target).on(mousedown, null).on(touchstart, started), dragRestore = d3_event_dragSuppress();
            d3_selection_interrupt.call(target);
            started();
            zoomstarted(event_);
            function relocate() {
                var touches = d3.touches(target);
                scale0 = view.k;
                touches.forEach(function(t) {
                    if (t.identifier in locations0) locations0[t.identifier] = location(t);
                });
                return touches;
            }
            function started() {
                var changed = d3.event.changedTouches;
                for (var i = 0, n = changed.length; i < n; ++i) {
                    locations0[changed[i].identifier] = null;
                }
                var touches = relocate(), now = Date.now();
                if (touches.length === 1) {
                    if (now - touchtime < 500) {
                        var p = touches[0], l = locations0[p.identifier];
                        scaleTo(view.k * 2);
                        translateTo(p, l);
                        d3_eventPreventDefault();
                        zoomed(event_);
                    }
                    touchtime = now;
                } else if (touches.length > 1) {
                    var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
                    distance0 = dx * dx + dy * dy;
                }
            }
            function moved() {
                var touches = d3.touches(target), p0, l0, p1, l1;
                for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
                    p1 = touches[i];
                    if (l1 = locations0[p1.identifier]) {
                        if (l0) break;
                        p0 = p1, l0 = l1;
                    }
                }
                if (l1) {
                    var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
                    p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
                    l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
                    scaleTo(scale1 * scale0);
                }
                touchtime = null;
                translateTo(p0, l0);
                zoomed(event_);
            }
            function ended() {
                if (d3.event.touches.length) {
                    var changed = d3.event.changedTouches;
                    for (var i = 0, n = changed.length; i < n; ++i) {
                        delete locations0[changed[i].identifier];
                    }
                    for (var identifier in locations0) {
                        return void relocate();
                    }
                }
                w.on(touchmove, null).on(touchend, null);
                t.on(mousedown, mousedowned).on(touchstart, touchstarted);
                dragRestore();
                zoomended(event_);
            }
        }
        function mousewheeled() {
            var event_ = event.of(this, arguments);
            if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this),
                zoomstarted(event_);
            mousewheelTimer = setTimeout(function() {
                mousewheelTimer = null;
                zoomended(event_);
            }, 50);
            d3_eventPreventDefault();
            var point = center || d3.mouse(this);
            if (!translate0) translate0 = location(point);
            scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
            translateTo(point, translate0);
            zoomed(event_);
        }
        function mousewheelreset() {
            translate0 = null;
        }
        function dblclicked() {
            var event_ = event.of(this, arguments), p = d3.mouse(this), l = location(p), k = Math.log(view.k) / Math.LN2;
            zoomstarted(event_);
            scaleTo(Math.pow(2, d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1));
            translateTo(p, l);
            zoomed(event_);
            zoomended(event_);
        }
        return d3.rebind(zoom, event, "on");
    };
    var d3_behavior_zoomInfinity = [ 0, Infinity ];
    var d3_behavior_zoomDelta, d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
    }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return d3.event.wheelDelta;
    }, "mousewheel") : (d3_behavior_zoomDelta = function() {
        return -d3.event.detail;
    }, "MozMousePixelScroll");
    function d3_Color() {}
    d3_Color.prototype.toString = function() {
        return this.rgb() + "";
    };
    d3.hsl = function(h, s, l) {
        return arguments.length === 1 ? h instanceof d3_Hsl ? d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : d3_hsl(+h, +s, +l);
    };
    function d3_hsl(h, s, l) {
        return new d3_Hsl(h, s, l);
    }
    function d3_Hsl(h, s, l) {
        this.h = h;
        this.s = s;
        this.l = l;
    }
    var d3_hslPrototype = d3_Hsl.prototype = new d3_Color();
    d3_hslPrototype.brighter = function(k) {
        k = Math.pow(.7, arguments.length ? k : 1);
        return d3_hsl(this.h, this.s, this.l / k);
    };
    d3_hslPrototype.darker = function(k) {
        k = Math.pow(.7, arguments.length ? k : 1);
        return d3_hsl(this.h, this.s, k * this.l);
    };
    d3_hslPrototype.rgb = function() {
        return d3_hsl_rgb(this.h, this.s, this.l);
    };
    function d3_hsl_rgb(h, s, l) {
        var m1, m2;
        h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
        s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
        l = l < 0 ? 0 : l > 1 ? 1 : l;
        m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
        m1 = 2 * l - m2;
        function v(h) {
            if (h > 360) h -= 360; else if (h < 0) h += 360;
            if (h < 60) return m1 + (m2 - m1) * h / 60;
            if (h < 180) return m2;
            if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
            return m1;
        }
        function vv(h) {
            return Math.round(v(h) * 255);
        }
        return d3_rgb(vv(h + 120), vv(h), vv(h - 120));
    }
    d3.hcl = function(h, c, l) {
        return arguments.length === 1 ? h instanceof d3_Hcl ? d3_hcl(h.h, h.c, h.l) : h instanceof d3_Lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : d3_hcl(+h, +c, +l);
    };
    function d3_hcl(h, c, l) {
        return new d3_Hcl(h, c, l);
    }
    function d3_Hcl(h, c, l) {
        this.h = h;
        this.c = c;
        this.l = l;
    }
    var d3_hclPrototype = d3_Hcl.prototype = new d3_Color();
    d3_hclPrototype.brighter = function(k) {
        return d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
    };
    d3_hclPrototype.darker = function(k) {
        return d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
    };
    d3_hclPrototype.rgb = function() {
        return d3_hcl_lab(this.h, this.c, this.l).rgb();
    };
    function d3_hcl_lab(h, c, l) {
        if (isNaN(h)) h = 0;
        if (isNaN(c)) c = 0;
        return d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
    }
    d3.lab = function(l, a, b) {
        return arguments.length === 1 ? l instanceof d3_Lab ? d3_lab(l.l, l.a, l.b) : l instanceof d3_Hcl ? d3_hcl_lab(l.l, l.c, l.h) : d3_rgb_lab((l = d3.rgb(l)).r, l.g, l.b) : d3_lab(+l, +a, +b);
    };
    function d3_lab(l, a, b) {
        return new d3_Lab(l, a, b);
    }
    function d3_Lab(l, a, b) {
        this.l = l;
        this.a = a;
        this.b = b;
    }
    var d3_lab_K = 18;
    var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
    var d3_labPrototype = d3_Lab.prototype = new d3_Color();
    d3_labPrototype.brighter = function(k) {
        return d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
    };
    d3_labPrototype.darker = function(k) {
        return d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
    };
    d3_labPrototype.rgb = function() {
        return d3_lab_rgb(this.l, this.a, this.b);
    };
    function d3_lab_rgb(l, a, b) {
        var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
        x = d3_lab_xyz(x) * d3_lab_X;
        y = d3_lab_xyz(y) * d3_lab_Y;
        z = d3_lab_xyz(z) * d3_lab_Z;
        return d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
    }
    function d3_lab_hcl(l, a, b) {
        return l > 0 ? d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : d3_hcl(NaN, NaN, l);
    }
    function d3_lab_xyz(x) {
        return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
    }
    function d3_xyz_lab(x) {
        return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
    }
    function d3_xyz_rgb(r) {
        return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
    }
    d3.rgb = function(r, g, b) {
        return arguments.length === 1 ? r instanceof d3_Rgb ? d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : d3_rgb(~~r, ~~g, ~~b);
    };
    function d3_rgbNumber(value) {
        return d3_rgb(value >> 16, value >> 8 & 255, value & 255);
    }
    function d3_rgbString(value) {
        return d3_rgbNumber(value) + "";
    }
    function d3_rgb(r, g, b) {
        return new d3_Rgb(r, g, b);
    }
    function d3_Rgb(r, g, b) {
        this.r = r;
        this.g = g;
        this.b = b;
    }
    var d3_rgbPrototype = d3_Rgb.prototype = new d3_Color();
    d3_rgbPrototype.brighter = function(k) {
        k = Math.pow(.7, arguments.length ? k : 1);
        var r = this.r, g = this.g, b = this.b, i = 30;
        if (!r && !g && !b) return d3_rgb(i, i, i);
        if (r && r < i) r = i;
        if (g && g < i) g = i;
        if (b && b < i) b = i;
        return d3_rgb(Math.min(255, ~~(r / k)), Math.min(255, ~~(g / k)), Math.min(255, ~~(b / k)));
    };
    d3_rgbPrototype.darker = function(k) {
        k = Math.pow(.7, arguments.length ? k : 1);
        return d3_rgb(~~(k * this.r), ~~(k * this.g), ~~(k * this.b));
    };
    d3_rgbPrototype.hsl = function() {
        return d3_rgb_hsl(this.r, this.g, this.b);
    };
    d3_rgbPrototype.toString = function() {
        return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
    };
    function d3_rgb_hex(v) {
        return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
    }
    function d3_rgb_parse(format, rgb, hsl) {
        var r = 0, g = 0, b = 0, m1, m2, name;
        m1 = /([a-z]+)\((.*)\)/i.exec(format);
        if (m1) {
            m2 = m1[2].split(",");
            switch (m1[1]) {
                case "hsl":
                {
                    return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
                }

                case "rgb":
                {
                    return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
                }
            }
        }
        if (name = d3_rgb_names.get(format)) return rgb(name.r, name.g, name.b);
        if (format != null && format.charAt(0) === "#") {
            if (format.length === 4) {
                r = format.charAt(1);
                r += r;
                g = format.charAt(2);
                g += g;
                b = format.charAt(3);
                b += b;
            } else if (format.length === 7) {
                r = format.substring(1, 3);
                g = format.substring(3, 5);
                b = format.substring(5, 7);
            }
            r = parseInt(r, 16);
            g = parseInt(g, 16);
            b = parseInt(b, 16);
        }
        return rgb(r, g, b);
    }
    function d3_rgb_hsl(r, g, b) {
        var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
        if (d) {
            s = l < .5 ? d / (max + min) : d / (2 - max - min);
            if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
            h *= 60;
        } else {
            h = NaN;
            s = l > 0 && l < 1 ? 0 : h;
        }
        return d3_hsl(h, s, l);
    }
    function d3_rgb_lab(r, g, b) {
        r = d3_rgb_xyz(r);
        g = d3_rgb_xyz(g);
        b = d3_rgb_xyz(b);
        var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
        return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
    }
    function d3_rgb_xyz(r) {
        return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
    }
    function d3_rgb_parseNumber(c) {
        var f = parseFloat(c);
        return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
    }
    var d3_rgb_names = d3.map({
        aliceblue: 15792383,
        antiquewhite: 16444375,
        aqua: 65535,
        aquamarine: 8388564,
        azure: 15794175,
        beige: 16119260,
        bisque: 16770244,
        black: 0,
        blanchedalmond: 16772045,
        blue: 255,
        blueviolet: 9055202,
        brown: 10824234,
        burlywood: 14596231,
        cadetblue: 6266528,
        chartreuse: 8388352,
        chocolate: 13789470,
        coral: 16744272,
        cornflowerblue: 6591981,
        cornsilk: 16775388,
        crimson: 14423100,
        cyan: 65535,
        darkblue: 139,
        darkcyan: 35723,
        darkgoldenrod: 12092939,
        darkgray: 11119017,
        darkgreen: 25600,
        darkgrey: 11119017,
        darkkhaki: 12433259,
        darkmagenta: 9109643,
        darkolivegreen: 5597999,
        darkorange: 16747520,
        darkorchid: 10040012,
        darkred: 9109504,
        darksalmon: 15308410,
        darkseagreen: 9419919,
        darkslateblue: 4734347,
        darkslategray: 3100495,
        darkslategrey: 3100495,
        darkturquoise: 52945,
        darkviolet: 9699539,
        deeppink: 16716947,
        deepskyblue: 49151,
        dimgray: 6908265,
        dimgrey: 6908265,
        dodgerblue: 2003199,
        firebrick: 11674146,
        floralwhite: 16775920,
        forestgreen: 2263842,
        fuchsia: 16711935,
        gainsboro: 14474460,
        ghostwhite: 16316671,
        gold: 16766720,
        goldenrod: 14329120,
        gray: 8421504,
        green: 32768,
        greenyellow: 11403055,
        grey: 8421504,
        honeydew: 15794160,
        hotpink: 16738740,
        indianred: 13458524,
        indigo: 4915330,
        ivory: 16777200,
        khaki: 15787660,
        lavender: 15132410,
        lavenderblush: 16773365,
        lawngreen: 8190976,
        lemonchiffon: 16775885,
        lightblue: 11393254,
        lightcoral: 15761536,
        lightcyan: 14745599,
        lightgoldenrodyellow: 16448210,
        lightgray: 13882323,
        lightgreen: 9498256,
        lightgrey: 13882323,
        lightpink: 16758465,
        lightsalmon: 16752762,
        lightseagreen: 2142890,
        lightskyblue: 8900346,
        lightslategray: 7833753,
        lightslategrey: 7833753,
        lightsteelblue: 11584734,
        lightyellow: 16777184,
        lime: 65280,
        limegreen: 3329330,
        linen: 16445670,
        magenta: 16711935,
        maroon: 8388608,
        mediumaquamarine: 6737322,
        mediumblue: 205,
        mediumorchid: 12211667,
        mediumpurple: 9662683,
        mediumseagreen: 3978097,
        mediumslateblue: 8087790,
        mediumspringgreen: 64154,
        mediumturquoise: 4772300,
        mediumvioletred: 13047173,
        midnightblue: 1644912,
        mintcream: 16121850,
        mistyrose: 16770273,
        moccasin: 16770229,
        navajowhite: 16768685,
        navy: 128,
        oldlace: 16643558,
        olive: 8421376,
        olivedrab: 7048739,
        orange: 16753920,
        orangered: 16729344,
        orchid: 14315734,
        palegoldenrod: 15657130,
        palegreen: 10025880,
        paleturquoise: 11529966,
        palevioletred: 14381203,
        papayawhip: 16773077,
        peachpuff: 16767673,
        peru: 13468991,
        pink: 16761035,
        plum: 14524637,
        powderblue: 11591910,
        purple: 8388736,
        red: 16711680,
        rosybrown: 12357519,
        royalblue: 4286945,
        saddlebrown: 9127187,
        salmon: 16416882,
        sandybrown: 16032864,
        seagreen: 3050327,
        seashell: 16774638,
        sienna: 10506797,
        silver: 12632256,
        skyblue: 8900331,
        slateblue: 6970061,
        slategray: 7372944,
        slategrey: 7372944,
        snow: 16775930,
        springgreen: 65407,
        steelblue: 4620980,
        tan: 13808780,
        teal: 32896,
        thistle: 14204888,
        tomato: 16737095,
        turquoise: 4251856,
        violet: 15631086,
        wheat: 16113331,
        white: 16777215,
        whitesmoke: 16119285,
        yellow: 16776960,
        yellowgreen: 10145074
    });
    d3_rgb_names.forEach(function(key, value) {
        d3_rgb_names.set(key, d3_rgbNumber(value));
    });
    function d3_functor(v) {
        return typeof v === "function" ? v : function() {
            return v;
        };
    }
    d3.functor = d3_functor;
    function d3_identity(d) {
        return d;
    }
    d3.xhr = d3_xhrType(d3_identity);
    function d3_xhrType(response) {
        return function(url, mimeType, callback) {
            if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType,
                mimeType = null;
            return d3_xhr(url, mimeType, response, callback);
        };
    }
    function d3_xhr(url, mimeType, response, callback) {
        var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
        if (d3_window.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
        "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
            request.readyState > 3 && respond();
        };
        function respond() {
            var status = request.status, result;
            if (!status && request.responseText || status >= 200 && status < 300 || status === 304) {
                try {
                    result = response.call(xhr, request);
                } catch (e) {
                    dispatch.error.call(xhr, e);
                    return;
                }
                dispatch.load.call(xhr, result);
            } else {
                dispatch.error.call(xhr, request);
            }
        }
        request.onprogress = function(event) {
            var o = d3.event;
            d3.event = event;
            try {
                dispatch.progress.call(xhr, request);
            } finally {
                d3.event = o;
            }
        };
        xhr.header = function(name, value) {
            name = (name + "").toLowerCase();
            if (arguments.length < 2) return headers[name];
            if (value == null) delete headers[name]; else headers[name] = value + "";
            return xhr;
        };
        xhr.mimeType = function(value) {
            if (!arguments.length) return mimeType;
            mimeType = value == null ? null : value + "";
            return xhr;
        };
        xhr.responseType = function(value) {
            if (!arguments.length) return responseType;
            responseType = value;
            return xhr;
        };
        xhr.response = function(value) {
            response = value;
            return xhr;
        };
        [ "get", "post" ].forEach(function(method) {
            xhr[method] = function() {
                return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
            };
        });
        xhr.send = function(method, data, callback) {
            if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
            request.open(method, url, true);
            if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
            if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
            if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
            if (responseType != null) request.responseType = responseType;
            if (callback != null) xhr.on("error", callback).on("load", function(request) {
                callback(null, request);
            });
            dispatch.beforesend.call(xhr, request);
            request.send(data == null ? null : data);
            return xhr;
        };
        xhr.abort = function() {
            request.abort();
            return xhr;
        };
        d3.rebind(xhr, dispatch, "on");
        return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
    }
    function d3_xhr_fixCallback(callback) {
        return callback.length === 1 ? function(error, request) {
            callback(error == null ? request : null);
        } : callback;
    }
    d3.dsv = function(delimiter, mimeType) {
        var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
        function dsv(url, row, callback) {
            if (arguments.length < 3) callback = row, row = null;
            var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
            xhr.row = function(_) {
                return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
            };
            return xhr;
        }
        function response(request) {
            return dsv.parse(request.responseText);
        }
        function typedResponse(f) {
            return function(request) {
                return dsv.parse(request.responseText, f);
            };
        }
        dsv.parse = function(text, f) {
            var o;
            return dsv.parseRows(text, function(row, i) {
                if (o) return o(row, i - 1);
                var a = new Function("d", "return {" + row.map(function(name, i) {
                    return JSON.stringify(name) + ": d[" + i + "]";
                }).join(",") + "}");
                o = f ? function(row, i) {
                    return f(a(row), i);
                } : a;
            });
        };
        dsv.parseRows = function(text, f) {
            var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
            function token() {
                if (I >= N) return EOF;
                if (eol) return eol = false, EOL;
                var j = I;
                if (text.charCodeAt(j) === 34) {
                    var i = j;
                    while (i++ < N) {
                        if (text.charCodeAt(i) === 34) {
                            if (text.charCodeAt(i + 1) !== 34) break;
                            ++i;
                        }
                    }
                    I = i + 2;
                    var c = text.charCodeAt(i + 1);
                    if (c === 13) {
                        eol = true;
                        if (text.charCodeAt(i + 2) === 10) ++I;
                    } else if (c === 10) {
                        eol = true;
                    }
                    return text.substring(j + 1, i).replace(/""/g, '"');
                }
                while (I < N) {
                    var c = text.charCodeAt(I++), k = 1;
                    if (c === 10) eol = true; else if (c === 13) {
                        eol = true;
                        if (text.charCodeAt(I) === 10) ++I, ++k;
                    } else if (c !== delimiterCode) continue;
                    return text.substring(j, I - k);
                }
                return text.substring(j);
            }
            while ((t = token()) !== EOF) {
                var a = [];
                while (t !== EOL && t !== EOF) {
                    a.push(t);
                    t = token();
                }
                if (f && !(a = f(a, n++))) continue;
                rows.push(a);
            }
            return rows;
        };
        dsv.format = function(rows) {
            if (Array.isArray(rows[0])) return dsv.formatRows(rows);
            var fieldSet = new d3_Set(), fields = [];
            rows.forEach(function(row) {
                for (var field in row) {
                    if (!fieldSet.has(field)) {
                        fields.push(fieldSet.add(field));
                    }
                }
            });
            return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
                return fields.map(function(field) {
                    return formatValue(row[field]);
                }).join(delimiter);
            })).join("\n");
        };
        dsv.formatRows = function(rows) {
            return rows.map(formatRow).join("\n");
        };
        function formatRow(row) {
            return row.map(formatValue).join(delimiter);
        }
        function formatValue(text) {
            return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
        }
        return dsv;
    };
    d3.csv = d3.dsv(",", "text/csv");
    d3.tsv = d3.dsv("	", "text/tab-separated-values");
    var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = d3_window[d3_vendorSymbol(d3_window, "requestAnimationFrame")] || function(callback) {
        setTimeout(callback, 17);
    };
    d3.timer = function(callback, delay, then) {
        var n = arguments.length;
        if (n < 2) delay = 0;
        if (n < 3) then = Date.now();
        var time = then + delay, timer = {
            c: callback,
            t: time,
            f: false,
            n: null
        };
        if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
        d3_timer_queueTail = timer;
        if (!d3_timer_interval) {
            d3_timer_timeout = clearTimeout(d3_timer_timeout);
            d3_timer_interval = 1;
            d3_timer_frame(d3_timer_step);
        }
    };
    function d3_timer_step() {
        var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
        if (delay > 24) {
            if (isFinite(delay)) {
                clearTimeout(d3_timer_timeout);
                d3_timer_timeout = setTimeout(d3_timer_step, delay);
            }
            d3_timer_interval = 0;
        } else {
            d3_timer_interval = 1;
            d3_timer_frame(d3_timer_step);
        }
    }
    d3.timer.flush = function() {
        d3_timer_mark();
        d3_timer_sweep();
    };
    function d3_timer_mark() {
        var now = Date.now();
        d3_timer_active = d3_timer_queueHead;
        while (d3_timer_active) {
            if (now >= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);
            d3_timer_active = d3_timer_active.n;
        }
        return now;
    }
    function d3_timer_sweep() {
        var t0, t1 = d3_timer_queueHead, time = Infinity;
        while (t1) {
            if (t1.f) {
                t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
            } else {
                if (t1.t < time) time = t1.t;
                t1 = (t0 = t1).n;
            }
        }
        d3_timer_queueTail = t0;
        return time;
    }
    function d3_format_precision(x, p) {
        return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
    }
    d3.round = function(x, n) {
        return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
    };
    var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
    d3.formatPrefix = function(value, precision) {
        var i = 0;
        if (value) {
            if (value < 0) value *= -1;
            if (precision) value = d3.round(value, d3_format_precision(value, precision));
            i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
            i = Math.max(-24, Math.min(24, Math.floor((i <= 0 ? i + 1 : i - 1) / 3) * 3));
        }
        return d3_formatPrefixes[8 + i / 3];
    };
    function d3_formatPrefix(d, i) {
        var k = Math.pow(10, abs(8 - i) * 3);
        return {
            scale: i > 8 ? function(d) {
                return d / k;
            } : function(d) {
                return d * k;
            },
            symbol: d
        };
    }
    function d3_locale_numberFormat(locale) {
        var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping ? function(value) {
            var i = value.length, t = [], j = 0, g = locale_grouping[0];
            while (i > 0 && g > 0) {
                t.push(value.substring(i -= g, i + g));
                g = locale_grouping[j = (j + 1) % locale_grouping.length];
            }
            return t.reverse().join(locale_thousands);
        } : d3_identity;
        return function(specifier) {
            var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false;
            if (precision) precision = +precision.substring(1);
            if (zfill || fill === "0" && align === "=") {
                zfill = fill = "0";
                align = "=";
                if (comma) width -= Math.floor((width - 1) / 4);
            }
            switch (type) {
                case "n":
                    comma = true;
                    type = "g";
                    break;

                case "%":
                    scale = 100;
                    suffix = "%";
                    type = "f";
                    break;

                case "p":
                    scale = 100;
                    suffix = "%";
                    type = "r";
                    break;

                case "b":
                case "o":
                case "x":
                case "X":
                    if (symbol === "#") prefix = "0" + type.toLowerCase();

                case "c":
                case "d":
                    integer = true;
                    precision = 0;
                    break;

                case "s":
                    scale = -1;
                    type = "r";
                    break;
            }
            if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
            if (type == "r" && !precision) type = "g";
            if (precision != null) {
                if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
            }
            type = d3_format_types.get(type) || d3_format_typeDefault;
            var zcomma = zfill && comma;
            return function(value) {
                if (integer && value % 1) return "";
                var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign;
                if (scale < 0) {
                    var unit = d3.formatPrefix(value, precision);
                    value = unit.scale(value);
                    suffix = unit.symbol;
                } else {
                    value *= scale;
                }
                value = type(value, precision);
                var i = value.lastIndexOf("."), before = i < 0 ? value : value.substring(0, i), after = i < 0 ? "" : locale_decimal + value.substring(i + 1);
                if (!zfill && comma) before = formatGroup(before);
                var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
                if (zcomma) before = formatGroup(padding + before);
                negative += prefix;
                value = before + after;
                return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + suffix;
            };
        };
    }
    var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
    var d3_format_types = d3.map({
        b: function(x) {
            return x.toString(2);
        },
        c: function(x) {
            return String.fromCharCode(x);
        },
        o: function(x) {
            return x.toString(8);
        },
        x: function(x) {
            return x.toString(16);
        },
        X: function(x) {
            return x.toString(16).toUpperCase();
        },
        g: function(x, p) {
            return x.toPrecision(p);
        },
        e: function(x, p) {
            return x.toExponential(p);
        },
        f: function(x, p) {
            return x.toFixed(p);
        },
        r: function(x, p) {
            return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
        }
    });
    function d3_format_typeDefault(x) {
        return x + "";
    }
    var d3_time = d3.time = {}, d3_date = Date;
    function d3_date_utc() {
        this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
    }
    d3_date_utc.prototype = {
        getDate: function() {
            return this._.getUTCDate();
        },
        getDay: function() {
            return this._.getUTCDay();
        },
        getFullYear: function() {
            return this._.getUTCFullYear();
        },
        getHours: function() {
            return this._.getUTCHours();
        },
        getMilliseconds: function() {
            return this._.getUTCMilliseconds();
        },
        getMinutes: function() {
            return this._.getUTCMinutes();
        },
        getMonth: function() {
            return this._.getUTCMonth();
        },
        getSeconds: function() {
            return this._.getUTCSeconds();
        },
        getTime: function() {
            return this._.getTime();
        },
        getTimezoneOffset: function() {
            return 0;
        },
        valueOf: function() {
            return this._.valueOf();
        },
        setDate: function() {
            d3_time_prototype.setUTCDate.apply(this._, arguments);
        },
        setDay: function() {
            d3_time_prototype.setUTCDay.apply(this._, arguments);
        },
        setFullYear: function() {
            d3_time_prototype.setUTCFullYear.apply(this._, arguments);
        },
        setHours: function() {
            d3_time_prototype.setUTCHours.apply(this._, arguments);
        },
        setMilliseconds: function() {
            d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
        },
        setMinutes: function() {
            d3_time_prototype.setUTCMinutes.apply(this._, arguments);
        },
        setMonth: function() {
            d3_time_prototype.setUTCMonth.apply(this._, arguments);
        },
        setSeconds: function() {
            d3_time_prototype.setUTCSeconds.apply(this._, arguments);
        },
        setTime: function() {
            d3_time_prototype.setTime.apply(this._, arguments);
        }
    };
    var d3_time_prototype = Date.prototype;
    function d3_time_interval(local, step, number) {
        function round(date) {
            var d0 = local(date), d1 = offset(d0, 1);
            return date - d0 < d1 - date ? d0 : d1;
        }
        function ceil(date) {
            step(date = local(new d3_date(date - 1)), 1);
            return date;
        }
        function offset(date, k) {
            step(date = new d3_date(+date), k);
            return date;
        }
        function range(t0, t1, dt) {
            var time = ceil(t0), times = [];
            if (dt > 1) {
                while (time < t1) {
                    if (!(number(time) % dt)) times.push(new Date(+time));
                    step(time, 1);
                }
            } else {
                while (time < t1) times.push(new Date(+time)), step(time, 1);
            }
            return times;
        }
        function range_utc(t0, t1, dt) {
            try {
                d3_date = d3_date_utc;
                var utc = new d3_date_utc();
                utc._ = t0;
                return range(utc, t1, dt);
            } finally {
                d3_date = Date;
            }
        }
        local.floor = local;
        local.round = round;
        local.ceil = ceil;
        local.offset = offset;
        local.range = range;
        var utc = local.utc = d3_time_interval_utc(local);
        utc.floor = utc;
        utc.round = d3_time_interval_utc(round);
        utc.ceil = d3_time_interval_utc(ceil);
        utc.offset = d3_time_interval_utc(offset);
        utc.range = range_utc;
        return local;
    }
    function d3_time_interval_utc(method) {
        return function(date, k) {
            try {
                d3_date = d3_date_utc;
                var utc = new d3_date_utc();
                utc._ = date;
                return method(utc, k)._;
            } finally {
                d3_date = Date;
            }
        };
    }
    d3_time.year = d3_time_interval(function(date) {
        date = d3_time.day(date);
        date.setMonth(0, 1);
        return date;
    }, function(date, offset) {
        date.setFullYear(date.getFullYear() + offset);
    }, function(date) {
        return date.getFullYear();
    });
    d3_time.years = d3_time.year.range;
    d3_time.years.utc = d3_time.year.utc.range;
    d3_time.day = d3_time_interval(function(date) {
        var day = new d3_date(2e3, 0);
        day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
        return day;
    }, function(date, offset) {
        date.setDate(date.getDate() + offset);
    }, function(date) {
        return date.getDate() - 1;
    });
    d3_time.days = d3_time.day.range;
    d3_time.days.utc = d3_time.day.utc.range;
    d3_time.dayOfYear = function(date) {
        var year = d3_time.year(date);
        return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
    };
    [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
        i = 7 - i;
        var interval = d3_time[day] = d3_time_interval(function(date) {
            (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
            return date;
        }, function(date, offset) {
            date.setDate(date.getDate() + Math.floor(offset) * 7);
        }, function(date) {
            var day = d3_time.year(date).getDay();
            return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
        });
        d3_time[day + "s"] = interval.range;
        d3_time[day + "s"].utc = interval.utc.range;
        d3_time[day + "OfYear"] = function(date) {
            var day = d3_time.year(date).getDay();
            return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
        };
    });
    d3_time.week = d3_time.sunday;
    d3_time.weeks = d3_time.sunday.range;
    d3_time.weeks.utc = d3_time.sunday.utc.range;
    d3_time.weekOfYear = d3_time.sundayOfYear;
    function d3_locale_timeFormat(locale) {
        var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
        function d3_time_format(template) {
            var n = template.length;
            function format(date) {
                var string = [], i = -1, j = 0, c, p, f;
                while (++i < n) {
                    if (template.charCodeAt(i) === 37) {
                        string.push(template.substring(j, i));
                        if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
                        if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
                        string.push(c);
                        j = i + 1;
                    }
                }
                string.push(template.substring(j, i));
                return string.join("");
            }
            format.parse = function(string) {
                var d = {
                    y: 1900,
                    m: 0,
                    d: 1,
                    H: 0,
                    M: 0,
                    S: 0,
                    L: 0,
                    Z: null
                }, i = d3_time_parse(d, template, string, 0);
                if (i != string.length) return null;
                if ("p" in d) d.H = d.H % 12 + d.p * 12;
                var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
                if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("w" in d && ("W" in d || "U" in d)) {
                    date.setFullYear(d.y, 0, 1);
                    date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
                } else date.setFullYear(d.y, d.m, d.d);
                date.setHours(d.H + Math.floor(d.Z / 100), d.M + d.Z % 100, d.S, d.L);
                return localZ ? date._ : date;
            };
            format.toString = function() {
                return template;
            };
            return format;
        }
        function d3_time_parse(date, template, string, j) {
            var c, p, t, i = 0, n = template.length, m = string.length;
            while (i < n) {
                if (j >= m) return -1;
                c = template.charCodeAt(i++);
                if (c === 37) {
                    t = template.charAt(i++);
                    p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
                    if (!p || (j = p(date, string, j)) < 0) return -1;
                } else if (c != string.charCodeAt(j++)) {
                    return -1;
                }
            }
            return j;
        }
        d3_time_format.utc = function(template) {
            var local = d3_time_format(template);
            function format(date) {
                try {
                    d3_date = d3_date_utc;
                    var utc = new d3_date();
                    utc._ = date;
                    return local(utc);
                } finally {
                    d3_date = Date;
                }
            }
            format.parse = function(string) {
                try {
                    d3_date = d3_date_utc;
                    var date = local.parse(string);
                    return date && date._;
                } finally {
                    d3_date = Date;
                }
            };
            format.toString = local.toString;
            return format;
        };
        d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
        var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
        locale_periods.forEach(function(p, i) {
            d3_time_periodLookup.set(p.toLowerCase(), i);
        });
        var d3_time_formats = {
            a: function(d) {
                return locale_shortDays[d.getDay()];
            },
            A: function(d) {
                return locale_days[d.getDay()];
            },
            b: function(d) {
                return locale_shortMonths[d.getMonth()];
            },
            B: function(d) {
                return locale_months[d.getMonth()];
            },
            c: d3_time_format(locale_dateTime),
            d: function(d, p) {
                return d3_time_formatPad(d.getDate(), p, 2);
            },
            e: function(d, p) {
                return d3_time_formatPad(d.getDate(), p, 2);
            },
            H: function(d, p) {
                return d3_time_formatPad(d.getHours(), p, 2);
            },
            I: function(d, p) {
                return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
            },
            j: function(d, p) {
                return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
            },
            L: function(d, p) {
                return d3_time_formatPad(d.getMilliseconds(), p, 3);
            },
            m: function(d, p) {
                return d3_time_formatPad(d.getMonth() + 1, p, 2);
            },
            M: function(d, p) {
                return d3_time_formatPad(d.getMinutes(), p, 2);
            },
            p: function(d) {
                return locale_periods[+(d.getHours() >= 12)];
            },
            S: function(d, p) {
                return d3_time_formatPad(d.getSeconds(), p, 2);
            },
            U: function(d, p) {
                return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
            },
            w: function(d) {
                return d.getDay();
            },
            W: function(d, p) {
                return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
            },
            x: d3_time_format(locale_date),
            X: d3_time_format(locale_time),
            y: function(d, p) {
                return d3_time_formatPad(d.getFullYear() % 100, p, 2);
            },
            Y: function(d, p) {
                return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
            },
            Z: d3_time_zone,
            "%": function() {
                return "%";
            }
        };
        var d3_time_parsers = {
            a: d3_time_parseWeekdayAbbrev,
            A: d3_time_parseWeekday,
            b: d3_time_parseMonthAbbrev,
            B: d3_time_parseMonth,
            c: d3_time_parseLocaleFull,
            d: d3_time_parseDay,
            e: d3_time_parseDay,
            H: d3_time_parseHour24,
            I: d3_time_parseHour24,
            j: d3_time_parseDayOfYear,
            L: d3_time_parseMilliseconds,
            m: d3_time_parseMonthNumber,
            M: d3_time_parseMinutes,
            p: d3_time_parseAmPm,
            S: d3_time_parseSeconds,
            U: d3_time_parseWeekNumberSunday,
            w: d3_time_parseWeekdayNumber,
            W: d3_time_parseWeekNumberMonday,
            x: d3_time_parseLocaleDate,
            X: d3_time_parseLocaleTime,
            y: d3_time_parseYear,
            Y: d3_time_parseFullYear,
            Z: d3_time_parseZone,
            "%": d3_time_parseLiteralPercent
        };
        function d3_time_parseWeekdayAbbrev(date, string, i) {
            d3_time_dayAbbrevRe.lastIndex = 0;
            var n = d3_time_dayAbbrevRe.exec(string.substring(i));
            return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
        }
        function d3_time_parseWeekday(date, string, i) {
            d3_time_dayRe.lastIndex = 0;
            var n = d3_time_dayRe.exec(string.substring(i));
            return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
        }
        function d3_time_parseMonthAbbrev(date, string, i) {
            d3_time_monthAbbrevRe.lastIndex = 0;
            var n = d3_time_monthAbbrevRe.exec(string.substring(i));
            return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
        }
        function d3_time_parseMonth(date, string, i) {
            d3_time_monthRe.lastIndex = 0;
            var n = d3_time_monthRe.exec(string.substring(i));
            return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
        }
        function d3_time_parseLocaleFull(date, string, i) {
            return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
        }
        function d3_time_parseLocaleDate(date, string, i) {
            return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
        }
        function d3_time_parseLocaleTime(date, string, i) {
            return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
        }
        function d3_time_parseAmPm(date, string, i) {
            var n = d3_time_periodLookup.get(string.substring(i, i += 2).toLowerCase());
            return n == null ? -1 : (date.p = n, i);
        }
        return d3_time_format;
    }
    var d3_time_formatPads = {
        "-": "",
        _: " ",
        "0": "0"
    }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
    function d3_time_formatPad(value, fill, width) {
        var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
        return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
    }
    function d3_time_formatRe(names) {
        return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
    }
    function d3_time_formatLookup(names) {
        var map = new d3_Map(), i = -1, n = names.length;
        while (++i < n) map.set(names[i].toLowerCase(), i);
        return map;
    }
    function d3_time_parseWeekdayNumber(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 1));
        return n ? (date.w = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseWeekNumberSunday(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i));
        return n ? (date.U = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseWeekNumberMonday(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i));
        return n ? (date.W = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseFullYear(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 4));
        return n ? (date.y = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseYear(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 2));
        return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
    }
    function d3_time_parseZone(date, string, i) {
        return /^[+-]\d{4}$/.test(string = string.substring(i, i + 5)) ? (date.Z = +string,
            i + 5) : -1;
    }
    function d3_time_expandYear(d) {
        return d + (d > 68 ? 1900 : 2e3);
    }
    function d3_time_parseMonthNumber(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 2));
        return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
    }
    function d3_time_parseDay(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 2));
        return n ? (date.d = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseDayOfYear(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 3));
        return n ? (date.j = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseHour24(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 2));
        return n ? (date.H = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseMinutes(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 2));
        return n ? (date.M = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseSeconds(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 2));
        return n ? (date.S = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseMilliseconds(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 3));
        return n ? (date.L = +n[0], i + n[0].length) : -1;
    }
    function d3_time_zone(d) {
        var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = ~~(abs(z) / 60), zm = abs(z) % 60;
        return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
    }
    function d3_time_parseLiteralPercent(date, string, i) {
        d3_time_percentRe.lastIndex = 0;
        var n = d3_time_percentRe.exec(string.substring(i, i + 1));
        return n ? i + n[0].length : -1;
    }
    function d3_time_formatMulti(formats) {
        var n = formats.length, i = -1;
        while (++i < n) formats[i][0] = this(formats[i][0]);
        return function(date) {
            var i = 0, f = formats[i];
            while (!f[1](date)) f = formats[++i];
            return f[0](date);
        };
    }
    d3.locale = function(locale) {
        return {
            numberFormat: d3_locale_numberFormat(locale),
            timeFormat: d3_locale_timeFormat(locale)
        };
    };
    var d3_locale_enUS = d3.locale({
        decimal: ".",
        thousands: ",",
        grouping: [ 3 ],
        currency: [ "$", "" ],
        dateTime: "%a %b %e %X %Y",
        date: "%m/%d/%Y",
        time: "%H:%M:%S",
        periods: [ "AM", "PM" ],
        days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
        shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
        months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
        shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
    });
    d3.format = d3_locale_enUS.numberFormat;
    d3.geo = {};
    function d3_adder() {}
    d3_adder.prototype = {
        s: 0,
        t: 0,
        add: function(y) {
            d3_adderSum(y, this.t, d3_adderTemp);
            d3_adderSum(d3_adderTemp.s, this.s, this);
            if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
        },
        reset: function() {
            this.s = this.t = 0;
        },
        valueOf: function() {
            return this.s;
        }
    };
    var d3_adderTemp = new d3_adder();
    function d3_adderSum(a, b, o) {
        var x = o.s = a + b, bv = x - a, av = x - bv;
        o.t = a - av + (b - bv);
    }
    d3.geo.stream = function(object, listener) {
        if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
            d3_geo_streamObjectType[object.type](object, listener);
        } else {
            d3_geo_streamGeometry(object, listener);
        }
    };
    function d3_geo_streamGeometry(geometry, listener) {
        if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
            d3_geo_streamGeometryType[geometry.type](geometry, listener);
        }
    }
    var d3_geo_streamObjectType = {
        Feature: function(feature, listener) {
            d3_geo_streamGeometry(feature.geometry, listener);
        },
        FeatureCollection: function(object, listener) {
            var features = object.features, i = -1, n = features.length;
            while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
        }
    };
    var d3_geo_streamGeometryType = {
        Sphere: function(object, listener) {
            listener.sphere();
        },
        Point: function(object, listener) {
            object = object.coordinates;
            listener.point(object[0], object[1], object[2]);
        },
        MultiPoint: function(object, listener) {
            var coordinates = object.coordinates, i = -1, n = coordinates.length;
            while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
        },
        LineString: function(object, listener) {
            d3_geo_streamLine(object.coordinates, listener, 0);
        },
        MultiLineString: function(object, listener) {
            var coordinates = object.coordinates, i = -1, n = coordinates.length;
            while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
        },
        Polygon: function(object, listener) {
            d3_geo_streamPolygon(object.coordinates, listener);
        },
        MultiPolygon: function(object, listener) {
            var coordinates = object.coordinates, i = -1, n = coordinates.length;
            while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
        },
        GeometryCollection: function(object, listener) {
            var geometries = object.geometries, i = -1, n = geometries.length;
            while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
        }
    };
    function d3_geo_streamLine(coordinates, listener, closed) {
        var i = -1, n = coordinates.length - closed, coordinate;
        listener.lineStart();
        while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
        listener.lineEnd();
    }
    function d3_geo_streamPolygon(coordinates, listener) {
        var i = -1, n = coordinates.length;
        listener.polygonStart();
        while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
        listener.polygonEnd();
    }
    d3.geo.area = function(object) {
        d3_geo_areaSum = 0;
        d3.geo.stream(object, d3_geo_area);
        return d3_geo_areaSum;
    };
    var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
    var d3_geo_area = {
        sphere: function() {
            d3_geo_areaSum += 4 * π;
        },
        point: d3_noop,
        lineStart: d3_noop,
        lineEnd: d3_noop,
        polygonStart: function() {
            d3_geo_areaRingSum.reset();
            d3_geo_area.lineStart = d3_geo_areaRingStart;
        },
        polygonEnd: function() {
            var area = 2 * d3_geo_areaRingSum;
            d3_geo_areaSum += area < 0 ? 4 * π + area : area;
            d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
        }
    };
    function d3_geo_areaRingStart() {
        var λ00, φ00, λ0, cosφ0, sinφ0;
        d3_geo_area.point = function(λ, φ) {
            d3_geo_area.point = nextPoint;
            λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4),
                sinφ0 = Math.sin(φ);
        };
        function nextPoint(λ, φ) {
            λ *= d3_radians;
            φ = φ * d3_radians / 2 + π / 4;
            var dλ = λ - λ0, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(dλ), v = k * Math.sin(dλ);
            d3_geo_areaRingSum.add(Math.atan2(v, u));
            λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
        }
        d3_geo_area.lineEnd = function() {
            nextPoint(λ00, φ00);
        };
    }
    function d3_geo_cartesian(spherical) {
        var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
        return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
    }
    function d3_geo_cartesianDot(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }
    function d3_geo_cartesianCross(a, b) {
        return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
    }
    function d3_geo_cartesianAdd(a, b) {
        a[0] += b[0];
        a[1] += b[1];
        a[2] += b[2];
    }
    function d3_geo_cartesianScale(vector, k) {
        return [ vector[0] * k, vector[1] * k, vector[2] * k ];
    }
    function d3_geo_cartesianNormalize(d) {
        var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
        d[0] /= l;
        d[1] /= l;
        d[2] /= l;
    }
    function d3_geo_spherical(cartesian) {
        return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
    }
    function d3_geo_sphericalEqual(a, b) {
        return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
    }
    d3.geo.bounds = function() {
        var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
        var bound = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: function() {
                bound.point = ringPoint;
                bound.lineStart = ringStart;
                bound.lineEnd = ringEnd;
                dλSum = 0;
                d3_geo_area.polygonStart();
            },
            polygonEnd: function() {
                d3_geo_area.polygonEnd();
                bound.point = point;
                bound.lineStart = lineStart;
                bound.lineEnd = lineEnd;
                if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
                range[0] = λ0, range[1] = λ1;
            }
        };
        function point(λ, φ) {
            ranges.push(range = [ λ0 = λ, λ1 = λ ]);
            if (φ < φ0) φ0 = φ;
            if (φ > φ1) φ1 = φ;
        }
        function linePoint(λ, φ) {
            var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
            if (p0) {
                var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
                d3_geo_cartesianNormalize(inflection);
                inflection = d3_geo_spherical(inflection);
                var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
                if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
                    var φi = inflection[1] * d3_degrees;
                    if (φi > φ1) φ1 = φi;
                } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
                    var φi = -inflection[1] * d3_degrees;
                    if (φi < φ0) φ0 = φi;
                } else {
                    if (φ < φ0) φ0 = φ;
                    if (φ > φ1) φ1 = φ;
                }
                if (antimeridian) {
                    if (λ < λ_) {
                        if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
                    } else {
                        if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
                    }
                } else {
                    if (λ1 >= λ0) {
                        if (λ < λ0) λ0 = λ;
                        if (λ > λ1) λ1 = λ;
                    } else {
                        if (λ > λ_) {
                            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
                        } else {
                            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
                        }
                    }
                }
            } else {
                point(λ, φ);
            }
            p0 = p, λ_ = λ;
        }
        function lineStart() {
            bound.point = linePoint;
        }
        function lineEnd() {
            range[0] = λ0, range[1] = λ1;
            bound.point = point;
            p0 = null;
        }
        function ringPoint(λ, φ) {
            if (p0) {
                var dλ = λ - λ_;
                dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
            } else λ__ = λ, φ__ = φ;
            d3_geo_area.point(λ, φ);
            linePoint(λ, φ);
        }
        function ringStart() {
            d3_geo_area.lineStart();
        }
        function ringEnd() {
            ringPoint(λ__, φ__);
            d3_geo_area.lineEnd();
            if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
            range[0] = λ0, range[1] = λ1;
            p0 = null;
        }
        function angle(λ0, λ1) {
            return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
        }
        function compareRanges(a, b) {
            return a[0] - b[0];
        }
        function withinRange(x, range) {
            return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
        }
        return function(feature) {
            φ1 = λ1 = -(λ0 = φ0 = Infinity);
            ranges = [];
            d3.geo.stream(feature, bound);
            var n = ranges.length;
            if (n) {
                ranges.sort(compareRanges);
                for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
                    b = ranges[i];
                    if (withinRange(b[0], a) || withinRange(b[1], a)) {
                        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
                        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
                    } else {
                        merged.push(a = b);
                    }
                }
                var best = -Infinity, dλ;
                for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
                    b = merged[i];
                    if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
                }
            }
            ranges = range = null;
            return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
        };
    }();
    d3.geo.centroid = function(object) {
        d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
        d3.geo.stream(object, d3_geo_centroid);
        var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
        if (m < ε2) {
            x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
            if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
            m = x * x + y * y + z * z;
            if (m < ε2) return [ NaN, NaN ];
        }
        return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
    };
    var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
    var d3_geo_centroid = {
        sphere: d3_noop,
        point: d3_geo_centroidPoint,
        lineStart: d3_geo_centroidLineStart,
        lineEnd: d3_geo_centroidLineEnd,
        polygonStart: function() {
            d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
        },
        polygonEnd: function() {
            d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
        }
    };
    function d3_geo_centroidPoint(λ, φ) {
        λ *= d3_radians;
        var cosφ = Math.cos(φ *= d3_radians);
        d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
    }
    function d3_geo_centroidPointXYZ(x, y, z) {
        ++d3_geo_centroidW0;
        d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
        d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
        d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
    }
    function d3_geo_centroidLineStart() {
        var x0, y0, z0;
        d3_geo_centroid.point = function(λ, φ) {
            λ *= d3_radians;
            var cosφ = Math.cos(φ *= d3_radians);
            x0 = cosφ * Math.cos(λ);
            y0 = cosφ * Math.sin(λ);
            z0 = Math.sin(φ);
            d3_geo_centroid.point = nextPoint;
            d3_geo_centroidPointXYZ(x0, y0, z0);
        };
        function nextPoint(λ, φ) {
            λ *= d3_radians;
            var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
            d3_geo_centroidW1 += w;
            d3_geo_centroidX1 += w * (x0 + (x0 = x));
            d3_geo_centroidY1 += w * (y0 + (y0 = y));
            d3_geo_centroidZ1 += w * (z0 + (z0 = z));
            d3_geo_centroidPointXYZ(x0, y0, z0);
        }
    }
    function d3_geo_centroidLineEnd() {
        d3_geo_centroid.point = d3_geo_centroidPoint;
    }
    function d3_geo_centroidRingStart() {
        var λ00, φ00, x0, y0, z0;
        d3_geo_centroid.point = function(λ, φ) {
            λ00 = λ, φ00 = φ;
            d3_geo_centroid.point = nextPoint;
            λ *= d3_radians;
            var cosφ = Math.cos(φ *= d3_radians);
            x0 = cosφ * Math.cos(λ);
            y0 = cosφ * Math.sin(λ);
            z0 = Math.sin(φ);
            d3_geo_centroidPointXYZ(x0, y0, z0);
        };
        d3_geo_centroid.lineEnd = function() {
            nextPoint(λ00, φ00);
            d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
            d3_geo_centroid.point = d3_geo_centroidPoint;
        };
        function nextPoint(λ, φ) {
            λ *= d3_radians;
            var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
            d3_geo_centroidX2 += v * cx;
            d3_geo_centroidY2 += v * cy;
            d3_geo_centroidZ2 += v * cz;
            d3_geo_centroidW1 += w;
            d3_geo_centroidX1 += w * (x0 + (x0 = x));
            d3_geo_centroidY1 += w * (y0 + (y0 = y));
            d3_geo_centroidZ1 += w * (z0 + (z0 = z));
            d3_geo_centroidPointXYZ(x0, y0, z0);
        }
    }
    function d3_true() {
        return true;
    }
    function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
        var subject = [], clip = [];
        segments.forEach(function(segment) {
            if ((n = segment.length - 1) <= 0) return;
            var n, p0 = segment[0], p1 = segment[n];
            if (d3_geo_sphericalEqual(p0, p1)) {
                listener.lineStart();
                for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
                listener.lineEnd();
                return;
            }
            var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
            a.o = b;
            subject.push(a);
            clip.push(b);
            a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
            b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
            a.o = b;
            subject.push(a);
            clip.push(b);
        });
        clip.sort(compare);
        d3_geo_clipPolygonLinkCircular(subject);
        d3_geo_clipPolygonLinkCircular(clip);
        if (!subject.length) return;
        for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
            clip[i].e = entry = !entry;
        }
        var start = subject[0], points, point;
        while (1) {
            var current = start, isSubject = true;
            while (current.v) if ((current = current.n) === start) return;
            points = current.z;
            listener.lineStart();
            do {
                current.v = current.o.v = true;
                if (current.e) {
                    if (isSubject) {
                        for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
                    } else {
                        interpolate(current.x, current.n.x, 1, listener);
                    }
                    current = current.n;
                } else {
                    if (isSubject) {
                        points = current.p.z;
                        for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
                    } else {
                        interpolate(current.x, current.p.x, -1, listener);
                    }
                    current = current.p;
                }
                current = current.o;
                points = current.z;
                isSubject = !isSubject;
            } while (!current.v);
            listener.lineEnd();
        }
    }
    function d3_geo_clipPolygonLinkCircular(array) {
        if (!(n = array.length)) return;
        var n, i = 0, a = array[0], b;
        while (++i < n) {
            a.n = b = array[i];
            b.p = a;
            a = b;
        }
        a.n = b = array[0];
        b.p = a;
    }
    function d3_geo_clipPolygonIntersection(point, points, other, entry) {
        this.x = point;
        this.z = points;
        this.o = other;
        this.e = entry;
        this.v = false;
        this.n = this.p = null;
    }
    function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
        return function(rotate, listener) {
            var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
            var clip = {
                point: point,
                lineStart: lineStart,
                lineEnd: lineEnd,
                polygonStart: function() {
                    clip.point = pointRing;
                    clip.lineStart = ringStart;
                    clip.lineEnd = ringEnd;
                    segments = [];
                    polygon = [];
                    listener.polygonStart();
                },
                polygonEnd: function() {
                    clip.point = point;
                    clip.lineStart = lineStart;
                    clip.lineEnd = lineEnd;
                    segments = d3.merge(segments);
                    var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
                    if (segments.length) {
                        d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
                    } else if (clipStartInside) {
                        listener.lineStart();
                        interpolate(null, null, 1, listener);
                        listener.lineEnd();
                    }
                    listener.polygonEnd();
                    segments = polygon = null;
                },
                sphere: function() {
                    listener.polygonStart();
                    listener.lineStart();
                    interpolate(null, null, 1, listener);
                    listener.lineEnd();
                    listener.polygonEnd();
                }
            };
            function point(λ, φ) {
                var point = rotate(λ, φ);
                if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
            }
            function pointLine(λ, φ) {
                var point = rotate(λ, φ);
                line.point(point[0], point[1]);
            }
            function lineStart() {
                clip.point = pointLine;
                line.lineStart();
            }
            function lineEnd() {
                clip.point = point;
                line.lineEnd();
            }
            var segments;
            var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygon, ring;
            function pointRing(λ, φ) {
                ring.push([ λ, φ ]);
                var point = rotate(λ, φ);
                ringListener.point(point[0], point[1]);
            }
            function ringStart() {
                ringListener.lineStart();
                ring = [];
            }
            function ringEnd() {
                pointRing(ring[0][0], ring[0][1]);
                ringListener.lineEnd();
                var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
                ring.pop();
                polygon.push(ring);
                ring = null;
                if (!n) return;
                if (clean & 1) {
                    segment = ringSegments[0];
                    var n = segment.length - 1, i = -1, point;
                    listener.lineStart();
                    while (++i < n) listener.point((point = segment[i])[0], point[1]);
                    listener.lineEnd();
                    return;
                }
                if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
                segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
            }
            return clip;
        };
    }
    function d3_geo_clipSegmentLength1(segment) {
        return segment.length > 1;
    }
    function d3_geo_clipBufferListener() {
        var lines = [], line;
        return {
            lineStart: function() {
                lines.push(line = []);
            },
            point: function(λ, φ) {
                line.push([ λ, φ ]);
            },
            lineEnd: d3_noop,
            buffer: function() {
                var buffer = lines;
                lines = [];
                line = null;
                return buffer;
            },
            rejoin: function() {
                if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
            }
        };
    }
    function d3_geo_clipSort(a, b) {
        return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
    }
    function d3_geo_pointInPolygon(point, polygon) {
        var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
        d3_geo_areaRingSum.reset();
        for (var i = 0, n = polygon.length; i < n; ++i) {
            var ring = polygon[i], m = ring.length;
            if (!m) continue;
            var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
            while (true) {
                if (j === m) j = 0;
                point = ring[j];
                var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, antimeridian = abs(dλ) > π, k = sinφ0 * sinφ;
                d3_geo_areaRingSum.add(Math.atan2(k * Math.sin(dλ), cosφ0 * cosφ + k * Math.cos(dλ)));
                polarAngle += antimeridian ? dλ + (dλ >= 0 ? τ : -τ) : dλ;
                if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
                    var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
                    d3_geo_cartesianNormalize(arc);
                    var intersection = d3_geo_cartesianCross(meridianNormal, arc);
                    d3_geo_cartesianNormalize(intersection);
                    var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
                    if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
                        winding += antimeridian ^ dλ >= 0 ? 1 : -1;
                    }
                }
                if (!j++) break;
                λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
            }
        }
        return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;
    }
    var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
    function d3_geo_clipAntimeridianLine(listener) {
        var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
        return {
            lineStart: function() {
                listener.lineStart();
                clean = 1;
            },
            point: function(λ1, φ1) {
                var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
                if (abs(dλ - π) < ε) {
                    listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
                    listener.point(sλ0, φ0);
                    listener.lineEnd();
                    listener.lineStart();
                    listener.point(sλ1, φ0);
                    listener.point(λ1, φ0);
                    clean = 0;
                } else if (sλ0 !== sλ1 && dλ >= π) {
                    if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
                    if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
                    φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
                    listener.point(sλ0, φ0);
                    listener.lineEnd();
                    listener.lineStart();
                    listener.point(sλ1, φ0);
                    clean = 0;
                }
                listener.point(λ0 = λ1, φ0 = φ1);
                sλ0 = sλ1;
            },
            lineEnd: function() {
                listener.lineEnd();
                λ0 = φ0 = NaN;
            },
            clean: function() {
                return 2 - clean;
            }
        };
    }
    function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
        var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
        return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
    }
    function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
        var φ;
        if (from == null) {
            φ = direction * halfπ;
            listener.point(-π, φ);
            listener.point(0, φ);
            listener.point(π, φ);
            listener.point(π, 0);
            listener.point(π, -φ);
            listener.point(0, -φ);
            listener.point(-π, -φ);
            listener.point(-π, 0);
            listener.point(-π, φ);
        } else if (abs(from[0] - to[0]) > ε) {
            var s = from[0] < to[0] ? π : -π;
            φ = direction * s / 2;
            listener.point(-s, φ);
            listener.point(0, φ);
            listener.point(s, φ);
        } else {
            listener.point(to[0], to[1]);
        }
    }
    function d3_geo_clipCircle(radius) {
        var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
        return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
        function visible(λ, φ) {
            return Math.cos(λ) * Math.cos(φ) > cr;
        }
        function clipLine(listener) {
            var point0, c0, v0, v00, clean;
            return {
                lineStart: function() {
                    v00 = v0 = false;
                    clean = 1;
                },
                point: function(λ, φ) {
                    var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
                    if (!point0 && (v00 = v0 = v)) listener.lineStart();
                    if (v !== v0) {
                        point2 = intersect(point0, point1);
                        if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
                            point1[0] += ε;
                            point1[1] += ε;
                            v = visible(point1[0], point1[1]);
                        }
                    }
                    if (v !== v0) {
                        clean = 0;
                        if (v) {
                            listener.lineStart();
                            point2 = intersect(point1, point0);
                            listener.point(point2[0], point2[1]);
                        } else {
                            point2 = intersect(point0, point1);
                            listener.point(point2[0], point2[1]);
                            listener.lineEnd();
                        }
                        point0 = point2;
                    } else if (notHemisphere && point0 && smallRadius ^ v) {
                        var t;
                        if (!(c & c0) && (t = intersect(point1, point0, true))) {
                            clean = 0;
                            if (smallRadius) {
                                listener.lineStart();
                                listener.point(t[0][0], t[0][1]);
                                listener.point(t[1][0], t[1][1]);
                                listener.lineEnd();
                            } else {
                                listener.point(t[1][0], t[1][1]);
                                listener.lineEnd();
                                listener.lineStart();
                                listener.point(t[0][0], t[0][1]);
                            }
                        }
                    }
                    if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
                        listener.point(point1[0], point1[1]);
                    }
                    point0 = point1, v0 = v, c0 = c;
                },
                lineEnd: function() {
                    if (v0) listener.lineEnd();
                    point0 = null;
                },
                clean: function() {
                    return clean | (v00 && v0) << 1;
                }
            };
        }
        function intersect(a, b, two) {
            var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
            var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
            if (!determinant) return !two && a;
            var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
            d3_geo_cartesianAdd(A, B);
            var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
            if (t2 < 0) return;
            var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
            d3_geo_cartesianAdd(q, A);
            q = d3_geo_spherical(q);
            if (!two) return q;
            var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
            if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
            var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
            if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
            if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
                var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
                d3_geo_cartesianAdd(q1, A);
                return [ q, d3_geo_spherical(q1) ];
            }
        }
        function code(λ, φ) {
            var r = smallRadius ? radius : π - radius, code = 0;
            if (λ < -r) code |= 1; else if (λ > r) code |= 2;
            if (φ < -r) code |= 4; else if (φ > r) code |= 8;
            return code;
        }
    }
    function d3_geom_clipLine(x0, y0, x1, y1) {
        return function(line) {
            var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
            r = x0 - ax;
            if (!dx && r > 0) return;
            r /= dx;
            if (dx < 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
            } else if (dx > 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
            }
            r = x1 - ax;
            if (!dx && r < 0) return;
            r /= dx;
            if (dx < 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
            } else if (dx > 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
            }
            r = y0 - ay;
            if (!dy && r > 0) return;
            r /= dy;
            if (dy < 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
            } else if (dy > 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
            }
            r = y1 - ay;
            if (!dy && r < 0) return;
            r /= dy;
            if (dy < 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
            } else if (dy > 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
            }
            if (t0 > 0) line.a = {
                x: ax + t0 * dx,
                y: ay + t0 * dy
            };
            if (t1 < 1) line.b = {
                x: ax + t1 * dx,
                y: ay + t1 * dy
            };
            return line;
        };
    }
    var d3_geo_clipExtentMAX = 1e9;
    d3.geo.clipExtent = function() {
        var x0, y0, x1, y1, stream, clip, clipExtent = {
            stream: function(output) {
                if (stream) stream.valid = false;
                stream = clip(output);
                stream.valid = true;
                return stream;
            },
            extent: function(_) {
                if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
                clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
                if (stream) stream.valid = false, stream = null;
                return clipExtent;
            }
        };
        return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
    };
    function d3_geo_clipExtent(x0, y0, x1, y1) {
        return function(listener) {
            var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
            var clip = {
                point: point,
                lineStart: lineStart,
                lineEnd: lineEnd,
                polygonStart: function() {
                    listener = bufferListener;
                    segments = [];
                    polygon = [];
                    clean = true;
                },
                polygonEnd: function() {
                    listener = listener_;
                    segments = d3.merge(segments);
                    var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
                    if (inside || visible) {
                        listener.polygonStart();
                        if (inside) {
                            listener.lineStart();
                            interpolate(null, null, 1, listener);
                            listener.lineEnd();
                        }
                        if (visible) {
                            d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
                        }
                        listener.polygonEnd();
                    }
                    segments = polygon = ring = null;
                }
            };
            function insidePolygon(p) {
                var wn = 0, n = polygon.length, y = p[1];
                for (var i = 0; i < n; ++i) {
                    for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
                        b = v[j];
                        if (a[1] <= y) {
                            if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
                        } else {
                            if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
                        }
                        a = b;
                    }
                }
                return wn !== 0;
            }
            function interpolate(from, to, direction, listener) {
                var a = 0, a1 = 0;
                if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
                    do {
                        listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
                    } while ((a = (a + direction + 4) % 4) !== a1);
                } else {
                    listener.point(to[0], to[1]);
                }
            }
            function pointVisible(x, y) {
                return x0 <= x && x <= x1 && y0 <= y && y <= y1;
            }
            function point(x, y) {
                if (pointVisible(x, y)) listener.point(x, y);
            }
            var x__, y__, v__, x_, y_, v_, first, clean;
            function lineStart() {
                clip.point = linePoint;
                if (polygon) polygon.push(ring = []);
                first = true;
                v_ = false;
                x_ = y_ = NaN;
            }
            function lineEnd() {
                if (segments) {
                    linePoint(x__, y__);
                    if (v__ && v_) bufferListener.rejoin();
                    segments.push(bufferListener.buffer());
                }
                clip.point = point;
                if (v_) listener.lineEnd();
            }
            function linePoint(x, y) {
                x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
                y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
                var v = pointVisible(x, y);
                if (polygon) ring.push([ x, y ]);
                if (first) {
                    x__ = x, y__ = y, v__ = v;
                    first = false;
                    if (v) {
                        listener.lineStart();
                        listener.point(x, y);
                    }
                } else {
                    if (v && v_) listener.point(x, y); else {
                        var l = {
                            a: {
                                x: x_,
                                y: y_
                            },
                            b: {
                                x: x,
                                y: y
                            }
                        };
                        if (clipLine(l)) {
                            if (!v_) {
                                listener.lineStart();
                                listener.point(l.a.x, l.a.y);
                            }
                            listener.point(l.b.x, l.b.y);
                            if (!v) listener.lineEnd();
                            clean = false;
                        } else if (v) {
                            listener.lineStart();
                            listener.point(x, y);
                            clean = false;
                        }
                    }
                }
                x_ = x, y_ = y, v_ = v;
            }
            return clip;
        };
        function corner(p, direction) {
            return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
        }
        function compare(a, b) {
            return comparePoints(a.x, b.x);
        }
        function comparePoints(a, b) {
            var ca = corner(a, 1), cb = corner(b, 1);
            return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
        }
    }
    function d3_geo_compose(a, b) {
        function compose(x, y) {
            return x = a(x, y), b(x[0], x[1]);
        }
        if (a.invert && b.invert) compose.invert = function(x, y) {
            return x = b.invert(x, y), x && a.invert(x[0], x[1]);
        };
        return compose;
    }
    function d3_geo_conic(projectAt) {
        var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
        p.parallels = function(_) {
            if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
            return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
        };
        return p;
    }
    function d3_geo_conicEqualArea(φ0, φ1) {
        var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
        function forward(λ, φ) {
            var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
            return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
        }
        forward.invert = function(x, y) {
            var ρ0_y = ρ0 - y;
            return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
        };
        return forward;
    }
    (d3.geo.conicEqualArea = function() {
        return d3_geo_conic(d3_geo_conicEqualArea);
    }).raw = d3_geo_conicEqualArea;
    d3.geo.albers = function() {
        return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
    };
    d3.geo.albersUsa = function() {
        var lower48 = d3.geo.albers();
        var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
        var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
        var point, pointStream = {
            point: function(x, y) {
                point = [ x, y ];
            }
        }, lower48Point, alaskaPoint, hawaiiPoint;
        function albersUsa(coordinates) {
            var x = coordinates[0], y = coordinates[1];
            point = null;
            (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
            return point;
        }
        albersUsa.invert = function(coordinates) {
            var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
            return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
        };
        albersUsa.stream = function(stream) {
            var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
            return {
                point: function(x, y) {
                    lower48Stream.point(x, y);
                    alaskaStream.point(x, y);
                    hawaiiStream.point(x, y);
                },
                sphere: function() {
                    lower48Stream.sphere();
                    alaskaStream.sphere();
                    hawaiiStream.sphere();
                },
                lineStart: function() {
                    lower48Stream.lineStart();
                    alaskaStream.lineStart();
                    hawaiiStream.lineStart();
                },
                lineEnd: function() {
                    lower48Stream.lineEnd();
                    alaskaStream.lineEnd();
                    hawaiiStream.lineEnd();
                },
                polygonStart: function() {
                    lower48Stream.polygonStart();
                    alaskaStream.polygonStart();
                    hawaiiStream.polygonStart();
                },
                polygonEnd: function() {
                    lower48Stream.polygonEnd();
                    alaskaStream.polygonEnd();
                    hawaiiStream.polygonEnd();
                }
            };
        };
        albersUsa.precision = function(_) {
            if (!arguments.length) return lower48.precision();
            lower48.precision(_);
            alaska.precision(_);
            hawaii.precision(_);
            return albersUsa;
        };
        albersUsa.scale = function(_) {
            if (!arguments.length) return lower48.scale();
            lower48.scale(_);
            alaska.scale(_ * .35);
            hawaii.scale(_);
            return albersUsa.translate(lower48.translate());
        };
        albersUsa.translate = function(_) {
            if (!arguments.length) return lower48.translate();
            var k = lower48.scale(), x = +_[0], y = +_[1];
            lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
            alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
            hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
            return albersUsa;
        };
        return albersUsa.scale(1070);
    };
    var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
        point: d3_noop,
        lineStart: d3_noop,
        lineEnd: d3_noop,
        polygonStart: function() {
            d3_geo_pathAreaPolygon = 0;
            d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
        },
        polygonEnd: function() {
            d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
            d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
        }
    };
    function d3_geo_pathAreaRingStart() {
        var x00, y00, x0, y0;
        d3_geo_pathArea.point = function(x, y) {
            d3_geo_pathArea.point = nextPoint;
            x00 = x0 = x, y00 = y0 = y;
        };
        function nextPoint(x, y) {
            d3_geo_pathAreaPolygon += y0 * x - x0 * y;
            x0 = x, y0 = y;
        }
        d3_geo_pathArea.lineEnd = function() {
            nextPoint(x00, y00);
        };
    }
    var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
    var d3_geo_pathBounds = {
        point: d3_geo_pathBoundsPoint,
        lineStart: d3_noop,
        lineEnd: d3_noop,
        polygonStart: d3_noop,
        polygonEnd: d3_noop
    };
    function d3_geo_pathBoundsPoint(x, y) {
        if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
        if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
        if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
        if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
    }
    function d3_geo_pathBuffer() {
        var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
        var stream = {
            point: point,
            lineStart: function() {
                stream.point = pointLineStart;
            },
            lineEnd: lineEnd,
            polygonStart: function() {
                stream.lineEnd = lineEndPolygon;
            },
            polygonEnd: function() {
                stream.lineEnd = lineEnd;
                stream.point = point;
            },
            pointRadius: function(_) {
                pointCircle = d3_geo_pathBufferCircle(_);
                return stream;
            },
            result: function() {
                if (buffer.length) {
                    var result = buffer.join("");
                    buffer = [];
                    return result;
                }
            }
        };
        function point(x, y) {
            buffer.push("M", x, ",", y, pointCircle);
        }
        function pointLineStart(x, y) {
            buffer.push("M", x, ",", y);
            stream.point = pointLine;
        }
        function pointLine(x, y) {
            buffer.push("L", x, ",", y);
        }
        function lineEnd() {
            stream.point = point;
        }
        function lineEndPolygon() {
            buffer.push("Z");
        }
        return stream;
    }
    function d3_geo_pathBufferCircle(radius) {
        return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
    }
    var d3_geo_pathCentroid = {
        point: d3_geo_pathCentroidPoint,
        lineStart: d3_geo_pathCentroidLineStart,
        lineEnd: d3_geo_pathCentroidLineEnd,
        polygonStart: function() {
            d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
        },
        polygonEnd: function() {
            d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
            d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
            d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
        }
    };
    function d3_geo_pathCentroidPoint(x, y) {
        d3_geo_centroidX0 += x;
        d3_geo_centroidY0 += y;
        ++d3_geo_centroidZ0;
    }
    function d3_geo_pathCentroidLineStart() {
        var x0, y0;
        d3_geo_pathCentroid.point = function(x, y) {
            d3_geo_pathCentroid.point = nextPoint;
            d3_geo_pathCentroidPoint(x0 = x, y0 = y);
        };
        function nextPoint(x, y) {
            var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
            d3_geo_centroidX1 += z * (x0 + x) / 2;
            d3_geo_centroidY1 += z * (y0 + y) / 2;
            d3_geo_centroidZ1 += z;
            d3_geo_pathCentroidPoint(x0 = x, y0 = y);
        }
    }
    function d3_geo_pathCentroidLineEnd() {
        d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
    }
    function d3_geo_pathCentroidRingStart() {
        var x00, y00, x0, y0;
        d3_geo_pathCentroid.point = function(x, y) {
            d3_geo_pathCentroid.point = nextPoint;
            d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
        };
        function nextPoint(x, y) {
            var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
            d3_geo_centroidX1 += z * (x0 + x) / 2;
            d3_geo_centroidY1 += z * (y0 + y) / 2;
            d3_geo_centroidZ1 += z;
            z = y0 * x - x0 * y;
            d3_geo_centroidX2 += z * (x0 + x);
            d3_geo_centroidY2 += z * (y0 + y);
            d3_geo_centroidZ2 += z * 3;
            d3_geo_pathCentroidPoint(x0 = x, y0 = y);
        }
        d3_geo_pathCentroid.lineEnd = function() {
            nextPoint(x00, y00);
        };
    }
    function d3_geo_pathContext(context) {
        var pointRadius = 4.5;
        var stream = {
            point: point,
            lineStart: function() {
                stream.point = pointLineStart;
            },
            lineEnd: lineEnd,
            polygonStart: function() {
                stream.lineEnd = lineEndPolygon;
            },
            polygonEnd: function() {
                stream.lineEnd = lineEnd;
                stream.point = point;
            },
            pointRadius: function(_) {
                pointRadius = _;
                return stream;
            },
            result: d3_noop
        };
        function point(x, y) {
            context.moveTo(x, y);
            context.arc(x, y, pointRadius, 0, τ);
        }
        function pointLineStart(x, y) {
            context.moveTo(x, y);
            stream.point = pointLine;
        }
        function pointLine(x, y) {
            context.lineTo(x, y);
        }
        function lineEnd() {
            stream.point = point;
        }
        function lineEndPolygon() {
            context.closePath();
        }
        return stream;
    }
    function d3_geo_resample(project) {
        var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
        function resample(stream) {
            return (maxDepth ? resampleRecursive : resampleNone)(stream);
        }
        function resampleNone(stream) {
            return d3_geo_transformPoint(stream, function(x, y) {
                x = project(x, y);
                stream.point(x[0], x[1]);
            });
        }
        function resampleRecursive(stream) {
            var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
            var resample = {
                point: point,
                lineStart: lineStart,
                lineEnd: lineEnd,
                polygonStart: function() {
                    stream.polygonStart();
                    resample.lineStart = ringStart;
                },
                polygonEnd: function() {
                    stream.polygonEnd();
                    resample.lineStart = lineStart;
                }
            };
            function point(x, y) {
                x = project(x, y);
                stream.point(x[0], x[1]);
            }
            function lineStart() {
                x0 = NaN;
                resample.point = linePoint;
                stream.lineStart();
            }
            function linePoint(λ, φ) {
                var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
                resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
                stream.point(x0, y0);
            }
            function lineEnd() {
                resample.point = point;
                stream.lineEnd();
            }
            function ringStart() {
                lineStart();
                resample.point = ringPoint;
                resample.lineEnd = ringEnd;
            }
            function ringPoint(λ, φ) {
                linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
                resample.point = linePoint;
            }
            function ringEnd() {
                resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
                resample.lineEnd = lineEnd;
                lineEnd();
            }
            return resample;
        }
        function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
            var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
            if (d2 > 4 * δ2 && depth--) {
                var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
                if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
                    resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
                    stream.point(x2, y2);
                    resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
                }
            }
        }
        resample.precision = function(_) {
            if (!arguments.length) return Math.sqrt(δ2);
            maxDepth = (δ2 = _ * _) > 0 && 16;
            return resample;
        };
        return resample;
    }
    d3.geo.path = function() {
        var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
        function path(object) {
            if (object) {
                if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
                if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
                d3.geo.stream(object, cacheStream);
            }
            return contextStream.result();
        }
        path.area = function(object) {
            d3_geo_pathAreaSum = 0;
            d3.geo.stream(object, projectStream(d3_geo_pathArea));
            return d3_geo_pathAreaSum;
        };
        path.centroid = function(object) {
            d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
            d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
            return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
        };
        path.bounds = function(object) {
            d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
            d3.geo.stream(object, projectStream(d3_geo_pathBounds));
            return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
        };
        path.projection = function(_) {
            if (!arguments.length) return projection;
            projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
            return reset();
        };
        path.context = function(_) {
            if (!arguments.length) return context;
            contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
            if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
            return reset();
        };
        path.pointRadius = function(_) {
            if (!arguments.length) return pointRadius;
            pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
            return path;
        };
        function reset() {
            cacheStream = null;
            return path;
        }
        return path.projection(d3.geo.albersUsa()).context(null);
    };
    function d3_geo_pathProjectStream(project) {
        var resample = d3_geo_resample(function(x, y) {
            return project([ x * d3_degrees, y * d3_degrees ]);
        });
        return function(stream) {
            return d3_geo_projectionRadians(resample(stream));
        };
    }
    d3.geo.transform = function(methods) {
        return {
            stream: function(stream) {
                var transform = new d3_geo_transform(stream);
                for (var k in methods) transform[k] = methods[k];
                return transform;
            }
        };
    };
    function d3_geo_transform(stream) {
        this.stream = stream;
    }
    d3_geo_transform.prototype = {
        point: function(x, y) {
            this.stream.point(x, y);
        },
        sphere: function() {
            this.stream.sphere();
        },
        lineStart: function() {
            this.stream.lineStart();
        },
        lineEnd: function() {
            this.stream.lineEnd();
        },
        polygonStart: function() {
            this.stream.polygonStart();
        },
        polygonEnd: function() {
            this.stream.polygonEnd();
        }
    };
    function d3_geo_transformPoint(stream, point) {
        return {
            point: point,
            sphere: function() {
                stream.sphere();
            },
            lineStart: function() {
                stream.lineStart();
            },
            lineEnd: function() {
                stream.lineEnd();
            },
            polygonStart: function() {
                stream.polygonStart();
            },
            polygonEnd: function() {
                stream.polygonEnd();
            }
        };
    }
    d3.geo.projection = d3_geo_projection;
    d3.geo.projectionMutator = d3_geo_projectionMutator;
    function d3_geo_projection(project) {
        return d3_geo_projectionMutator(function() {
            return project;
        })();
    }
    function d3_geo_projectionMutator(projectAt) {
        var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
            x = project(x, y);
            return [ x[0] * k + δx, δy - x[1] * k ];
        }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
        function projection(point) {
            point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
            return [ point[0] * k + δx, δy - point[1] * k ];
        }
        function invert(point) {
            point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
            return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
        }
        projection.stream = function(output) {
            if (stream) stream.valid = false;
            stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
            stream.valid = true;
            return stream;
        };
        projection.clipAngle = function(_) {
            if (!arguments.length) return clipAngle;
            preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
            return invalidate();
        };
        projection.clipExtent = function(_) {
            if (!arguments.length) return clipExtent;
            clipExtent = _;
            postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
            return invalidate();
        };
        projection.scale = function(_) {
            if (!arguments.length) return k;
            k = +_;
            return reset();
        };
        projection.translate = function(_) {
            if (!arguments.length) return [ x, y ];
            x = +_[0];
            y = +_[1];
            return reset();
        };
        projection.center = function(_) {
            if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
            λ = _[0] % 360 * d3_radians;
            φ = _[1] % 360 * d3_radians;
            return reset();
        };
        projection.rotate = function(_) {
            if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
            δλ = _[0] % 360 * d3_radians;
            δφ = _[1] % 360 * d3_radians;
            δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
            return reset();
        };
        d3.rebind(projection, projectResample, "precision");
        function reset() {
            projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
            var center = project(λ, φ);
            δx = x - center[0] * k;
            δy = y + center[1] * k;
            return invalidate();
        }
        function invalidate() {
            if (stream) stream.valid = false, stream = null;
            return projection;
        }
        return function() {
            project = projectAt.apply(this, arguments);
            projection.invert = project.invert && invert;
            return reset();
        };
    }
    function d3_geo_projectionRadians(stream) {
        return d3_geo_transformPoint(stream, function(x, y) {
            stream.point(x * d3_radians, y * d3_radians);
        });
    }
    function d3_geo_equirectangular(λ, φ) {
        return [ λ, φ ];
    }
    (d3.geo.equirectangular = function() {
        return d3_geo_projection(d3_geo_equirectangular);
    }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
    d3.geo.rotation = function(rotate) {
        rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
        function forward(coordinates) {
            coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
            return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
        }
        forward.invert = function(coordinates) {
            coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
            return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
        };
        return forward;
    };
    function d3_geo_identityRotation(λ, φ) {
        return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
    }
    d3_geo_identityRotation.invert = d3_geo_equirectangular;
    function d3_geo_rotation(δλ, δφ, δγ) {
        return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
    }
    function d3_geo_forwardRotationλ(δλ) {
        return function(λ, φ) {
            return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
        };
    }
    function d3_geo_rotationλ(δλ) {
        var rotation = d3_geo_forwardRotationλ(δλ);
        rotation.invert = d3_geo_forwardRotationλ(-δλ);
        return rotation;
    }
    function d3_geo_rotationφγ(δφ, δγ) {
        var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
        function rotation(λ, φ) {
            var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
            return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
        }
        rotation.invert = function(λ, φ) {
            var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
            return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
        };
        return rotation;
    }
    d3.geo.circle = function() {
        var origin = [ 0, 0 ], angle, precision = 6, interpolate;
        function circle() {
            var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
            interpolate(null, null, 1, {
                point: function(x, y) {
                    ring.push(x = rotate(x, y));
                    x[0] *= d3_degrees, x[1] *= d3_degrees;
                }
            });
            return {
                type: "Polygon",
                coordinates: [ ring ]
            };
        }
        circle.origin = function(x) {
            if (!arguments.length) return origin;
            origin = x;
            return circle;
        };
        circle.angle = function(x) {
            if (!arguments.length) return angle;
            interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
            return circle;
        };
        circle.precision = function(_) {
            if (!arguments.length) return precision;
            interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
            return circle;
        };
        return circle.angle(90);
    };
    function d3_geo_circleInterpolate(radius, precision) {
        var cr = Math.cos(radius), sr = Math.sin(radius);
        return function(from, to, direction, listener) {
            var step = direction * precision;
            if (from != null) {
                from = d3_geo_circleAngle(cr, from);
                to = d3_geo_circleAngle(cr, to);
                if (direction > 0 ? from < to : from > to) from += direction * τ;
            } else {
                from = radius + direction * τ;
                to = radius - .5 * step;
            }
            for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
                listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
            }
        };
    }
    function d3_geo_circleAngle(cr, point) {
        var a = d3_geo_cartesian(point);
        a[0] -= cr;
        d3_geo_cartesianNormalize(a);
        var angle = d3_acos(-a[1]);
        return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
    }
    d3.geo.distance = function(a, b) {
        var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
        return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
    };
    d3.geo.graticule = function() {
        var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
        function graticule() {
            return {
                type: "MultiLineString",
                coordinates: lines()
            };
        }
        function lines() {
            return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
                    return abs(x % DX) > ε;
                }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
                    return abs(y % DY) > ε;
                }).map(y));
        }
        graticule.lines = function() {
            return lines().map(function(coordinates) {
                return {
                    type: "LineString",
                    coordinates: coordinates
                };
            });
        };
        graticule.outline = function() {
            return {
                type: "Polygon",
                coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
            };
        };
        graticule.extent = function(_) {
            if (!arguments.length) return graticule.minorExtent();
            return graticule.majorExtent(_).minorExtent(_);
        };
        graticule.majorExtent = function(_) {
            if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
            X0 = +_[0][0], X1 = +_[1][0];
            Y0 = +_[0][1], Y1 = +_[1][1];
            if (X0 > X1) _ = X0, X0 = X1, X1 = _;
            if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
            return graticule.precision(precision);
        };
        graticule.minorExtent = function(_) {
            if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
            x0 = +_[0][0], x1 = +_[1][0];
            y0 = +_[0][1], y1 = +_[1][1];
            if (x0 > x1) _ = x0, x0 = x1, x1 = _;
            if (y0 > y1) _ = y0, y0 = y1, y1 = _;
            return graticule.precision(precision);
        };
        graticule.step = function(_) {
            if (!arguments.length) return graticule.minorStep();
            return graticule.majorStep(_).minorStep(_);
        };
        graticule.majorStep = function(_) {
            if (!arguments.length) return [ DX, DY ];
            DX = +_[0], DY = +_[1];
            return graticule;
        };
        graticule.minorStep = function(_) {
            if (!arguments.length) return [ dx, dy ];
            dx = +_[0], dy = +_[1];
            return graticule;
        };
        graticule.precision = function(_) {
            if (!arguments.length) return precision;
            precision = +_;
            x = d3_geo_graticuleX(y0, y1, 90);
            y = d3_geo_graticuleY(x0, x1, precision);
            X = d3_geo_graticuleX(Y0, Y1, 90);
            Y = d3_geo_graticuleY(X0, X1, precision);
            return graticule;
        };
        return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
    };
    function d3_geo_graticuleX(y0, y1, dy) {
        var y = d3.range(y0, y1 - ε, dy).concat(y1);
        return function(x) {
            return y.map(function(y) {
                return [ x, y ];
            });
        };
    }
    function d3_geo_graticuleY(x0, x1, dx) {
        var x = d3.range(x0, x1 - ε, dx).concat(x1);
        return function(y) {
            return x.map(function(x) {
                return [ x, y ];
            });
        };
    }
    function d3_source(d) {
        return d.source;
    }
    function d3_target(d) {
        return d.target;
    }
    d3.geo.greatArc = function() {
        var source = d3_source, source_, target = d3_target, target_;
        function greatArc() {
            return {
                type: "LineString",
                coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
            };
        }
        greatArc.distance = function() {
            return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
        };
        greatArc.source = function(_) {
            if (!arguments.length) return source;
            source = _, source_ = typeof _ === "function" ? null : _;
            return greatArc;
        };
        greatArc.target = function(_) {
            if (!arguments.length) return target;
            target = _, target_ = typeof _ === "function" ? null : _;
            return greatArc;
        };
        greatArc.precision = function() {
            return arguments.length ? greatArc : 0;
        };
        return greatArc;
    };
    d3.geo.interpolate = function(source, target) {
        return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
    };
    function d3_geo_interpolate(x0, y0, x1, y1) {
        var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
        var interpolate = d ? function(t) {
            var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
            return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
        } : function() {
            return [ x0 * d3_degrees, y0 * d3_degrees ];
        };
        interpolate.distance = d;
        return interpolate;
    }
    d3.geo.length = function(object) {
        d3_geo_lengthSum = 0;
        d3.geo.stream(object, d3_geo_length);
        return d3_geo_lengthSum;
    };
    var d3_geo_lengthSum;
    var d3_geo_length = {
        sphere: d3_noop,
        point: d3_noop,
        lineStart: d3_geo_lengthLineStart,
        lineEnd: d3_noop,
        polygonStart: d3_noop,
        polygonEnd: d3_noop
    };
    function d3_geo_lengthLineStart() {
        var λ0, sinφ0, cosφ0;
        d3_geo_length.point = function(λ, φ) {
            λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
            d3_geo_length.point = nextPoint;
        };
        d3_geo_length.lineEnd = function() {
            d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
        };
        function nextPoint(λ, φ) {
            var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
            d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
            λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
        }
    }
    function d3_geo_azimuthal(scale, angle) {
        function azimuthal(λ, φ) {
            var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
            return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
        }
        azimuthal.invert = function(x, y) {
            var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
            return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
        };
        return azimuthal;
    }
    var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
        return Math.sqrt(2 / (1 + cosλcosφ));
    }, function(ρ) {
        return 2 * Math.asin(ρ / 2);
    });
    (d3.geo.azimuthalEqualArea = function() {
        return d3_geo_projection(d3_geo_azimuthalEqualArea);
    }).raw = d3_geo_azimuthalEqualArea;
    var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
        var c = Math.acos(cosλcosφ);
        return c && c / Math.sin(c);
    }, d3_identity);
    (d3.geo.azimuthalEquidistant = function() {
        return d3_geo_projection(d3_geo_azimuthalEquidistant);
    }).raw = d3_geo_azimuthalEquidistant;
    function d3_geo_conicConformal(φ0, φ1) {
        var cosφ0 = Math.cos(φ0), t = function(φ) {
            return Math.tan(π / 4 + φ / 2);
        }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
        if (!n) return d3_geo_mercator;
        function forward(λ, φ) {
            var ρ = abs(abs(φ) - halfπ) < ε ? 0 : F / Math.pow(t(φ), n);
            return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
        }
        forward.invert = function(x, y) {
            var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
            return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
        };
        return forward;
    }
    (d3.geo.conicConformal = function() {
        return d3_geo_conic(d3_geo_conicConformal);
    }).raw = d3_geo_conicConformal;
    function d3_geo_conicEquidistant(φ0, φ1) {
        var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
        if (abs(n) < ε) return d3_geo_equirectangular;
        function forward(λ, φ) {
            var ρ = G - φ;
            return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
        }
        forward.invert = function(x, y) {
            var ρ0_y = G - y;
            return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
        };
        return forward;
    }
    (d3.geo.conicEquidistant = function() {
        return d3_geo_conic(d3_geo_conicEquidistant);
    }).raw = d3_geo_conicEquidistant;
    var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
        return 1 / cosλcosφ;
    }, Math.atan);
    (d3.geo.gnomonic = function() {
        return d3_geo_projection(d3_geo_gnomonic);
    }).raw = d3_geo_gnomonic;
    function d3_geo_mercator(λ, φ) {
        return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
    }
    d3_geo_mercator.invert = function(x, y) {
        return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
    };
    function d3_geo_mercatorProjection(project) {
        var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
        m.scale = function() {
            var v = scale.apply(m, arguments);
            return v === m ? clipAuto ? m.clipExtent(null) : m : v;
        };
        m.translate = function() {
            var v = translate.apply(m, arguments);
            return v === m ? clipAuto ? m.clipExtent(null) : m : v;
        };
        m.clipExtent = function(_) {
            var v = clipExtent.apply(m, arguments);
            if (v === m) {
                if (clipAuto = _ == null) {
                    var k = π * scale(), t = translate();
                    clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
                }
            } else if (clipAuto) {
                v = null;
            }
            return v;
        };
        return m.clipExtent(null);
    }
    (d3.geo.mercator = function() {
        return d3_geo_mercatorProjection(d3_geo_mercator);
    }).raw = d3_geo_mercator;
    var d3_geo_orthographic = d3_geo_azimuthal(function() {
        return 1;
    }, Math.asin);
    (d3.geo.orthographic = function() {
        return d3_geo_projection(d3_geo_orthographic);
    }).raw = d3_geo_orthographic;
    var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
        return 1 / (1 + cosλcosφ);
    }, function(ρ) {
        return 2 * Math.atan(ρ);
    });
    (d3.geo.stereographic = function() {
        return d3_geo_projection(d3_geo_stereographic);
    }).raw = d3_geo_stereographic;
    function d3_geo_transverseMercator(λ, φ) {
        return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
    }
    d3_geo_transverseMercator.invert = function(x, y) {
        return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
    };
    (d3.geo.transverseMercator = function() {
        var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
        projection.center = function(_) {
            return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ -_[1], _[0] ]);
        };
        projection.rotate = function(_) {
            return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(),
                [ _[0], _[1], _[2] - 90 ]);
        };
        return projection.rotate([ 0, 0 ]);
    }).raw = d3_geo_transverseMercator;
    d3.geom = {};
    function d3_geom_pointX(d) {
        return d[0];
    }
    function d3_geom_pointY(d) {
        return d[1];
    }
    d3.geom.hull = function(vertices) {
        var x = d3_geom_pointX, y = d3_geom_pointY;
        if (arguments.length) return hull(vertices);
        function hull(data) {
            if (data.length < 3) return [];
            var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
            for (i = 0; i < n; i++) {
                points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
            }
            points.sort(d3_geom_hullOrder);
            for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
            var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
            var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
            for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
            for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
            return polygon;
        }
        hull.x = function(_) {
            return arguments.length ? (x = _, hull) : x;
        };
        hull.y = function(_) {
            return arguments.length ? (y = _, hull) : y;
        };
        return hull;
    };
    function d3_geom_hullUpper(points) {
        var n = points.length, hull = [ 0, 1 ], hs = 2;
        for (var i = 2; i < n; i++) {
            while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
            hull[hs++] = i;
        }
        return hull.slice(0, hs);
    }
    function d3_geom_hullOrder(a, b) {
        return a[0] - b[0] || a[1] - b[1];
    }
    d3.geom.polygon = function(coordinates) {
        d3_subclass(coordinates, d3_geom_polygonPrototype);
        return coordinates;
    };
    var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
    d3_geom_polygonPrototype.area = function() {
        var i = -1, n = this.length, a, b = this[n - 1], area = 0;
        while (++i < n) {
            a = b;
            b = this[i];
            area += a[1] * b[0] - a[0] * b[1];
        }
        return area * .5;
    };
    d3_geom_polygonPrototype.centroid = function(k) {
        var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
        if (!arguments.length) k = -1 / (6 * this.area());
        while (++i < n) {
            a = b;
            b = this[i];
            c = a[0] * b[1] - b[0] * a[1];
            x += (a[0] + b[0]) * c;
            y += (a[1] + b[1]) * c;
        }
        return [ x * k, y * k ];
    };
    d3_geom_polygonPrototype.clip = function(subject) {
        var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
        while (++i < n) {
            input = subject.slice();
            subject.length = 0;
            b = this[i];
            c = input[(m = input.length - closed) - 1];
            j = -1;
            while (++j < m) {
                d = input[j];
                if (d3_geom_polygonInside(d, a, b)) {
                    if (!d3_geom_polygonInside(c, a, b)) {
                        subject.push(d3_geom_polygonIntersect(c, d, a, b));
                    }
                    subject.push(d);
                } else if (d3_geom_polygonInside(c, a, b)) {
                    subject.push(d3_geom_polygonIntersect(c, d, a, b));
                }
                c = d;
            }
            if (closed) subject.push(subject[0]);
            a = b;
        }
        return subject;
    };
    function d3_geom_polygonInside(p, a, b) {
        return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
    }
    function d3_geom_polygonIntersect(c, d, a, b) {
        var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
        return [ x1 + ua * x21, y1 + ua * y21 ];
    }
    function d3_geom_polygonClosed(coordinates) {
        var a = coordinates[0], b = coordinates[coordinates.length - 1];
        return !(a[0] - b[0] || a[1] - b[1]);
    }
    var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
    function d3_geom_voronoiBeach() {
        d3_geom_voronoiRedBlackNode(this);
        this.edge = this.site = this.circle = null;
    }
    function d3_geom_voronoiCreateBeach(site) {
        var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
        beach.site = site;
        return beach;
    }
    function d3_geom_voronoiDetachBeach(beach) {
        d3_geom_voronoiDetachCircle(beach);
        d3_geom_voronoiBeaches.remove(beach);
        d3_geom_voronoiBeachPool.push(beach);
        d3_geom_voronoiRedBlackNode(beach);
    }
    function d3_geom_voronoiRemoveBeach(beach) {
        var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
            x: x,
            y: y
        }, previous = beach.P, next = beach.N, disappearing = [ beach ];
        d3_geom_voronoiDetachBeach(beach);
        var lArc = previous;
        while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
            previous = lArc.P;
            disappearing.unshift(lArc);
            d3_geom_voronoiDetachBeach(lArc);
            lArc = previous;
        }
        disappearing.unshift(lArc);
        d3_geom_voronoiDetachCircle(lArc);
        var rArc = next;
        while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
            next = rArc.N;
            disappearing.push(rArc);
            d3_geom_voronoiDetachBeach(rArc);
            rArc = next;
        }
        disappearing.push(rArc);
        d3_geom_voronoiDetachCircle(rArc);
        var nArcs = disappearing.length, iArc;
        for (iArc = 1; iArc < nArcs; ++iArc) {
            rArc = disappearing[iArc];
            lArc = disappearing[iArc - 1];
            d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
        }
        lArc = disappearing[0];
        rArc = disappearing[nArcs - 1];
        rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
        d3_geom_voronoiAttachCircle(lArc);
        d3_geom_voronoiAttachCircle(rArc);
    }
    function d3_geom_voronoiAddBeach(site) {
        var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
        while (node) {
            dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
            if (dxl > ε) node = node.L; else {
                dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
                if (dxr > ε) {
                    if (!node.R) {
                        lArc = node;
                        break;
                    }
                    node = node.R;
                } else {
                    if (dxl > -ε) {
                        lArc = node.P;
                        rArc = node;
                    } else if (dxr > -ε) {
                        lArc = node;
                        rArc = node.N;
                    } else {
                        lArc = rArc = node;
                    }
                    break;
                }
            }
        }
        var newArc = d3_geom_voronoiCreateBeach(site);
        d3_geom_voronoiBeaches.insert(lArc, newArc);
        if (!lArc && !rArc) return;
        if (lArc === rArc) {
            d3_geom_voronoiDetachCircle(lArc);
            rArc = d3_geom_voronoiCreateBeach(lArc.site);
            d3_geom_voronoiBeaches.insert(newArc, rArc);
            newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
            d3_geom_voronoiAttachCircle(lArc);
            d3_geom_voronoiAttachCircle(rArc);
            return;
        }
        if (!rArc) {
            newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
            return;
        }
        d3_geom_voronoiDetachCircle(lArc);
        d3_geom_voronoiDetachCircle(rArc);
        var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
            x: (cy * hb - by * hc) / d + ax,
            y: (bx * hc - cx * hb) / d + ay
        };
        d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
        newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
        rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
        d3_geom_voronoiAttachCircle(lArc);
        d3_geom_voronoiAttachCircle(rArc);
    }
    function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
        var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
        if (!pby2) return rfocx;
        var lArc = arc.P;
        if (!lArc) return -Infinity;
        site = lArc.site;
        var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
        if (!plby2) return lfocx;
        var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
        if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
        return (rfocx + lfocx) / 2;
    }
    function d3_geom_voronoiRightBreakPoint(arc, directrix) {
        var rArc = arc.N;
        if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
        var site = arc.site;
        return site.y === directrix ? site.x : Infinity;
    }
    function d3_geom_voronoiCell(site) {
        this.site = site;
        this.edges = [];
    }
    d3_geom_voronoiCell.prototype.prepare = function() {
        var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
        while (iHalfEdge--) {
            edge = halfEdges[iHalfEdge].edge;
            if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
        }
        halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
        return halfEdges.length;
    };
    function d3_geom_voronoiCloseCells(extent) {
        var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
        while (iCell--) {
            cell = cells[iCell];
            if (!cell || !cell.prepare()) continue;
            halfEdges = cell.edges;
            nHalfEdges = halfEdges.length;
            iHalfEdge = 0;
            while (iHalfEdge < nHalfEdges) {
                end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
                start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
                if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
                    halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
                        x: x0,
                        y: abs(x2 - x0) < ε ? y2 : y1
                    } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
                        x: abs(y2 - y1) < ε ? x2 : x1,
                        y: y1
                    } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
                        x: x1,
                        y: abs(x2 - x1) < ε ? y2 : y0
                    } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
                        x: abs(y2 - y0) < ε ? x2 : x0,
                        y: y0
                    } : null), cell.site, null));
                    ++nHalfEdges;
                }
            }
        }
    }
    function d3_geom_voronoiHalfEdgeOrder(a, b) {
        return b.angle - a.angle;
    }
    function d3_geom_voronoiCircle() {
        d3_geom_voronoiRedBlackNode(this);
        this.x = this.y = this.arc = this.site = this.cy = null;
    }
    function d3_geom_voronoiAttachCircle(arc) {
        var lArc = arc.P, rArc = arc.N;
        if (!lArc || !rArc) return;
        var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
        if (lSite === rSite) return;
        var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
        var d = 2 * (ax * cy - ay * cx);
        if (d >= -ε2) return;
        var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
        var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
        circle.arc = arc;
        circle.site = cSite;
        circle.x = x + bx;
        circle.y = cy + Math.sqrt(x * x + y * y);
        circle.cy = cy;
        arc.circle = circle;
        var before = null, node = d3_geom_voronoiCircles._;
        while (node) {
            if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
                if (node.L) node = node.L; else {
                    before = node.P;
                    break;
                }
            } else {
                if (node.R) node = node.R; else {
                    before = node;
                    break;
                }
            }
        }
        d3_geom_voronoiCircles.insert(before, circle);
        if (!before) d3_geom_voronoiFirstCircle = circle;
    }
    function d3_geom_voronoiDetachCircle(arc) {
        var circle = arc.circle;
        if (circle) {
            if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
            d3_geom_voronoiCircles.remove(circle);
            d3_geom_voronoiCirclePool.push(circle);
            d3_geom_voronoiRedBlackNode(circle);
            arc.circle = null;
        }
    }
    function d3_geom_voronoiClipEdges(extent) {
        var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
        while (i--) {
            e = edges[i];
            if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
                e.a = e.b = null;
                edges.splice(i, 1);
            }
        }
    }
    function d3_geom_voronoiConnectEdge(edge, extent) {
        var vb = edge.b;
        if (vb) return true;
        var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
        if (ry === ly) {
            if (fx < x0 || fx >= x1) return;
            if (lx > rx) {
                if (!va) va = {
                    x: fx,
                    y: y0
                }; else if (va.y >= y1) return;
                vb = {
                    x: fx,
                    y: y1
                };
            } else {
                if (!va) va = {
                    x: fx,
                    y: y1
                }; else if (va.y < y0) return;
                vb = {
                    x: fx,
                    y: y0
                };
            }
        } else {
            fm = (lx - rx) / (ry - ly);
            fb = fy - fm * fx;
            if (fm < -1 || fm > 1) {
                if (lx > rx) {
                    if (!va) va = {
                        x: (y0 - fb) / fm,
                        y: y0
                    }; else if (va.y >= y1) return;
                    vb = {
                        x: (y1 - fb) / fm,
                        y: y1
                    };
                } else {
                    if (!va) va = {
                        x: (y1 - fb) / fm,
                        y: y1
                    }; else if (va.y < y0) return;
                    vb = {
                        x: (y0 - fb) / fm,
                        y: y0
                    };
                }
            } else {
                if (ly < ry) {
                    if (!va) va = {
                        x: x0,
                        y: fm * x0 + fb
                    }; else if (va.x >= x1) return;
                    vb = {
                        x: x1,
                        y: fm * x1 + fb
                    };
                } else {
                    if (!va) va = {
                        x: x1,
                        y: fm * x1 + fb
                    }; else if (va.x < x0) return;
                    vb = {
                        x: x0,
                        y: fm * x0 + fb
                    };
                }
            }
        }
        edge.a = va;
        edge.b = vb;
        return true;
    }
    function d3_geom_voronoiEdge(lSite, rSite) {
        this.l = lSite;
        this.r = rSite;
        this.a = this.b = null;
    }
    function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
        var edge = new d3_geom_voronoiEdge(lSite, rSite);
        d3_geom_voronoiEdges.push(edge);
        if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
        if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
        d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
        d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
        return edge;
    }
    function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
        var edge = new d3_geom_voronoiEdge(lSite, null);
        edge.a = va;
        edge.b = vb;
        d3_geom_voronoiEdges.push(edge);
        return edge;
    }
    function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
        if (!edge.a && !edge.b) {
            edge.a = vertex;
            edge.l = lSite;
            edge.r = rSite;
        } else if (edge.l === rSite) {
            edge.b = vertex;
        } else {
            edge.a = vertex;
        }
    }
    function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
        var va = edge.a, vb = edge.b;
        this.edge = edge;
        this.site = lSite;
        this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
    }
    d3_geom_voronoiHalfEdge.prototype = {
        start: function() {
            return this.edge.l === this.site ? this.edge.a : this.edge.b;
        },
        end: function() {
            return this.edge.l === this.site ? this.edge.b : this.edge.a;
        }
    };
    function d3_geom_voronoiRedBlackTree() {
        this._ = null;
    }
    function d3_geom_voronoiRedBlackNode(node) {
        node.U = node.C = node.L = node.R = node.P = node.N = null;
    }
    d3_geom_voronoiRedBlackTree.prototype = {
        insert: function(after, node) {
            var parent, grandpa, uncle;
            if (after) {
                node.P = after;
                node.N = after.N;
                if (after.N) after.N.P = node;
                after.N = node;
                if (after.R) {
                    after = after.R;
                    while (after.L) after = after.L;
                    after.L = node;
                } else {
                    after.R = node;
                }
                parent = after;
            } else if (this._) {
                after = d3_geom_voronoiRedBlackFirst(this._);
                node.P = null;
                node.N = after;
                after.P = after.L = node;
                parent = after;
            } else {
                node.P = node.N = null;
                this._ = node;
                parent = null;
            }
            node.L = node.R = null;
            node.U = parent;
            node.C = true;
            after = node;
            while (parent && parent.C) {
                grandpa = parent.U;
                if (parent === grandpa.L) {
                    uncle = grandpa.R;
                    if (uncle && uncle.C) {
                        parent.C = uncle.C = false;
                        grandpa.C = true;
                        after = grandpa;
                    } else {
                        if (after === parent.R) {
                            d3_geom_voronoiRedBlackRotateLeft(this, parent);
                            after = parent;
                            parent = after.U;
                        }
                        parent.C = false;
                        grandpa.C = true;
                        d3_geom_voronoiRedBlackRotateRight(this, grandpa);
                    }
                } else {
                    uncle = grandpa.L;
                    if (uncle && uncle.C) {
                        parent.C = uncle.C = false;
                        grandpa.C = true;
                        after = grandpa;
                    } else {
                        if (after === parent.L) {
                            d3_geom_voronoiRedBlackRotateRight(this, parent);
                            after = parent;
                            parent = after.U;
                        }
                        parent.C = false;
                        grandpa.C = true;
                        d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
                    }
                }
                parent = after.U;
            }
            this._.C = false;
        },
        remove: function(node) {
            if (node.N) node.N.P = node.P;
            if (node.P) node.P.N = node.N;
            node.N = node.P = null;
            var parent = node.U, sibling, left = node.L, right = node.R, next, red;
            if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
            if (parent) {
                if (parent.L === node) parent.L = next; else parent.R = next;
            } else {
                this._ = next;
            }
            if (left && right) {
                red = next.C;
                next.C = node.C;
                next.L = left;
                left.U = next;
                if (next !== right) {
                    parent = next.U;
                    next.U = node.U;
                    node = next.R;
                    parent.L = node;
                    next.R = right;
                    right.U = next;
                } else {
                    next.U = parent;
                    parent = next;
                    node = next.R;
                }
            } else {
                red = node.C;
                node = next;
            }
            if (node) node.U = parent;
            if (red) return;
            if (node && node.C) {
                node.C = false;
                return;
            }
            do {
                if (node === this._) break;
                if (node === parent.L) {
                    sibling = parent.R;
                    if (sibling.C) {
                        sibling.C = false;
                        parent.C = true;
                        d3_geom_voronoiRedBlackRotateLeft(this, parent);
                        sibling = parent.R;
                    }
                    if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
                        if (!sibling.R || !sibling.R.C) {
                            sibling.L.C = false;
                            sibling.C = true;
                            d3_geom_voronoiRedBlackRotateRight(this, sibling);
                            sibling = parent.R;
                        }
                        sibling.C = parent.C;
                        parent.C = sibling.R.C = false;
                        d3_geom_voronoiRedBlackRotateLeft(this, parent);
                        node = this._;
                        break;
                    }
                } else {
                    sibling = parent.L;
                    if (sibling.C) {
                        sibling.C = false;
                        parent.C = true;
                        d3_geom_voronoiRedBlackRotateRight(this, parent);
                        sibling = parent.L;
                    }
                    if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
                        if (!sibling.L || !sibling.L.C) {
                            sibling.R.C = false;
                            sibling.C = true;
                            d3_geom_voronoiRedBlackRotateLeft(this, sibling);
                            sibling = parent.L;
                        }
                        sibling.C = parent.C;
                        parent.C = sibling.L.C = false;
                        d3_geom_voronoiRedBlackRotateRight(this, parent);
                        node = this._;
                        break;
                    }
                }
                sibling.C = true;
                node = parent;
                parent = parent.U;
            } while (!node.C);
            if (node) node.C = false;
        }
    };
    function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
        var p = node, q = node.R, parent = p.U;
        if (parent) {
            if (parent.L === p) parent.L = q; else parent.R = q;
        } else {
            tree._ = q;
        }
        q.U = parent;
        p.U = q;
        p.R = q.L;
        if (p.R) p.R.U = p;
        q.L = p;
    }
    function d3_geom_voronoiRedBlackRotateRight(tree, node) {
        var p = node, q = node.L, parent = p.U;
        if (parent) {
            if (parent.L === p) parent.L = q; else parent.R = q;
        } else {
            tree._ = q;
        }
        q.U = parent;
        p.U = q;
        p.L = q.R;
        if (p.L) p.L.U = p;
        q.R = p;
    }
    function d3_geom_voronoiRedBlackFirst(node) {
        while (node.L) node = node.L;
        return node;
    }
    function d3_geom_voronoi(sites, bbox) {
        var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
        d3_geom_voronoiEdges = [];
        d3_geom_voronoiCells = new Array(sites.length);
        d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
        d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
        while (true) {
            circle = d3_geom_voronoiFirstCircle;
            if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
                if (site.x !== x0 || site.y !== y0) {
                    d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
                    d3_geom_voronoiAddBeach(site);
                    x0 = site.x, y0 = site.y;
                }
                site = sites.pop();
            } else if (circle) {
                d3_geom_voronoiRemoveBeach(circle.arc);
            } else {
                break;
            }
        }
        if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
        var diagram = {
            cells: d3_geom_voronoiCells,
            edges: d3_geom_voronoiEdges
        };
        d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
        return diagram;
    }
    function d3_geom_voronoiVertexOrder(a, b) {
        return b.y - a.y || b.x - a.x;
    }
    d3.geom.voronoi = function(points) {
        var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
        if (points) return voronoi(points);
        function voronoi(data) {
            var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
            d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
                var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
                    var s = e.start();
                    return [ s.x, s.y ];
                }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
                polygon.point = data[i];
            });
            return polygons;
        }
        function sites(data) {
            return data.map(function(d, i) {
                return {
                    x: Math.round(fx(d, i) / ε) * ε,
                    y: Math.round(fy(d, i) / ε) * ε,
                    i: i
                };
            });
        }
        voronoi.links = function(data) {
            return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
                return edge.l && edge.r;
            }).map(function(edge) {
                    return {
                        source: data[edge.l.i],
                        target: data[edge.r.i]
                    };
                });
        };
        voronoi.triangles = function(data) {
            var triangles = [];
            d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
                var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
                while (++j < m) {
                    e0 = e1;
                    s0 = s1;
                    e1 = edges[j].edge;
                    s1 = e1.l === site ? e1.r : e1.l;
                    if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
                        triangles.push([ data[i], data[s0.i], data[s1.i] ]);
                    }
                }
            });
            return triangles;
        };
        voronoi.x = function(_) {
            return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
        };
        voronoi.y = function(_) {
            return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
        };
        voronoi.clipExtent = function(_) {
            if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
            clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
            return voronoi;
        };
        voronoi.size = function(_) {
            if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
            return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
        };
        return voronoi;
    };
    var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
    function d3_geom_voronoiTriangleArea(a, b, c) {
        return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
    }
    d3.geom.delaunay = function(vertices) {
        return d3.geom.voronoi().triangles(vertices);
    };
    d3.geom.quadtree = function(points, x1, y1, x2, y2) {
        var x = d3_geom_pointX, y = d3_geom_pointY, compat;
        if (compat = arguments.length) {
            x = d3_geom_quadtreeCompatX;
            y = d3_geom_quadtreeCompatY;
            if (compat === 3) {
                y2 = y1;
                x2 = x1;
                y1 = x1 = 0;
            }
            return quadtree(points);
        }
        function quadtree(data) {
            var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
            if (x1 != null) {
                x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
            } else {
                x2_ = y2_ = -(x1_ = y1_ = Infinity);
                xs = [], ys = [];
                n = data.length;
                if (compat) for (i = 0; i < n; ++i) {
                    d = data[i];
                    if (d.x < x1_) x1_ = d.x;
                    if (d.y < y1_) y1_ = d.y;
                    if (d.x > x2_) x2_ = d.x;
                    if (d.y > y2_) y2_ = d.y;
                    xs.push(d.x);
                    ys.push(d.y);
                } else for (i = 0; i < n; ++i) {
                    var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
                    if (x_ < x1_) x1_ = x_;
                    if (y_ < y1_) y1_ = y_;
                    if (x_ > x2_) x2_ = x_;
                    if (y_ > y2_) y2_ = y_;
                    xs.push(x_);
                    ys.push(y_);
                }
            }
            var dx = x2_ - x1_, dy = y2_ - y1_;
            if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
            function insert(n, d, x, y, x1, y1, x2, y2) {
                if (isNaN(x) || isNaN(y)) return;
                if (n.leaf) {
                    var nx = n.x, ny = n.y;
                    if (nx != null) {
                        if (abs(nx - x) + abs(ny - y) < .01) {
                            insertChild(n, d, x, y, x1, y1, x2, y2);
                        } else {
                            var nPoint = n.point;
                            n.x = n.y = n.point = null;
                            insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
                            insertChild(n, d, x, y, x1, y1, x2, y2);
                        }
                    } else {
                        n.x = x, n.y = y, n.point = d;
                    }
                } else {
                    insertChild(n, d, x, y, x1, y1, x2, y2);
                }
            }
            function insertChild(n, d, x, y, x1, y1, x2, y2) {
                var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, right = x >= sx, bottom = y >= sy, i = (bottom << 1) + right;
                n.leaf = false;
                n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
                if (right) x1 = sx; else x2 = sx;
                if (bottom) y1 = sy; else y2 = sy;
                insert(n, d, x, y, x1, y1, x2, y2);
            }
            var root = d3_geom_quadtreeNode();
            root.add = function(d) {
                insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
            };
            root.visit = function(f) {
                d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
            };
            i = -1;
            if (x1 == null) {
                while (++i < n) {
                    insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
                }
                --i;
            } else data.forEach(root.add);
            xs = ys = data = d = null;
            return root;
        }
        quadtree.x = function(_) {
            return arguments.length ? (x = _, quadtree) : x;
        };
        quadtree.y = function(_) {
            return arguments.length ? (y = _, quadtree) : y;
        };
        quadtree.extent = function(_) {
            if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
            if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0],
                y2 = +_[1][1];
            return quadtree;
        };
        quadtree.size = function(_) {
            if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
            if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
            return quadtree;
        };
        return quadtree;
    };
    function d3_geom_quadtreeCompatX(d) {
        return d.x;
    }
    function d3_geom_quadtreeCompatY(d) {
        return d.y;
    }
    function d3_geom_quadtreeNode() {
        return {
            leaf: true,
            nodes: [],
            point: null,
            x: null,
            y: null
        };
    }
    function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
        if (!f(node, x1, y1, x2, y2)) {
            var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
            if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
            if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
            if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
            if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
        }
    }
    d3.interpolateRgb = d3_interpolateRgb;
    function d3_interpolateRgb(a, b) {
        a = d3.rgb(a);
        b = d3.rgb(b);
        var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
        return function(t) {
            return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
        };
    }
    d3.interpolateObject = d3_interpolateObject;
    function d3_interpolateObject(a, b) {
        var i = {}, c = {}, k;
        for (k in a) {
            if (k in b) {
                i[k] = d3_interpolate(a[k], b[k]);
            } else {
                c[k] = a[k];
            }
        }
        for (k in b) {
            if (!(k in a)) {
                c[k] = b[k];
            }
        }
        return function(t) {
            for (k in i) c[k] = i[k](t);
            return c;
        };
    }
    d3.interpolateNumber = d3_interpolateNumber;
    function d3_interpolateNumber(a, b) {
        b -= a = +a;
        return function(t) {
            return a + b * t;
        };
    }
    d3.interpolateString = d3_interpolateString;
    function d3_interpolateString(a, b) {
        var m, i, j, s0 = 0, s1 = 0, s = [], q = [], n, o;
        a = a + "", b = b + "";
        d3_interpolate_number.lastIndex = 0;
        for (i = 0; m = d3_interpolate_number.exec(b); ++i) {
            if (m.index) s.push(b.substring(s0, s1 = m.index));
            q.push({
                i: s.length,
                x: m[0]
            });
            s.push(null);
            s0 = d3_interpolate_number.lastIndex;
        }
        if (s0 < b.length) s.push(b.substring(s0));
        for (i = 0, n = q.length; (m = d3_interpolate_number.exec(a)) && i < n; ++i) {
            o = q[i];
            if (o.x == m[0]) {
                if (o.i) {
                    if (s[o.i + 1] == null) {
                        s[o.i - 1] += o.x;
                        s.splice(o.i, 1);
                        for (j = i + 1; j < n; ++j) q[j].i--;
                    } else {
                        s[o.i - 1] += o.x + s[o.i + 1];
                        s.splice(o.i, 2);
                        for (j = i + 1; j < n; ++j) q[j].i -= 2;
                    }
                } else {
                    if (s[o.i + 1] == null) {
                        s[o.i] = o.x;
                    } else {
                        s[o.i] = o.x + s[o.i + 1];
                        s.splice(o.i + 1, 1);
                        for (j = i + 1; j < n; ++j) q[j].i--;
                    }
                }
                q.splice(i, 1);
                n--;
                i--;
            } else {
                o.x = d3_interpolateNumber(parseFloat(m[0]), parseFloat(o.x));
            }
        }
        while (i < n) {
            o = q.pop();
            if (s[o.i + 1] == null) {
                s[o.i] = o.x;
            } else {
                s[o.i] = o.x + s[o.i + 1];
                s.splice(o.i + 1, 1);
            }
            n--;
        }
        if (s.length === 1) {
            return s[0] == null ? (o = q[0].x, function(t) {
                return o(t) + "";
            }) : function() {
                return b;
            };
        }
        return function(t) {
            for (i = 0; i < n; ++i) s[(o = q[i]).i] = o.x(t);
            return s.join("");
        };
    }
    var d3_interpolate_number = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
    d3.interpolate = d3_interpolate;
    function d3_interpolate(a, b) {
        var i = d3.interpolators.length, f;
        while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
        return f;
    }
    d3.interpolators = [ function(a, b) {
        var t = typeof b;
        return (t === "string" ? d3_rgb_names.has(b) || /^(#|rgb\(|hsl\()/.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_Color ? d3_interpolateRgb : t === "object" ? Array.isArray(b) ? d3_interpolateArray : d3_interpolateObject : d3_interpolateNumber)(a, b);
    } ];
    d3.interpolateArray = d3_interpolateArray;
    function d3_interpolateArray(a, b) {
        var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
        for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
        for (;i < na; ++i) c[i] = a[i];
        for (;i < nb; ++i) c[i] = b[i];
        return function(t) {
            for (i = 0; i < n0; ++i) c[i] = x[i](t);
            return c;
        };
    }
    var d3_ease_default = function() {
        return d3_identity;
    };
    var d3_ease = d3.map({
        linear: d3_ease_default,
        poly: d3_ease_poly,
        quad: function() {
            return d3_ease_quad;
        },
        cubic: function() {
            return d3_ease_cubic;
        },
        sin: function() {
            return d3_ease_sin;
        },
        exp: function() {
            return d3_ease_exp;
        },
        circle: function() {
            return d3_ease_circle;
        },
        elastic: d3_ease_elastic,
        back: d3_ease_back,
        bounce: function() {
            return d3_ease_bounce;
        }
    });
    var d3_ease_mode = d3.map({
        "in": d3_identity,
        out: d3_ease_reverse,
        "in-out": d3_ease_reflect,
        "out-in": function(f) {
            return d3_ease_reflect(d3_ease_reverse(f));
        }
    });
    d3.ease = function(name) {
        var i = name.indexOf("-"), t = i >= 0 ? name.substring(0, i) : name, m = i >= 0 ? name.substring(i + 1) : "in";
        t = d3_ease.get(t) || d3_ease_default;
        m = d3_ease_mode.get(m) || d3_identity;
        return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
    };
    function d3_ease_clamp(f) {
        return function(t) {
            return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
        };
    }
    function d3_ease_reverse(f) {
        return function(t) {
            return 1 - f(1 - t);
        };
    }
    function d3_ease_reflect(f) {
        return function(t) {
            return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
        };
    }
    function d3_ease_quad(t) {
        return t * t;
    }
    function d3_ease_cubic(t) {
        return t * t * t;
    }
    function d3_ease_cubicInOut(t) {
        if (t <= 0) return 0;
        if (t >= 1) return 1;
        var t2 = t * t, t3 = t2 * t;
        return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
    }
    function d3_ease_poly(e) {
        return function(t) {
            return Math.pow(t, e);
        };
    }
    function d3_ease_sin(t) {
        return 1 - Math.cos(t * halfπ);
    }
    function d3_ease_exp(t) {
        return Math.pow(2, 10 * (t - 1));
    }
    function d3_ease_circle(t) {
        return 1 - Math.sqrt(1 - t * t);
    }
    function d3_ease_elastic(a, p) {
        var s;
        if (arguments.length < 2) p = .45;
        if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
        return function(t) {
            return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
        };
    }
    function d3_ease_back(s) {
        if (!s) s = 1.70158;
        return function(t) {
            return t * t * ((s + 1) * t - s);
        };
    }
    function d3_ease_bounce(t) {
        return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
    }
    d3.interpolateHcl = d3_interpolateHcl;
    function d3_interpolateHcl(a, b) {
        a = d3.hcl(a);
        b = d3.hcl(b);
        var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
        if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
        if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
        return function(t) {
            return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
        };
    }
    d3.interpolateHsl = d3_interpolateHsl;
    function d3_interpolateHsl(a, b) {
        a = d3.hsl(a);
        b = d3.hsl(b);
        var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
        if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
        if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
        return function(t) {
            return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
        };
    }
    d3.interpolateLab = d3_interpolateLab;
    function d3_interpolateLab(a, b) {
        a = d3.lab(a);
        b = d3.lab(b);
        var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
        return function(t) {
            return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
        };
    }
    d3.interpolateRound = d3_interpolateRound;
    function d3_interpolateRound(a, b) {
        b -= a;
        return function(t) {
            return Math.round(a + b * t);
        };
    }
    d3.transform = function(string) {
        var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
        return (d3.transform = function(string) {
            if (string != null) {
                g.setAttribute("transform", string);
                var t = g.transform.baseVal.consolidate();
            }
            return new d3_transform(t ? t.matrix : d3_transformIdentity);
        })(string);
    };
    function d3_transform(m) {
        var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
        if (r0[0] * r1[1] < r1[0] * r0[1]) {
            r0[0] *= -1;
            r0[1] *= -1;
            kx *= -1;
            kz *= -1;
        }
        this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
        this.translate = [ m.e, m.f ];
        this.scale = [ kx, ky ];
        this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
    }
    d3_transform.prototype.toString = function() {
        return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
    };
    function d3_transformDot(a, b) {
        return a[0] * b[0] + a[1] * b[1];
    }
    function d3_transformNormalize(a) {
        var k = Math.sqrt(d3_transformDot(a, a));
        if (k) {
            a[0] /= k;
            a[1] /= k;
        }
        return k;
    }
    function d3_transformCombine(a, b, k) {
        a[0] += k * b[0];
        a[1] += k * b[1];
        return a;
    }
    var d3_transformIdentity = {
        a: 1,
        b: 0,
        c: 0,
        d: 1,
        e: 0,
        f: 0
    };
    d3.interpolateTransform = d3_interpolateTransform;
    function d3_interpolateTransform(a, b) {
        var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;
        if (ta[0] != tb[0] || ta[1] != tb[1]) {
            s.push("translate(", null, ",", null, ")");
            q.push({
                i: 1,
                x: d3_interpolateNumber(ta[0], tb[0])
            }, {
                i: 3,
                x: d3_interpolateNumber(ta[1], tb[1])
            });
        } else if (tb[0] || tb[1]) {
            s.push("translate(" + tb + ")");
        } else {
            s.push("");
        }
        if (ra != rb) {
            if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
            q.push({
                i: s.push(s.pop() + "rotate(", null, ")") - 2,
                x: d3_interpolateNumber(ra, rb)
            });
        } else if (rb) {
            s.push(s.pop() + "rotate(" + rb + ")");
        }
        if (wa != wb) {
            q.push({
                i: s.push(s.pop() + "skewX(", null, ")") - 2,
                x: d3_interpolateNumber(wa, wb)
            });
        } else if (wb) {
            s.push(s.pop() + "skewX(" + wb + ")");
        }
        if (ka[0] != kb[0] || ka[1] != kb[1]) {
            n = s.push(s.pop() + "scale(", null, ",", null, ")");
            q.push({
                i: n - 4,
                x: d3_interpolateNumber(ka[0], kb[0])
            }, {
                i: n - 2,
                x: d3_interpolateNumber(ka[1], kb[1])
            });
        } else if (kb[0] != 1 || kb[1] != 1) {
            s.push(s.pop() + "scale(" + kb + ")");
        }
        n = q.length;
        return function(t) {
            var i = -1, o;
            while (++i < n) s[(o = q[i]).i] = o.x(t);
            return s.join("");
        };
    }
    function d3_uninterpolateNumber(a, b) {
        b = b - (a = +a) ? 1 / (b - a) : 0;
        return function(x) {
            return (x - a) * b;
        };
    }
    function d3_uninterpolateClamp(a, b) {
        b = b - (a = +a) ? 1 / (b - a) : 0;
        return function(x) {
            return Math.max(0, Math.min(1, (x - a) * b));
        };
    }
    d3.layout = {};
    d3.layout.bundle = function() {
        return function(links) {
            var paths = [], i = -1, n = links.length;
            while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
            return paths;
        };
    };
    function d3_layout_bundlePath(link) {
        var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
        while (start !== lca) {
            start = start.parent;
            points.push(start);
        }
        var k = points.length;
        while (end !== lca) {
            points.splice(k, 0, end);
            end = end.parent;
        }
        return points;
    }
    function d3_layout_bundleAncestors(node) {
        var ancestors = [], parent = node.parent;
        while (parent != null) {
            ancestors.push(node);
            node = parent;
            parent = parent.parent;
        }
        ancestors.push(node);
        return ancestors;
    }
    function d3_layout_bundleLeastCommonAncestor(a, b) {
        if (a === b) return a;
        var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
        while (aNode === bNode) {
            sharedNode = aNode;
            aNode = aNodes.pop();
            bNode = bNodes.pop();
        }
        return sharedNode;
    }
    d3.layout.chord = function() {
        var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
        function relayout() {
            var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
            chords = [];
            groups = [];
            k = 0, i = -1;
            while (++i < n) {
                x = 0, j = -1;
                while (++j < n) {
                    x += matrix[i][j];
                }
                groupSums.push(x);
                subgroupIndex.push(d3.range(n));
                k += x;
            }
            if (sortGroups) {
                groupIndex.sort(function(a, b) {
                    return sortGroups(groupSums[a], groupSums[b]);
                });
            }
            if (sortSubgroups) {
                subgroupIndex.forEach(function(d, i) {
                    d.sort(function(a, b) {
                        return sortSubgroups(matrix[i][a], matrix[i][b]);
                    });
                });
            }
            k = (τ - padding * n) / k;
            x = 0, i = -1;
            while (++i < n) {
                x0 = x, j = -1;
                while (++j < n) {
                    var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
                    subgroups[di + "-" + dj] = {
                        index: di,
                        subindex: dj,
                        startAngle: a0,
                        endAngle: a1,
                        value: v
                    };
                }
                groups[di] = {
                    index: di,
                    startAngle: x0,
                    endAngle: x,
                    value: (x - x0) / k
                };
                x += padding;
            }
            i = -1;
            while (++i < n) {
                j = i - 1;
                while (++j < n) {
                    var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
                    if (source.value || target.value) {
                        chords.push(source.value < target.value ? {
                            source: target,
                            target: source
                        } : {
                            source: source,
                            target: target
                        });
                    }
                }
            }
            if (sortChords) resort();
        }
        function resort() {
            chords.sort(function(a, b) {
                return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
            });
        }
        chord.matrix = function(x) {
            if (!arguments.length) return matrix;
            n = (matrix = x) && matrix.length;
            chords = groups = null;
            return chord;
        };
        chord.padding = function(x) {
            if (!arguments.length) return padding;
            padding = x;
            chords = groups = null;
            return chord;
        };
        chord.sortGroups = function(x) {
            if (!arguments.length) return sortGroups;
            sortGroups = x;
            chords = groups = null;
            return chord;
        };
        chord.sortSubgroups = function(x) {
            if (!arguments.length) return sortSubgroups;
            sortSubgroups = x;
            chords = null;
            return chord;
        };
        chord.sortChords = function(x) {
            if (!arguments.length) return sortChords;
            sortChords = x;
            if (chords) resort();
            return chord;
        };
        chord.chords = function() {
            if (!chords) relayout();
            return chords;
        };
        chord.groups = function() {
            if (!groups) relayout();
            return groups;
        };
        return chord;
    };
    d3.layout.force = function() {
        var force = {}, event = d3.dispatch("start", "tick", "end"), size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
        function repulse(node) {
            return function(quad, x1, _, x2) {
                if (quad.point !== node) {
                    var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
                    if (dw * dw / theta2 < dn) {
                        if (dn < chargeDistance2) {
                            var k = quad.charge / dn;
                            node.px -= dx * k;
                            node.py -= dy * k;
                        }
                        return true;
                    }
                    if (quad.point && dn && dn < chargeDistance2) {
                        var k = quad.pointCharge / dn;
                        node.px -= dx * k;
                        node.py -= dy * k;
                    }
                }
                return !quad.charge;
            };
        }
        force.tick = function() {
            if ((alpha *= .99) < .005) {
                event.end({
                    type: "end",
                    alpha: alpha = 0
                });
                return true;
            }
            var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
            for (i = 0; i < m; ++i) {
                o = links[i];
                s = o.source;
                t = o.target;
                x = t.x - s.x;
                y = t.y - s.y;
                if (l = x * x + y * y) {
                    l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
                    x *= l;
                    y *= l;
                    t.x -= x * (k = s.weight / (t.weight + s.weight));
                    t.y -= y * k;
                    s.x += x * (k = 1 - k);
                    s.y += y * k;
                }
            }
            if (k = alpha * gravity) {
                x = size[0] / 2;
                y = size[1] / 2;
                i = -1;
                if (k) while (++i < n) {
                    o = nodes[i];
                    o.x += (x - o.x) * k;
                    o.y += (y - o.y) * k;
                }
            }
            if (charge) {
                d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
                i = -1;
                while (++i < n) {
                    if (!(o = nodes[i]).fixed) {
                        q.visit(repulse(o));
                    }
                }
            }
            i = -1;
            while (++i < n) {
                o = nodes[i];
                if (o.fixed) {
                    o.x = o.px;
                    o.y = o.py;
                } else {
                    o.x -= (o.px - (o.px = o.x)) * friction;
                    o.y -= (o.py - (o.py = o.y)) * friction;
                }
            }
            event.tick({
                type: "tick",
                alpha: alpha
            });
        };
        force.nodes = function(x) {
            if (!arguments.length) return nodes;
            nodes = x;
            return force;
        };
        force.links = function(x) {
            if (!arguments.length) return links;
            links = x;
            return force;
        };
        force.size = function(x) {
            if (!arguments.length) return size;
            size = x;
            return force;
        };
        force.linkDistance = function(x) {
            if (!arguments.length) return linkDistance;
            linkDistance = typeof x === "function" ? x : +x;
            return force;
        };
        force.distance = force.linkDistance;
        force.linkStrength = function(x) {
            if (!arguments.length) return linkStrength;
            linkStrength = typeof x === "function" ? x : +x;
            return force;
        };
        force.friction = function(x) {
            if (!arguments.length) return friction;
            friction = +x;
            return force;
        };
        force.charge = function(x) {
            if (!arguments.length) return charge;
            charge = typeof x === "function" ? x : +x;
            return force;
        };
        force.chargeDistance = function(x) {
            if (!arguments.length) return Math.sqrt(chargeDistance2);
            chargeDistance2 = x * x;
            return force;
        };
        force.gravity = function(x) {
            if (!arguments.length) return gravity;
            gravity = +x;
            return force;
        };
        force.theta = function(x) {
            if (!arguments.length) return Math.sqrt(theta2);
            theta2 = x * x;
            return force;
        };
        force.alpha = function(x) {
            if (!arguments.length) return alpha;
            x = +x;
            if (alpha) {
                if (x > 0) alpha = x; else alpha = 0;
            } else if (x > 0) {
                event.start({
                    type: "start",
                    alpha: alpha = x
                });
                d3.timer(force.tick);
            }
            return force;
        };
        force.start = function() {
            var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
            for (i = 0; i < n; ++i) {
                (o = nodes[i]).index = i;
                o.weight = 0;
            }
            for (i = 0; i < m; ++i) {
                o = links[i];
                if (typeof o.source == "number") o.source = nodes[o.source];
                if (typeof o.target == "number") o.target = nodes[o.target];
                ++o.source.weight;
                ++o.target.weight;
            }
            for (i = 0; i < n; ++i) {
                o = nodes[i];
                if (isNaN(o.x)) o.x = position("x", w);
                if (isNaN(o.y)) o.y = position("y", h);
                if (isNaN(o.px)) o.px = o.x;
                if (isNaN(o.py)) o.py = o.y;
            }
            distances = [];
            if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
            strengths = [];
            if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
            charges = [];
            if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
            function position(dimension, size) {
                if (!neighbors) {
                    neighbors = new Array(n);
                    for (j = 0; j < n; ++j) {
                        neighbors[j] = [];
                    }
                    for (j = 0; j < m; ++j) {
                        var o = links[j];
                        neighbors[o.source.index].push(o.target);
                        neighbors[o.target.index].push(o.source);
                    }
                }
                var candidates = neighbors[i], j = -1, m = candidates.length, x;
                while (++j < m) if (!isNaN(x = candidates[j][dimension])) return x;
                return Math.random() * size;
            }
            return force.resume();
        };
        force.resume = function() {
            return force.alpha(.1);
        };
        force.stop = function() {
            return force.alpha(0);
        };
        force.drag = function() {
            if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
            if (!arguments.length) return drag;
            this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
        };
        function dragmove(d) {
            d.px = d3.event.x, d.py = d3.event.y;
            force.resume();
        }
        return d3.rebind(force, event, "on");
    };
    function d3_layout_forceDragstart(d) {
        d.fixed |= 2;
    }
    function d3_layout_forceDragend(d) {
        d.fixed &= ~6;
    }
    function d3_layout_forceMouseover(d) {
        d.fixed |= 4;
        d.px = d.x, d.py = d.y;
    }
    function d3_layout_forceMouseout(d) {
        d.fixed &= ~4;
    }
    function d3_layout_forceAccumulate(quad, alpha, charges) {
        var cx = 0, cy = 0;
        quad.charge = 0;
        if (!quad.leaf) {
            var nodes = quad.nodes, n = nodes.length, i = -1, c;
            while (++i < n) {
                c = nodes[i];
                if (c == null) continue;
                d3_layout_forceAccumulate(c, alpha, charges);
                quad.charge += c.charge;
                cx += c.charge * c.cx;
                cy += c.charge * c.cy;
            }
        }
        if (quad.point) {
            if (!quad.leaf) {
                quad.point.x += Math.random() - .5;
                quad.point.y += Math.random() - .5;
            }
            var k = alpha * charges[quad.point.index];
            quad.charge += quad.pointCharge = k;
            cx += k * quad.point.x;
            cy += k * quad.point.y;
        }
        quad.cx = cx / quad.charge;
        quad.cy = cy / quad.charge;
    }
    var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
    d3.layout.hierarchy = function() {
        var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
        function recurse(node, depth, nodes) {
            var childs = children.call(hierarchy, node, depth);
            node.depth = depth;
            nodes.push(node);
            if (childs && (n = childs.length)) {
                var i = -1, n, c = node.children = new Array(n), v = 0, j = depth + 1, d;
                while (++i < n) {
                    d = c[i] = recurse(childs[i], j, nodes);
                    d.parent = node;
                    v += d.value;
                }
                if (sort) c.sort(sort);
                if (value) node.value = v;
            } else {
                delete node.children;
                if (value) {
                    node.value = +value.call(hierarchy, node, depth) || 0;
                }
            }
            return node;
        }
        function revalue(node, depth) {
            var children = node.children, v = 0;
            if (children && (n = children.length)) {
                var i = -1, n, j = depth + 1;
                while (++i < n) v += revalue(children[i], j);
            } else if (value) {
                v = +value.call(hierarchy, node, depth) || 0;
            }
            if (value) node.value = v;
            return v;
        }
        function hierarchy(d) {
            var nodes = [];
            recurse(d, 0, nodes);
            return nodes;
        }
        hierarchy.sort = function(x) {
            if (!arguments.length) return sort;
            sort = x;
            return hierarchy;
        };
        hierarchy.children = function(x) {
            if (!arguments.length) return children;
            children = x;
            return hierarchy;
        };
        hierarchy.value = function(x) {
            if (!arguments.length) return value;
            value = x;
            return hierarchy;
        };
        hierarchy.revalue = function(root) {
            revalue(root, 0);
            return root;
        };
        return hierarchy;
    };
    function d3_layout_hierarchyRebind(object, hierarchy) {
        d3.rebind(object, hierarchy, "sort", "children", "value");
        object.nodes = object;
        object.links = d3_layout_hierarchyLinks;
        return object;
    }
    function d3_layout_hierarchyChildren(d) {
        return d.children;
    }
    function d3_layout_hierarchyValue(d) {
        return d.value;
    }
    function d3_layout_hierarchySort(a, b) {
        return b.value - a.value;
    }
    function d3_layout_hierarchyLinks(nodes) {
        return d3.merge(nodes.map(function(parent) {
            return (parent.children || []).map(function(child) {
                return {
                    source: parent,
                    target: child
                };
            });
        }));
    }
    d3.layout.partition = function() {
        var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
        function position(node, x, dx, dy) {
            var children = node.children;
            node.x = x;
            node.y = node.depth * dy;
            node.dx = dx;
            node.dy = dy;
            if (children && (n = children.length)) {
                var i = -1, n, c, d;
                dx = node.value ? dx / node.value : 0;
                while (++i < n) {
                    position(c = children[i], x, d = c.value * dx, dy);
                    x += d;
                }
            }
        }
        function depth(node) {
            var children = node.children, d = 0;
            if (children && (n = children.length)) {
                var i = -1, n;
                while (++i < n) d = Math.max(d, depth(children[i]));
            }
            return 1 + d;
        }
        function partition(d, i) {
            var nodes = hierarchy.call(this, d, i);
            position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
            return nodes;
        }
        partition.size = function(x) {
            if (!arguments.length) return size;
            size = x;
            return partition;
        };
        return d3_layout_hierarchyRebind(partition, hierarchy);
    };
    d3.layout.pie = function() {
        var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ;
        function pie(data) {
            var values = data.map(function(d, i) {
                return +value.call(pie, d, i);
            });
            var a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle);
            var k = ((typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a) / d3.sum(values);
            var index = d3.range(data.length);
            if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
                return values[j] - values[i];
            } : function(i, j) {
                return sort(data[i], data[j]);
            });
            var arcs = [];
            index.forEach(function(i) {
                var d;
                arcs[i] = {
                    data: data[i],
                    value: d = values[i],
                    startAngle: a,
                    endAngle: a += d * k
                };
            });
            return arcs;
        }
        pie.value = function(x) {
            if (!arguments.length) return value;
            value = x;
            return pie;
        };
        pie.sort = function(x) {
            if (!arguments.length) return sort;
            sort = x;
            return pie;
        };
        pie.startAngle = function(x) {
            if (!arguments.length) return startAngle;
            startAngle = x;
            return pie;
        };
        pie.endAngle = function(x) {
            if (!arguments.length) return endAngle;
            endAngle = x;
            return pie;
        };
        return pie;
    };
    var d3_layout_pieSortByValue = {};
    d3.layout.stack = function() {
        var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
        function stack(data, index) {
            var series = data.map(function(d, i) {
                return values.call(stack, d, i);
            });
            var points = series.map(function(d) {
                return d.map(function(v, i) {
                    return [ x.call(stack, v, i), y.call(stack, v, i) ];
                });
            });
            var orders = order.call(stack, points, index);
            series = d3.permute(series, orders);
            points = d3.permute(points, orders);
            var offsets = offset.call(stack, points, index);
            var n = series.length, m = series[0].length, i, j, o;
            for (j = 0; j < m; ++j) {
                out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
                for (i = 1; i < n; ++i) {
                    out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
                }
            }
            return data;
        }
        stack.values = function(x) {
            if (!arguments.length) return values;
            values = x;
            return stack;
        };
        stack.order = function(x) {
            if (!arguments.length) return order;
            order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
            return stack;
        };
        stack.offset = function(x) {
            if (!arguments.length) return offset;
            offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
            return stack;
        };
        stack.x = function(z) {
            if (!arguments.length) return x;
            x = z;
            return stack;
        };
        stack.y = function(z) {
            if (!arguments.length) return y;
            y = z;
            return stack;
        };
        stack.out = function(z) {
            if (!arguments.length) return out;
            out = z;
            return stack;
        };
        return stack;
    };
    function d3_layout_stackX(d) {
        return d.x;
    }
    function d3_layout_stackY(d) {
        return d.y;
    }
    function d3_layout_stackOut(d, y0, y) {
        d.y0 = y0;
        d.y = y;
    }
    var d3_layout_stackOrders = d3.map({
        "inside-out": function(data) {
            var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
                return max[a] - max[b];
            }), top = 0, bottom = 0, tops = [], bottoms = [];
            for (i = 0; i < n; ++i) {
                j = index[i];
                if (top < bottom) {
                    top += sums[j];
                    tops.push(j);
                } else {
                    bottom += sums[j];
                    bottoms.push(j);
                }
            }
            return bottoms.reverse().concat(tops);
        },
        reverse: function(data) {
            return d3.range(data.length).reverse();
        },
        "default": d3_layout_stackOrderDefault
    });
    var d3_layout_stackOffsets = d3.map({
        silhouette: function(data) {
            var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
            for (j = 0; j < m; ++j) {
                for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
                if (o > max) max = o;
                sums.push(o);
            }
            for (j = 0; j < m; ++j) {
                y0[j] = (max - sums[j]) / 2;
            }
            return y0;
        },
        wiggle: function(data) {
            var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
            y0[0] = o = o0 = 0;
            for (j = 1; j < m; ++j) {
                for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
                for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
                    for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
                        s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
                    }
                    s2 += s3 * data[i][j][1];
                }
                y0[j] = o -= s1 ? s2 / s1 * dx : 0;
                if (o < o0) o0 = o;
            }
            for (j = 0; j < m; ++j) y0[j] -= o0;
            return y0;
        },
        expand: function(data) {
            var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
            for (j = 0; j < m; ++j) {
                for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
                if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
            }
            for (j = 0; j < m; ++j) y0[j] = 0;
            return y0;
        },
        zero: d3_layout_stackOffsetZero
    });
    function d3_layout_stackOrderDefault(data) {
        return d3.range(data.length);
    }
    function d3_layout_stackOffsetZero(data) {
        var j = -1, m = data[0].length, y0 = [];
        while (++j < m) y0[j] = 0;
        return y0;
    }
    function d3_layout_stackMaxIndex(array) {
        var i = 1, j = 0, v = array[0][1], k, n = array.length;
        for (;i < n; ++i) {
            if ((k = array[i][1]) > v) {
                j = i;
                v = k;
            }
        }
        return j;
    }
    function d3_layout_stackReduceSum(d) {
        return d.reduce(d3_layout_stackSum, 0);
    }
    function d3_layout_stackSum(p, d) {
        return p + d[1];
    }
    d3.layout.histogram = function() {
        var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
        function histogram(data, i) {
            var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
            while (++i < m) {
                bin = bins[i] = [];
                bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
                bin.y = 0;
            }
            if (m > 0) {
                i = -1;
                while (++i < n) {
                    x = values[i];
                    if (x >= range[0] && x <= range[1]) {
                        bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
                        bin.y += k;
                        bin.push(data[i]);
                    }
                }
            }
            return bins;
        }
        histogram.value = function(x) {
            if (!arguments.length) return valuer;
            valuer = x;
            return histogram;
        };
        histogram.range = function(x) {
            if (!arguments.length) return ranger;
            ranger = d3_functor(x);
            return histogram;
        };
        histogram.bins = function(x) {
            if (!arguments.length) return binner;
            binner = typeof x === "number" ? function(range) {
                return d3_layout_histogramBinFixed(range, x);
            } : d3_functor(x);
            return histogram;
        };
        histogram.frequency = function(x) {
            if (!arguments.length) return frequency;
            frequency = !!x;
            return histogram;
        };
        return histogram;
    };
    function d3_layout_histogramBinSturges(range, values) {
        return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
    }
    function d3_layout_histogramBinFixed(range, n) {
        var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
        while (++x <= n) f[x] = m * x + b;
        return f;
    }
    function d3_layout_histogramRange(values) {
        return [ d3.min(values), d3.max(values) ];
    }
    d3.layout.tree = function() {
        var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
        function tree(d, i) {
            var nodes = hierarchy.call(this, d, i), root = nodes[0];
            function firstWalk(node, previousSibling) {
                var children = node.children, layout = node._tree;
                if (children && (n = children.length)) {
                    var n, firstChild = children[0], previousChild, ancestor = firstChild, child, i = -1;
                    while (++i < n) {
                        child = children[i];
                        firstWalk(child, previousChild);
                        ancestor = apportion(child, previousChild, ancestor);
                        previousChild = child;
                    }
                    d3_layout_treeShift(node);
                    var midpoint = .5 * (firstChild._tree.prelim + child._tree.prelim);
                    if (previousSibling) {
                        layout.prelim = previousSibling._tree.prelim + separation(node, previousSibling);
                        layout.mod = layout.prelim - midpoint;
                    } else {
                        layout.prelim = midpoint;
                    }
                } else {
                    if (previousSibling) {
                        layout.prelim = previousSibling._tree.prelim + separation(node, previousSibling);
                    }
                }
            }
            function secondWalk(node, x) {
                node.x = node._tree.prelim + x;
                var children = node.children;
                if (children && (n = children.length)) {
                    var i = -1, n;
                    x += node._tree.mod;
                    while (++i < n) {
                        secondWalk(children[i], x);
                    }
                }
            }
            function apportion(node, previousSibling, ancestor) {
                if (previousSibling) {
                    var vip = node, vop = node, vim = previousSibling, vom = node.parent.children[0], sip = vip._tree.mod, sop = vop._tree.mod, sim = vim._tree.mod, som = vom._tree.mod, shift;
                    while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
                        vom = d3_layout_treeLeft(vom);
                        vop = d3_layout_treeRight(vop);
                        vop._tree.ancestor = node;
                        shift = vim._tree.prelim + sim - vip._tree.prelim - sip + separation(vim, vip);
                        if (shift > 0) {
                            d3_layout_treeMove(d3_layout_treeAncestor(vim, node, ancestor), node, shift);
                            sip += shift;
                            sop += shift;
                        }
                        sim += vim._tree.mod;
                        sip += vip._tree.mod;
                        som += vom._tree.mod;
                        sop += vop._tree.mod;
                    }
                    if (vim && !d3_layout_treeRight(vop)) {
                        vop._tree.thread = vim;
                        vop._tree.mod += sim - sop;
                    }
                    if (vip && !d3_layout_treeLeft(vom)) {
                        vom._tree.thread = vip;
                        vom._tree.mod += sip - som;
                        ancestor = node;
                    }
                }
                return ancestor;
            }
            d3_layout_treeVisitAfter(root, function(node, previousSibling) {
                node._tree = {
                    ancestor: node,
                    prelim: 0,
                    mod: 0,
                    change: 0,
                    shift: 0,
                    number: previousSibling ? previousSibling._tree.number + 1 : 0
                };
            });
            firstWalk(root);
            secondWalk(root, -root._tree.prelim);
            var left = d3_layout_treeSearch(root, d3_layout_treeLeftmost), right = d3_layout_treeSearch(root, d3_layout_treeRightmost), deep = d3_layout_treeSearch(root, d3_layout_treeDeepest), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2, y1 = deep.depth || 1;
            d3_layout_treeVisitAfter(root, nodeSize ? function(node) {
                node.x *= size[0];
                node.y = node.depth * size[1];
                delete node._tree;
            } : function(node) {
                node.x = (node.x - x0) / (x1 - x0) * size[0];
                node.y = node.depth / y1 * size[1];
                delete node._tree;
            });
            return nodes;
        }
        tree.separation = function(x) {
            if (!arguments.length) return separation;
            separation = x;
            return tree;
        };
        tree.size = function(x) {
            if (!arguments.length) return nodeSize ? null : size;
            nodeSize = (size = x) == null;
            return tree;
        };
        tree.nodeSize = function(x) {
            if (!arguments.length) return nodeSize ? size : null;
            nodeSize = (size = x) != null;
            return tree;
        };
        return d3_layout_hierarchyRebind(tree, hierarchy);
    };
    function d3_layout_treeSeparation(a, b) {
        return a.parent == b.parent ? 1 : 2;
    }
    function d3_layout_treeLeft(node) {
        var children = node.children;
        return children && children.length ? children[0] : node._tree.thread;
    }
    function d3_layout_treeRight(node) {
        var children = node.children, n;
        return children && (n = children.length) ? children[n - 1] : node._tree.thread;
    }
    function d3_layout_treeSearch(node, compare) {
        var children = node.children;
        if (children && (n = children.length)) {
            var child, n, i = -1;
            while (++i < n) {
                if (compare(child = d3_layout_treeSearch(children[i], compare), node) > 0) {
                    node = child;
                }
            }
        }
        return node;
    }
    function d3_layout_treeRightmost(a, b) {
        return a.x - b.x;
    }
    function d3_layout_treeLeftmost(a, b) {
        return b.x - a.x;
    }
    function d3_layout_treeDeepest(a, b) {
        return a.depth - b.depth;
    }
    function d3_layout_treeVisitAfter(node, callback) {
        function visit(node, previousSibling) {
            var children = node.children;
            if (children && (n = children.length)) {
                var child, previousChild = null, i = -1, n;
                while (++i < n) {
                    child = children[i];
                    visit(child, previousChild);
                    previousChild = child;
                }
            }
            callback(node, previousSibling);
        }
        visit(node, null);
    }
    function d3_layout_treeShift(node) {
        var shift = 0, change = 0, children = node.children, i = children.length, child;
        while (--i >= 0) {
            child = children[i]._tree;
            child.prelim += shift;
            child.mod += shift;
            shift += child.shift + (change += child.change);
        }
    }
    function d3_layout_treeMove(ancestor, node, shift) {
        ancestor = ancestor._tree;
        node = node._tree;
        var change = shift / (node.number - ancestor.number);
        ancestor.change += change;
        node.change -= change;
        node.shift += shift;
        node.prelim += shift;
        node.mod += shift;
    }
    function d3_layout_treeAncestor(vim, node, ancestor) {
        return vim._tree.ancestor.parent == node.parent ? vim._tree.ancestor : ancestor;
    }
    d3.layout.pack = function() {
        var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
        function pack(d, i) {
            var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
                return radius;
            };
            root.x = root.y = 0;
            d3_layout_treeVisitAfter(root, function(d) {
                d.r = +r(d.value);
            });
            d3_layout_treeVisitAfter(root, d3_layout_packSiblings);
            if (padding) {
                var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
                d3_layout_treeVisitAfter(root, function(d) {
                    d.r += dr;
                });
                d3_layout_treeVisitAfter(root, d3_layout_packSiblings);
                d3_layout_treeVisitAfter(root, function(d) {
                    d.r -= dr;
                });
            }
            d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
            return nodes;
        }
        pack.size = function(_) {
            if (!arguments.length) return size;
            size = _;
            return pack;
        };
        pack.radius = function(_) {
            if (!arguments.length) return radius;
            radius = _ == null || typeof _ === "function" ? _ : +_;
            return pack;
        };
        pack.padding = function(_) {
            if (!arguments.length) return padding;
            padding = +_;
            return pack;
        };
        return d3_layout_hierarchyRebind(pack, hierarchy);
    };
    function d3_layout_packSort(a, b) {
        return a.value - b.value;
    }
    function d3_layout_packInsert(a, b) {
        var c = a._pack_next;
        a._pack_next = b;
        b._pack_prev = a;
        b._pack_next = c;
        c._pack_prev = b;
    }
    function d3_layout_packSplice(a, b) {
        a._pack_next = b;
        b._pack_prev = a;
    }
    function d3_layout_packIntersects(a, b) {
        var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
        return .999 * dr * dr > dx * dx + dy * dy;
    }
    function d3_layout_packSiblings(node) {
        if (!(nodes = node.children) || !(n = nodes.length)) return;
        var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
        function bound(node) {
            xMin = Math.min(node.x - node.r, xMin);
            xMax = Math.max(node.x + node.r, xMax);
            yMin = Math.min(node.y - node.r, yMin);
            yMax = Math.max(node.y + node.r, yMax);
        }
        nodes.forEach(d3_layout_packLink);
        a = nodes[0];
        a.x = -a.r;
        a.y = 0;
        bound(a);
        if (n > 1) {
            b = nodes[1];
            b.x = b.r;
            b.y = 0;
            bound(b);
            if (n > 2) {
                c = nodes[2];
                d3_layout_packPlace(a, b, c);
                bound(c);
                d3_layout_packInsert(a, c);
                a._pack_prev = c;
                d3_layout_packInsert(c, b);
                b = a._pack_next;
                for (i = 3; i < n; i++) {
                    d3_layout_packPlace(a, b, c = nodes[i]);
                    var isect = 0, s1 = 1, s2 = 1;
                    for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
                        if (d3_layout_packIntersects(j, c)) {
                            isect = 1;
                            break;
                        }
                    }
                    if (isect == 1) {
                        for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
                            if (d3_layout_packIntersects(k, c)) {
                                break;
                            }
                        }
                    }
                    if (isect) {
                        if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
                        i--;
                    } else {
                        d3_layout_packInsert(a, c);
                        b = c;
                        bound(c);
                    }
                }
            }
        }
        var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
        for (i = 0; i < n; i++) {
            c = nodes[i];
            c.x -= cx;
            c.y -= cy;
            cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
        }
        node.r = cr;
        nodes.forEach(d3_layout_packUnlink);
    }
    function d3_layout_packLink(node) {
        node._pack_next = node._pack_prev = node;
    }
    function d3_layout_packUnlink(node) {
        delete node._pack_next;
        delete node._pack_prev;
    }
    function d3_layout_packTransform(node, x, y, k) {
        var children = node.children;
        node.x = x += k * node.x;
        node.y = y += k * node.y;
        node.r *= k;
        if (children) {
            var i = -1, n = children.length;
            while (++i < n) d3_layout_packTransform(children[i], x, y, k);
        }
    }
    function d3_layout_packPlace(a, b, c) {
        var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
        if (db && (dx || dy)) {
            var da = b.r + c.r, dc = dx * dx + dy * dy;
            da *= da;
            db *= db;
            var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
            c.x = a.x + x * dx + y * dy;
            c.y = a.y + x * dy - y * dx;
        } else {
            c.x = a.x + db;
            c.y = a.y;
        }
    }
    d3.layout.cluster = function() {
        var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
        function cluster(d, i) {
            var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
            d3_layout_treeVisitAfter(root, function(node) {
                var children = node.children;
                if (children && children.length) {
                    node.x = d3_layout_clusterX(children);
                    node.y = d3_layout_clusterY(children);
                } else {
                    node.x = previousNode ? x += separation(node, previousNode) : 0;
                    node.y = 0;
                    previousNode = node;
                }
            });
            var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
            d3_layout_treeVisitAfter(root, nodeSize ? function(node) {
                node.x = (node.x - root.x) * size[0];
                node.y = (root.y - node.y) * size[1];
            } : function(node) {
                node.x = (node.x - x0) / (x1 - x0) * size[0];
                node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
            });
            return nodes;
        }
        cluster.separation = function(x) {
            if (!arguments.length) return separation;
            separation = x;
            return cluster;
        };
        cluster.size = function(x) {
            if (!arguments.length) return nodeSize ? null : size;
            nodeSize = (size = x) == null;
            return cluster;
        };
        cluster.nodeSize = function(x) {
            if (!arguments.length) return nodeSize ? size : null;
            nodeSize = (size = x) != null;
            return cluster;
        };
        return d3_layout_hierarchyRebind(cluster, hierarchy);
    };
    function d3_layout_clusterY(children) {
        return 1 + d3.max(children, function(child) {
            return child.y;
        });
    }
    function d3_layout_clusterX(children) {
        return children.reduce(function(x, child) {
            return x + child.x;
        }, 0) / children.length;
    }
    function d3_layout_clusterLeft(node) {
        var children = node.children;
        return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
    }
    function d3_layout_clusterRight(node) {
        var children = node.children, n;
        return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
    }
    d3.layout.treemap = function() {
        var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
        function scale(children, k) {
            var i = -1, n = children.length, child, area;
            while (++i < n) {
                area = (child = children[i]).value * (k < 0 ? 0 : k);
                child.area = isNaN(area) || area <= 0 ? 0 : area;
            }
        }
        function squarify(node) {
            var children = node.children;
            if (children && children.length) {
                var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
                scale(remaining, rect.dx * rect.dy / node.value);
                row.area = 0;
                while ((n = remaining.length) > 0) {
                    row.push(child = remaining[n - 1]);
                    row.area += child.area;
                    if (mode !== "squarify" || (score = worst(row, u)) <= best) {
                        remaining.pop();
                        best = score;
                    } else {
                        row.area -= row.pop().area;
                        position(row, u, rect, false);
                        u = Math.min(rect.dx, rect.dy);
                        row.length = row.area = 0;
                        best = Infinity;
                    }
                }
                if (row.length) {
                    position(row, u, rect, true);
                    row.length = row.area = 0;
                }
                children.forEach(squarify);
            }
        }
        function stickify(node) {
            var children = node.children;
            if (children && children.length) {
                var rect = pad(node), remaining = children.slice(), child, row = [];
                scale(remaining, rect.dx * rect.dy / node.value);
                row.area = 0;
                while (child = remaining.pop()) {
                    row.push(child);
                    row.area += child.area;
                    if (child.z != null) {
                        position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
                        row.length = row.area = 0;
                    }
                }
                children.forEach(stickify);
            }
        }
        function worst(row, u) {
            var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
            while (++i < n) {
                if (!(r = row[i].area)) continue;
                if (r < rmin) rmin = r;
                if (r > rmax) rmax = r;
            }
            s *= s;
            u *= u;
            return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
        }
        function position(row, u, rect, flush) {
            var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
            if (u == rect.dx) {
                if (flush || v > rect.dy) v = rect.dy;
                while (++i < n) {
                    o = row[i];
                    o.x = x;
                    o.y = y;
                    o.dy = v;
                    x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
                }
                o.z = true;
                o.dx += rect.x + rect.dx - x;
                rect.y += v;
                rect.dy -= v;
            } else {
                if (flush || v > rect.dx) v = rect.dx;
                while (++i < n) {
                    o = row[i];
                    o.x = x;
                    o.y = y;
                    o.dx = v;
                    y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
                }
                o.z = false;
                o.dy += rect.y + rect.dy - y;
                rect.x += v;
                rect.dx -= v;
            }
        }
        function treemap(d) {
            var nodes = stickies || hierarchy(d), root = nodes[0];
            root.x = 0;
            root.y = 0;
            root.dx = size[0];
            root.dy = size[1];
            if (stickies) hierarchy.revalue(root);
            scale([ root ], root.dx * root.dy / root.value);
            (stickies ? stickify : squarify)(root);
            if (sticky) stickies = nodes;
            return nodes;
        }
        treemap.size = function(x) {
            if (!arguments.length) return size;
            size = x;
            return treemap;
        };
        treemap.padding = function(x) {
            if (!arguments.length) return padding;
            function padFunction(node) {
                var p = x.call(treemap, node, node.depth);
                return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
            }
            function padConstant(node) {
                return d3_layout_treemapPad(node, x);
            }
            var type;
            pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ],
                padConstant) : padConstant;
            return treemap;
        };
        treemap.round = function(x) {
            if (!arguments.length) return round != Number;
            round = x ? Math.round : Number;
            return treemap;
        };
        treemap.sticky = function(x) {
            if (!arguments.length) return sticky;
            sticky = x;
            stickies = null;
            return treemap;
        };
        treemap.ratio = function(x) {
            if (!arguments.length) return ratio;
            ratio = x;
            return treemap;
        };
        treemap.mode = function(x) {
            if (!arguments.length) return mode;
            mode = x + "";
            return treemap;
        };
        return d3_layout_hierarchyRebind(treemap, hierarchy);
    };
    function d3_layout_treemapPadNull(node) {
        return {
            x: node.x,
            y: node.y,
            dx: node.dx,
            dy: node.dy
        };
    }
    function d3_layout_treemapPad(node, padding) {
        var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
        if (dx < 0) {
            x += dx / 2;
            dx = 0;
        }
        if (dy < 0) {
            y += dy / 2;
            dy = 0;
        }
        return {
            x: x,
            y: y,
            dx: dx,
            dy: dy
        };
    }
    d3.random = {
        normal: function(µ, σ) {
            var n = arguments.length;
            if (n < 2) σ = 1;
            if (n < 1) µ = 0;
            return function() {
                var x, y, r;
                do {
                    x = Math.random() * 2 - 1;
                    y = Math.random() * 2 - 1;
                    r = x * x + y * y;
                } while (!r || r > 1);
                return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
            };
        },
        logNormal: function() {
            var random = d3.random.normal.apply(d3, arguments);
            return function() {
                return Math.exp(random());
            };
        },
        bates: function(m) {
            var random = d3.random.irwinHall(m);
            return function() {
                return random() / m;
            };
        },
        irwinHall: function(m) {
            return function() {
                for (var s = 0, j = 0; j < m; j++) s += Math.random();
                return s;
            };
        }
    };
    d3.scale = {};
    function d3_scaleExtent(domain) {
        var start = domain[0], stop = domain[domain.length - 1];
        return start < stop ? [ start, stop ] : [ stop, start ];
    }
    function d3_scaleRange(scale) {
        return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
    }
    function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
        var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
        return function(x) {
            return i(u(x));
        };
    }
    function d3_scale_nice(domain, nice) {
        var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
        if (x1 < x0) {
            dx = i0, i0 = i1, i1 = dx;
            dx = x0, x0 = x1, x1 = dx;
        }
        domain[i0] = nice.floor(x0);
        domain[i1] = nice.ceil(x1);
        return domain;
    }
    function d3_scale_niceStep(step) {
        return step ? {
            floor: function(x) {
                return Math.floor(x / step) * step;
            },
            ceil: function(x) {
                return Math.ceil(x / step) * step;
            }
        } : d3_scale_niceIdentity;
    }
    var d3_scale_niceIdentity = {
        floor: d3_identity,
        ceil: d3_identity
    };
    function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
        var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
        if (domain[k] < domain[0]) {
            domain = domain.slice().reverse();
            range = range.slice().reverse();
        }
        while (++j <= k) {
            u.push(uninterpolate(domain[j - 1], domain[j]));
            i.push(interpolate(range[j - 1], range[j]));
        }
        return function(x) {
            var j = d3.bisect(domain, x, 1, k) - 1;
            return i[j](u[j](x));
        };
    }
    d3.scale.linear = function() {
        return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
    };
    function d3_scale_linear(domain, range, interpolate, clamp) {
        var output, input;
        function rescale() {
            var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
            output = linear(domain, range, uninterpolate, interpolate);
            input = linear(range, domain, uninterpolate, d3_interpolate);
            return scale;
        }
        function scale(x) {
            return output(x);
        }
        scale.invert = function(y) {
            return input(y);
        };
        scale.domain = function(x) {
            if (!arguments.length) return domain;
            domain = x.map(Number);
            return rescale();
        };
        scale.range = function(x) {
            if (!arguments.length) return range;
            range = x;
            return rescale();
        };
        scale.rangeRound = function(x) {
            return scale.range(x).interpolate(d3_interpolateRound);
        };
        scale.clamp = function(x) {
            if (!arguments.length) return clamp;
            clamp = x;
            return rescale();
        };
        scale.interpolate = function(x) {
            if (!arguments.length) return interpolate;
            interpolate = x;
            return rescale();
        };
        scale.ticks = function(m) {
            return d3_scale_linearTicks(domain, m);
        };
        scale.tickFormat = function(m, format) {
            return d3_scale_linearTickFormat(domain, m, format);
        };
        scale.nice = function(m) {
            d3_scale_linearNice(domain, m);
            return rescale();
        };
        scale.copy = function() {
            return d3_scale_linear(domain, range, interpolate, clamp);
        };
        return rescale();
    }
    function d3_scale_linearRebind(scale, linear) {
        return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
    }
    function d3_scale_linearNice(domain, m) {
        return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    }
    function d3_scale_linearTickRange(domain, m) {
        if (m == null) m = 10;
        var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
        if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
        extent[0] = Math.ceil(extent[0] / step) * step;
        extent[1] = Math.floor(extent[1] / step) * step + step * .5;
        extent[2] = step;
        return extent;
    }
    function d3_scale_linearTicks(domain, m) {
        return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
    }
    function d3_scale_linearTickFormat(domain, m, format) {
        var range = d3_scale_linearTickRange(domain, m);
        return d3.format(format ? format.replace(d3_format_re, function(a, b, c, d, e, f, g, h, i, j) {
            return [ b, c, d, e, f, g, h, i || "." + d3_scale_linearFormatPrecision(j, range), j ].join("");
        }) : ",." + d3_scale_linearPrecision(range[2]) + "f");
    }
    var d3_scale_linearFormatSignificant = {
        s: 1,
        g: 1,
        p: 1,
        r: 1,
        e: 1
    };
    function d3_scale_linearPrecision(value) {
        return -Math.floor(Math.log(value) / Math.LN10 + .01);
    }
    function d3_scale_linearFormatPrecision(type, range) {
        var p = d3_scale_linearPrecision(range[2]);
        return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(Math.abs(range[0]), Math.abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
    }
    d3.scale.log = function() {
        return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
    };
    function d3_scale_log(linear, base, positive, domain) {
        function log(x) {
            return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
        }
        function pow(x) {
            return positive ? Math.pow(base, x) : -Math.pow(base, -x);
        }
        function scale(x) {
            return linear(log(x));
        }
        scale.invert = function(x) {
            return pow(linear.invert(x));
        };
        scale.domain = function(x) {
            if (!arguments.length) return domain;
            positive = x[0] >= 0;
            linear.domain((domain = x.map(Number)).map(log));
            return scale;
        };
        scale.base = function(_) {
            if (!arguments.length) return base;
            base = +_;
            linear.domain(domain.map(log));
            return scale;
        };
        scale.nice = function() {
            var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
            linear.domain(niced);
            domain = niced.map(pow);
            return scale;
        };
        scale.ticks = function() {
            var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
            if (isFinite(j - i)) {
                if (positive) {
                    for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
                    ticks.push(pow(i));
                } else {
                    ticks.push(pow(i));
                    for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
                }
                for (i = 0; ticks[i] < u; i++) {}
                for (j = ticks.length; ticks[j - 1] > v; j--) {}
                ticks = ticks.slice(i, j);
            }
            return ticks;
        };
        scale.tickFormat = function(n, format) {
            if (!arguments.length) return d3_scale_logFormat;
            if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
            var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12,
                Math.floor), e;
            return function(d) {
                return d / pow(f(log(d) + e)) <= k ? format(d) : "";
            };
        };
        scale.copy = function() {
            return d3_scale_log(linear.copy(), base, positive, domain);
        };
        return d3_scale_linearRebind(scale, linear);
    }
    var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
        floor: function(x) {
            return -Math.ceil(-x);
        },
        ceil: function(x) {
            return -Math.floor(-x);
        }
    };
    d3.scale.pow = function() {
        return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
    };
    function d3_scale_pow(linear, exponent, domain) {
        var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
        function scale(x) {
            return linear(powp(x));
        }
        scale.invert = function(x) {
            return powb(linear.invert(x));
        };
        scale.domain = function(x) {
            if (!arguments.length) return domain;
            linear.domain((domain = x.map(Number)).map(powp));
            return scale;
        };
        scale.ticks = function(m) {
            return d3_scale_linearTicks(domain, m);
        };
        scale.tickFormat = function(m, format) {
            return d3_scale_linearTickFormat(domain, m, format);
        };
        scale.nice = function(m) {
            return scale.domain(d3_scale_linearNice(domain, m));
        };
        scale.exponent = function(x) {
            if (!arguments.length) return exponent;
            powp = d3_scale_powPow(exponent = x);
            powb = d3_scale_powPow(1 / exponent);
            linear.domain(domain.map(powp));
            return scale;
        };
        scale.copy = function() {
            return d3_scale_pow(linear.copy(), exponent, domain);
        };
        return d3_scale_linearRebind(scale, linear);
    }
    function d3_scale_powPow(e) {
        return function(x) {
            return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
        };
    }
    d3.scale.sqrt = function() {
        return d3.scale.pow().exponent(.5);
    };
    d3.scale.ordinal = function() {
        return d3_scale_ordinal([], {
            t: "range",
            a: [ [] ]
        });
    };
    function d3_scale_ordinal(domain, ranger) {
        var index, range, rangeBand;
        function scale(x) {
            return range[((index.get(x) || ranger.t === "range" && index.set(x, domain.push(x))) - 1) % range.length];
        }
        function steps(start, step) {
            return d3.range(domain.length).map(function(i) {
                return start + step * i;
            });
        }
        scale.domain = function(x) {
            if (!arguments.length) return domain;
            domain = [];
            index = new d3_Map();
            var i = -1, n = x.length, xi;
            while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
            return scale[ranger.t].apply(scale, ranger.a);
        };
        scale.range = function(x) {
            if (!arguments.length) return range;
            range = x;
            rangeBand = 0;
            ranger = {
                t: "range",
                a: arguments
            };
            return scale;
        };
        scale.rangePoints = function(x, padding) {
            if (arguments.length < 2) padding = 0;
            var start = x[0], stop = x[1], step = (stop - start) / (Math.max(1, domain.length - 1) + padding);
            range = steps(domain.length < 2 ? (start + stop) / 2 : start + step * padding / 2, step);
            rangeBand = 0;
            ranger = {
                t: "rangePoints",
                a: arguments
            };
            return scale;
        };
        scale.rangeBands = function(x, padding, outerPadding) {
            if (arguments.length < 2) padding = 0;
            if (arguments.length < 3) outerPadding = padding;
            var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
            range = steps(start + step * outerPadding, step);
            if (reverse) range.reverse();
            rangeBand = step * (1 - padding);
            ranger = {
                t: "rangeBands",
                a: arguments
            };
            return scale;
        };
        scale.rangeRoundBands = function(x, padding, outerPadding) {
            if (arguments.length < 2) padding = 0;
            if (arguments.length < 3) outerPadding = padding;
            var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding)), error = stop - start - (domain.length - padding) * step;
            range = steps(start + Math.round(error / 2), step);
            if (reverse) range.reverse();
            rangeBand = Math.round(step * (1 - padding));
            ranger = {
                t: "rangeRoundBands",
                a: arguments
            };
            return scale;
        };
        scale.rangeBand = function() {
            return rangeBand;
        };
        scale.rangeExtent = function() {
            return d3_scaleExtent(ranger.a[0]);
        };
        scale.copy = function() {
            return d3_scale_ordinal(domain, ranger);
        };
        return scale.domain(domain);
    }
    d3.scale.category10 = function() {
        return d3.scale.ordinal().range(d3_category10);
    };
    d3.scale.category20 = function() {
        return d3.scale.ordinal().range(d3_category20);
    };
    d3.scale.category20b = function() {
        return d3.scale.ordinal().range(d3_category20b);
    };
    d3.scale.category20c = function() {
        return d3.scale.ordinal().range(d3_category20c);
    };
    var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
    var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
    var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
    var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
    d3.scale.quantile = function() {
        return d3_scale_quantile([], []);
    };
    function d3_scale_quantile(domain, range) {
        var thresholds;
        function rescale() {
            var k = 0, q = range.length;
            thresholds = [];
            while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
            return scale;
        }
        function scale(x) {
            if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
        }
        scale.domain = function(x) {
            if (!arguments.length) return domain;
            domain = x.filter(function(d) {
                return !isNaN(d);
            }).sort(d3.ascending);
            return rescale();
        };
        scale.range = function(x) {
            if (!arguments.length) return range;
            range = x;
            return rescale();
        };
        scale.quantiles = function() {
            return thresholds;
        };
        scale.invertExtent = function(y) {
            y = range.indexOf(y);
            return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
        };
        scale.copy = function() {
            return d3_scale_quantile(domain, range);
        };
        return rescale();
    }
    d3.scale.quantize = function() {
        return d3_scale_quantize(0, 1, [ 0, 1 ]);
    };
    function d3_scale_quantize(x0, x1, range) {
        var kx, i;
        function scale(x) {
            return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
        }
        function rescale() {
            kx = range.length / (x1 - x0);
            i = range.length - 1;
            return scale;
        }
        scale.domain = function(x) {
            if (!arguments.length) return [ x0, x1 ];
            x0 = +x[0];
            x1 = +x[x.length - 1];
            return rescale();
        };
        scale.range = function(x) {
            if (!arguments.length) return range;
            range = x;
            return rescale();
        };
        scale.invertExtent = function(y) {
            y = range.indexOf(y);
            y = y < 0 ? NaN : y / kx + x0;
            return [ y, y + 1 / kx ];
        };
        scale.copy = function() {
            return d3_scale_quantize(x0, x1, range);
        };
        return rescale();
    }
    d3.scale.threshold = function() {
        return d3_scale_threshold([ .5 ], [ 0, 1 ]);
    };
    function d3_scale_threshold(domain, range) {
        function scale(x) {
            if (x <= x) return range[d3.bisect(domain, x)];
        }
        scale.domain = function(_) {
            if (!arguments.length) return domain;
            domain = _;
            return scale;
        };
        scale.range = function(_) {
            if (!arguments.length) return range;
            range = _;
            return scale;
        };
        scale.invertExtent = function(y) {
            y = range.indexOf(y);
            return [ domain[y - 1], domain[y] ];
        };
        scale.copy = function() {
            return d3_scale_threshold(domain, range);
        };
        return scale;
    }
    d3.scale.identity = function() {
        return d3_scale_identity([ 0, 1 ]);
    };
    function d3_scale_identity(domain) {
        function identity(x) {
            return +x;
        }
        identity.invert = identity;
        identity.domain = identity.range = function(x) {
            if (!arguments.length) return domain;
            domain = x.map(identity);
            return identity;
        };
        identity.ticks = function(m) {
            return d3_scale_linearTicks(domain, m);
        };
        identity.tickFormat = function(m, format) {
            return d3_scale_linearTickFormat(domain, m, format);
        };
        identity.copy = function() {
            return d3_scale_identity(domain);
        };
        return identity;
    }
    d3.svg = {};
    d3.svg.arc = function() {
        var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
        function arc() {
            var r0 = innerRadius.apply(this, arguments), r1 = outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) + d3_svg_arcOffset, a1 = endAngle.apply(this, arguments) + d3_svg_arcOffset, da = (a1 < a0 && (da = a0,
                a0 = a1, a1 = da), a1 - a0), df = da < π ? "0" : "1", c0 = Math.cos(a0), s0 = Math.sin(a0), c1 = Math.cos(a1), s1 = Math.sin(a1);
            return da >= d3_svg_arcMax ? r0 ? "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "M0," + r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + -r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + r0 + "Z" : "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "Z" : r0 ? "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L" + r0 * c1 + "," + r0 * s1 + "A" + r0 + "," + r0 + " 0 " + df + ",0 " + r0 * c0 + "," + r0 * s0 + "Z" : "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L0,0" + "Z";
        }
        arc.innerRadius = function(v) {
            if (!arguments.length) return innerRadius;
            innerRadius = d3_functor(v);
            return arc;
        };
        arc.outerRadius = function(v) {
            if (!arguments.length) return outerRadius;
            outerRadius = d3_functor(v);
            return arc;
        };
        arc.startAngle = function(v) {
            if (!arguments.length) return startAngle;
            startAngle = d3_functor(v);
            return arc;
        };
        arc.endAngle = function(v) {
            if (!arguments.length) return endAngle;
            endAngle = d3_functor(v);
            return arc;
        };
        arc.centroid = function() {
            var r = (innerRadius.apply(this, arguments) + outerRadius.apply(this, arguments)) / 2, a = (startAngle.apply(this, arguments) + endAngle.apply(this, arguments)) / 2 + d3_svg_arcOffset;
            return [ Math.cos(a) * r, Math.sin(a) * r ];
        };
        return arc;
    };
    var d3_svg_arcOffset = -halfπ, d3_svg_arcMax = τ - ε;
    function d3_svg_arcInnerRadius(d) {
        return d.innerRadius;
    }
    function d3_svg_arcOuterRadius(d) {
        return d.outerRadius;
    }
    function d3_svg_arcStartAngle(d) {
        return d.startAngle;
    }
    function d3_svg_arcEndAngle(d) {
        return d.endAngle;
    }
    function d3_svg_line(projection) {
        var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
        function line(data) {
            var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
            function segment() {
                segments.push("M", interpolate(projection(points), tension));
            }
            while (++i < n) {
                if (defined.call(this, d = data[i], i)) {
                    points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
                } else if (points.length) {
                    segment();
                    points = [];
                }
            }
            if (points.length) segment();
            return segments.length ? segments.join("") : null;
        }
        line.x = function(_) {
            if (!arguments.length) return x;
            x = _;
            return line;
        };
        line.y = function(_) {
            if (!arguments.length) return y;
            y = _;
            return line;
        };
        line.defined = function(_) {
            if (!arguments.length) return defined;
            defined = _;
            return line;
        };
        line.interpolate = function(_) {
            if (!arguments.length) return interpolateKey;
            if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
            return line;
        };
        line.tension = function(_) {
            if (!arguments.length) return tension;
            tension = _;
            return line;
        };
        return line;
    }
    d3.svg.line = function() {
        return d3_svg_line(d3_identity);
    };
    var d3_svg_lineInterpolators = d3.map({
        linear: d3_svg_lineLinear,
        "linear-closed": d3_svg_lineLinearClosed,
        step: d3_svg_lineStep,
        "step-before": d3_svg_lineStepBefore,
        "step-after": d3_svg_lineStepAfter,
        basis: d3_svg_lineBasis,
        "basis-open": d3_svg_lineBasisOpen,
        "basis-closed": d3_svg_lineBasisClosed,
        bundle: d3_svg_lineBundle,
        cardinal: d3_svg_lineCardinal,
        "cardinal-open": d3_svg_lineCardinalOpen,
        "cardinal-closed": d3_svg_lineCardinalClosed,
        monotone: d3_svg_lineMonotone
    });
    d3_svg_lineInterpolators.forEach(function(key, value) {
        value.key = key;
        value.closed = /-closed$/.test(key);
    });
    function d3_svg_lineLinear(points) {
        return points.join("L");
    }
    function d3_svg_lineLinearClosed(points) {
        return d3_svg_lineLinear(points) + "Z";
    }
    function d3_svg_lineStep(points) {
        var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
        while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
        if (n > 1) path.push("H", p[0]);
        return path.join("");
    }
    function d3_svg_lineStepBefore(points) {
        var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
        while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
        return path.join("");
    }
    function d3_svg_lineStepAfter(points) {
        var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
        while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
        return path.join("");
    }
    function d3_svg_lineCardinalOpen(points, tension) {
        return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, points.length - 1), d3_svg_lineCardinalTangents(points, tension));
    }
    function d3_svg_lineCardinalClosed(points, tension) {
        return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]),
            points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
    }
    function d3_svg_lineCardinal(points, tension) {
        return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
    }
    function d3_svg_lineHermite(points, tangents) {
        if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
            return d3_svg_lineLinear(points);
        }
        var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
        if (quad) {
            path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
            p0 = points[1];
            pi = 2;
        }
        if (tangents.length > 1) {
            t = tangents[1];
            p = points[pi];
            pi++;
            path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
            for (var i = 2; i < tangents.length; i++, pi++) {
                p = points[pi];
                t = tangents[i];
                path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
            }
        }
        if (quad) {
            var lp = points[pi];
            path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
        }
        return path;
    }
    function d3_svg_lineCardinalTangents(points, tension) {
        var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
        while (++i < n) {
            p0 = p1;
            p1 = p2;
            p2 = points[i];
            tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
        }
        return tangents;
    }
    function d3_svg_lineBasis(points) {
        if (points.length < 3) return d3_svg_lineLinear(points);
        var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
        points.push(points[n - 1]);
        while (++i <= n) {
            pi = points[i];
            px.shift();
            px.push(pi[0]);
            py.shift();
            py.push(pi[1]);
            d3_svg_lineBasisBezier(path, px, py);
        }
        points.pop();
        path.push("L", pi);
        return path.join("");
    }
    function d3_svg_lineBasisOpen(points) {
        if (points.length < 4) return d3_svg_lineLinear(points);
        var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
        while (++i < 3) {
            pi = points[i];
            px.push(pi[0]);
            py.push(pi[1]);
        }
        path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
        --i;
        while (++i < n) {
            pi = points[i];
            px.shift();
            px.push(pi[0]);
            py.shift();
            py.push(pi[1]);
            d3_svg_lineBasisBezier(path, px, py);
        }
        return path.join("");
    }
    function d3_svg_lineBasisClosed(points) {
        var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
        while (++i < 4) {
            pi = points[i % n];
            px.push(pi[0]);
            py.push(pi[1]);
        }
        path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
        --i;
        while (++i < m) {
            pi = points[i % n];
            px.shift();
            px.push(pi[0]);
            py.shift();
            py.push(pi[1]);
            d3_svg_lineBasisBezier(path, px, py);
        }
        return path.join("");
    }
    function d3_svg_lineBundle(points, tension) {
        var n = points.length - 1;
        if (n) {
            var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
            while (++i <= n) {
                p = points[i];
                t = i / n;
                p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
                p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
            }
        }
        return d3_svg_lineBasis(points);
    }
    function d3_svg_lineDot4(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
    }
    var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
    function d3_svg_lineBasisBezier(path, x, y) {
        path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
    }
    function d3_svg_lineSlope(p0, p1) {
        return (p1[1] - p0[1]) / (p1[0] - p0[0]);
    }
    function d3_svg_lineFiniteDifferences(points) {
        var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
        while (++i < j) {
            m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
        }
        m[i] = d;
        return m;
    }
    function d3_svg_lineMonotoneTangents(points) {
        var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
        while (++i < j) {
            d = d3_svg_lineSlope(points[i], points[i + 1]);
            if (abs(d) < ε) {
                m[i] = m[i + 1] = 0;
            } else {
                a = m[i] / d;
                b = m[i + 1] / d;
                s = a * a + b * b;
                if (s > 9) {
                    s = d * 3 / Math.sqrt(s);
                    m[i] = s * a;
                    m[i + 1] = s * b;
                }
            }
        }
        i = -1;
        while (++i <= j) {
            s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
            tangents.push([ s || 0, m[i] * s || 0 ]);
        }
        return tangents;
    }
    function d3_svg_lineMonotone(points) {
        return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
    }
    d3.svg.line.radial = function() {
        var line = d3_svg_line(d3_svg_lineRadial);
        line.radius = line.x, delete line.x;
        line.angle = line.y, delete line.y;
        return line;
    };
    function d3_svg_lineRadial(points) {
        var point, i = -1, n = points.length, r, a;
        while (++i < n) {
            point = points[i];
            r = point[0];
            a = point[1] + d3_svg_arcOffset;
            point[0] = r * Math.cos(a);
            point[1] = r * Math.sin(a);
        }
        return points;
    }
    function d3_svg_area(projection) {
        var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
        function area(data) {
            var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
                return x;
            } : d3_functor(x1), fy1 = y0 === y1 ? function() {
                return y;
            } : d3_functor(y1), x, y;
            function segment() {
                segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
            }
            while (++i < n) {
                if (defined.call(this, d = data[i], i)) {
                    points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
                    points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
                } else if (points0.length) {
                    segment();
                    points0 = [];
                    points1 = [];
                }
            }
            if (points0.length) segment();
            return segments.length ? segments.join("") : null;
        }
        area.x = function(_) {
            if (!arguments.length) return x1;
            x0 = x1 = _;
            return area;
        };
        area.x0 = function(_) {
            if (!arguments.length) return x0;
            x0 = _;
            return area;
        };
        area.x1 = function(_) {
            if (!arguments.length) return x1;
            x1 = _;
            return area;
        };
        area.y = function(_) {
            if (!arguments.length) return y1;
            y0 = y1 = _;
            return area;
        };
        area.y0 = function(_) {
            if (!arguments.length) return y0;
            y0 = _;
            return area;
        };
        area.y1 = function(_) {
            if (!arguments.length) return y1;
            y1 = _;
            return area;
        };
        area.defined = function(_) {
            if (!arguments.length) return defined;
            defined = _;
            return area;
        };
        area.interpolate = function(_) {
            if (!arguments.length) return interpolateKey;
            if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
            interpolateReverse = interpolate.reverse || interpolate;
            L = interpolate.closed ? "M" : "L";
            return area;
        };
        area.tension = function(_) {
            if (!arguments.length) return tension;
            tension = _;
            return area;
        };
        return area;
    }
    d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
    d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
    d3.svg.area = function() {
        return d3_svg_area(d3_identity);
    };
    d3.svg.area.radial = function() {
        var area = d3_svg_area(d3_svg_lineRadial);
        area.radius = area.x, delete area.x;
        area.innerRadius = area.x0, delete area.x0;
        area.outerRadius = area.x1, delete area.x1;
        area.angle = area.y, delete area.y;
        area.startAngle = area.y0, delete area.y0;
        area.endAngle = area.y1, delete area.y1;
        return area;
    };
    d3.svg.chord = function() {
        var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
        function chord(d, i) {
            var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
            return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
        }
        function subgroup(self, f, d, i) {
            var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) + d3_svg_arcOffset, a1 = endAngle.call(self, subgroup, i) + d3_svg_arcOffset;
            return {
                r: r,
                a0: a0,
                a1: a1,
                p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
                p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
            };
        }
        function equals(a, b) {
            return a.a0 == b.a0 && a.a1 == b.a1;
        }
        function arc(r, p, a) {
            return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
        }
        function curve(r0, p0, r1, p1) {
            return "Q 0,0 " + p1;
        }
        chord.radius = function(v) {
            if (!arguments.length) return radius;
            radius = d3_functor(v);
            return chord;
        };
        chord.source = function(v) {
            if (!arguments.length) return source;
            source = d3_functor(v);
            return chord;
        };
        chord.target = function(v) {
            if (!arguments.length) return target;
            target = d3_functor(v);
            return chord;
        };
        chord.startAngle = function(v) {
            if (!arguments.length) return startAngle;
            startAngle = d3_functor(v);
            return chord;
        };
        chord.endAngle = function(v) {
            if (!arguments.length) return endAngle;
            endAngle = d3_functor(v);
            return chord;
        };
        return chord;
    };
    function d3_svg_chordRadius(d) {
        return d.radius;
    }
    d3.svg.diagonal = function() {
        var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
        function diagonal(d, i) {
            var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
                x: p0.x,
                y: m
            }, {
                x: p3.x,
                y: m
            }, p3 ];
            p = p.map(projection);
            return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
        }
        diagonal.source = function(x) {
            if (!arguments.length) return source;
            source = d3_functor(x);
            return diagonal;
        };
        diagonal.target = function(x) {
            if (!arguments.length) return target;
            target = d3_functor(x);
            return diagonal;
        };
        diagonal.projection = function(x) {
            if (!arguments.length) return projection;
            projection = x;
            return diagonal;
        };
        return diagonal;
    };
    function d3_svg_diagonalProjection(d) {
        return [ d.x, d.y ];
    }
    d3.svg.diagonal.radial = function() {
        var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
        diagonal.projection = function(x) {
            return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
        };
        return diagonal;
    };
    function d3_svg_diagonalRadialProjection(projection) {
        return function() {
            var d = projection.apply(this, arguments), r = d[0], a = d[1] + d3_svg_arcOffset;
            return [ r * Math.cos(a), r * Math.sin(a) ];
        };
    }
    d3.svg.symbol = function() {
        var type = d3_svg_symbolType, size = d3_svg_symbolSize;
        function symbol(d, i) {
            return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
        }
        symbol.type = function(x) {
            if (!arguments.length) return type;
            type = d3_functor(x);
            return symbol;
        };
        symbol.size = function(x) {
            if (!arguments.length) return size;
            size = d3_functor(x);
            return symbol;
        };
        return symbol;
    };
    function d3_svg_symbolSize() {
        return 64;
    }
    function d3_svg_symbolType() {
        return "circle";
    }
    function d3_svg_symbolCircle(size) {
        var r = Math.sqrt(size / π);
        return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
    }
    var d3_svg_symbols = d3.map({
        circle: d3_svg_symbolCircle,
        cross: function(size) {
            var r = Math.sqrt(size / 5) / 2;
            return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
        },
        diamond: function(size) {
            var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
            return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
        },
        square: function(size) {
            var r = Math.sqrt(size) / 2;
            return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
        },
        "triangle-down": function(size) {
            var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
            return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
        },
        "triangle-up": function(size) {
            var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
            return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
        }
    });
    d3.svg.symbolTypes = d3_svg_symbols.keys();
    var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
    function d3_transition(groups, id) {
        d3_subclass(groups, d3_transitionPrototype);
        groups.id = id;
        return groups;
    }
    var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
    d3_transitionPrototype.call = d3_selectionPrototype.call;
    d3_transitionPrototype.empty = d3_selectionPrototype.empty;
    d3_transitionPrototype.node = d3_selectionPrototype.node;
    d3_transitionPrototype.size = d3_selectionPrototype.size;
    d3.transition = function(selection) {
        return arguments.length ? d3_transitionInheritId ? selection.transition() : selection : d3_selectionRoot.transition();
    };
    d3.transition.prototype = d3_transitionPrototype;
    d3_transitionPrototype.select = function(selector) {
        var id = this.id, subgroups = [], subgroup, subnode, node;
        selector = d3_selection_selector(selector);
        for (var j = -1, m = this.length; ++j < m; ) {
            subgroups.push(subgroup = []);
            for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
                if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
                    if ("__data__" in node) subnode.__data__ = node.__data__;
                    d3_transitionNode(subnode, i, id, node.__transition__[id]);
                    subgroup.push(subnode);
                } else {
                    subgroup.push(null);
                }
            }
        }
        return d3_transition(subgroups, id);
    };
    d3_transitionPrototype.selectAll = function(selector) {
        var id = this.id, subgroups = [], subgroup, subnodes, node, subnode, transition;
        selector = d3_selection_selectorAll(selector);
        for (var j = -1, m = this.length; ++j < m; ) {
            for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
                if (node = group[i]) {
                    transition = node.__transition__[id];
                    subnodes = selector.call(node, node.__data__, i, j);
                    subgroups.push(subgroup = []);
                    for (var k = -1, o = subnodes.length; ++k < o; ) {
                        if (subnode = subnodes[k]) d3_transitionNode(subnode, k, id, transition);
                        subgroup.push(subnode);
                    }
                }
            }
        }
        return d3_transition(subgroups, id);
    };
    d3_transitionPrototype.filter = function(filter) {
        var subgroups = [], subgroup, group, node;
        if (typeof filter !== "function") filter = d3_selection_filter(filter);
        for (var j = 0, m = this.length; j < m; j++) {
            subgroups.push(subgroup = []);
            for (var group = this[j], i = 0, n = group.length; i < n; i++) {
                if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
                    subgroup.push(node);
                }
            }
        }
        return d3_transition(subgroups, this.id);
    };
    d3_transitionPrototype.tween = function(name, tween) {
        var id = this.id;
        if (arguments.length < 2) return this.node().__transition__[id].tween.get(name);
        return d3_selection_each(this, tween == null ? function(node) {
            node.__transition__[id].tween.remove(name);
        } : function(node) {
            node.__transition__[id].tween.set(name, tween);
        });
    };
    function d3_transition_tween(groups, name, value, tween) {
        var id = groups.id;
        return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
            node.__transition__[id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
        } : (value = tween(value), function(node) {
            node.__transition__[id].tween.set(name, value);
        }));
    }
    d3_transitionPrototype.attr = function(nameNS, value) {
        if (arguments.length < 2) {
            for (value in nameNS) this.attr(value, nameNS[value]);
            return this;
        }
        var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
        function attrNull() {
            this.removeAttribute(name);
        }
        function attrNullNS() {
            this.removeAttributeNS(name.space, name.local);
        }
        function attrTween(b) {
            return b == null ? attrNull : (b += "", function() {
                var a = this.getAttribute(name), i;
                return a !== b && (i = interpolate(a, b), function(t) {
                    this.setAttribute(name, i(t));
                });
            });
        }
        function attrTweenNS(b) {
            return b == null ? attrNullNS : (b += "", function() {
                var a = this.getAttributeNS(name.space, name.local), i;
                return a !== b && (i = interpolate(a, b), function(t) {
                    this.setAttributeNS(name.space, name.local, i(t));
                });
            });
        }
        return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
    };
    d3_transitionPrototype.attrTween = function(nameNS, tween) {
        var name = d3.ns.qualify(nameNS);
        function attrTween(d, i) {
            var f = tween.call(this, d, i, this.getAttribute(name));
            return f && function(t) {
                this.setAttribute(name, f(t));
            };
        }
        function attrTweenNS(d, i) {
            var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
            return f && function(t) {
                this.setAttributeNS(name.space, name.local, f(t));
            };
        }
        return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
    };
    d3_transitionPrototype.style = function(name, value, priority) {
        var n = arguments.length;
        if (n < 3) {
            if (typeof name !== "string") {
                if (n < 2) value = "";
                for (priority in name) this.style(priority, name[priority], value);
                return this;
            }
            priority = "";
        }
        function styleNull() {
            this.style.removeProperty(name);
        }
        function styleString(b) {
            return b == null ? styleNull : (b += "", function() {
                var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;
                return a !== b && (i = d3_interpolate(a, b), function(t) {
                    this.style.setProperty(name, i(t), priority);
                });
            });
        }
        return d3_transition_tween(this, "style." + name, value, styleString);
    };
    d3_transitionPrototype.styleTween = function(name, tween, priority) {
        if (arguments.length < 3) priority = "";
        function styleTween(d, i) {
            var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));
            return f && function(t) {
                this.style.setProperty(name, f(t), priority);
            };
        }
        return this.tween("style." + name, styleTween);
    };
    d3_transitionPrototype.text = function(value) {
        return d3_transition_tween(this, "text", value, d3_transition_text);
    };
    function d3_transition_text(b) {
        if (b == null) b = "";
        return function() {
            this.textContent = b;
        };
    }
    d3_transitionPrototype.remove = function() {
        return this.each("end.transition", function() {
            var p;
            if (this.__transition__.count < 2 && (p = this.parentNode)) p.removeChild(this);
        });
    };
    d3_transitionPrototype.ease = function(value) {
        var id = this.id;
        if (arguments.length < 1) return this.node().__transition__[id].ease;
        if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
        return d3_selection_each(this, function(node) {
            node.__transition__[id].ease = value;
        });
    };
    d3_transitionPrototype.delay = function(value) {
        var id = this.id;
        return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
            node.__transition__[id].delay = +value.call(node, node.__data__, i, j);
        } : (value = +value, function(node) {
            node.__transition__[id].delay = value;
        }));
    };
    d3_transitionPrototype.duration = function(value) {
        var id = this.id;
        return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
            node.__transition__[id].duration = Math.max(1, value.call(node, node.__data__, i, j));
        } : (value = Math.max(1, value), function(node) {
            node.__transition__[id].duration = value;
        }));
    };
    d3_transitionPrototype.each = function(type, listener) {
        var id = this.id;
        if (arguments.length < 2) {
            var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
            d3_transitionInheritId = id;
            d3_selection_each(this, function(node, i, j) {
                d3_transitionInherit = node.__transition__[id];
                type.call(node, node.__data__, i, j);
            });
            d3_transitionInherit = inherit;
            d3_transitionInheritId = inheritId;
        } else {
            d3_selection_each(this, function(node) {
                var transition = node.__transition__[id];
                (transition.event || (transition.event = d3.dispatch("start", "end"))).on(type, listener);
            });
        }
        return this;
    };
    d3_transitionPrototype.transition = function() {
        var id0 = this.id, id1 = ++d3_transitionId, subgroups = [], subgroup, group, node, transition;
        for (var j = 0, m = this.length; j < m; j++) {
            subgroups.push(subgroup = []);
            for (var group = this[j], i = 0, n = group.length; i < n; i++) {
                if (node = group[i]) {
                    transition = Object.create(node.__transition__[id0]);
                    transition.delay += transition.duration;
                    d3_transitionNode(node, i, id1, transition);
                }
                subgroup.push(node);
            }
        }
        return d3_transition(subgroups, id1);
    };
    function d3_transitionNode(node, i, id, inherit) {
        var lock = node.__transition__ || (node.__transition__ = {
            active: 0,
            count: 0
        }), transition = lock[id];
        if (!transition) {
            var time = inherit.time;
            transition = lock[id] = {
                tween: new d3_Map(),
                time: time,
                ease: inherit.ease,
                delay: inherit.delay,
                duration: inherit.duration
            };
            ++lock.count;
            d3.timer(function(elapsed) {
                var d = node.__data__, ease = transition.ease, delay = transition.delay, duration = transition.duration, timer = d3_timer_active, tweened = [];
                timer.t = delay + time;
                if (delay <= elapsed) return start(elapsed - delay);
                timer.c = start;
                function start(elapsed) {
                    if (lock.active > id) return stop();
                    lock.active = id;
                    transition.event && transition.event.start.call(node, d, i);
                    transition.tween.forEach(function(key, value) {
                        if (value = value.call(node, d, i)) {
                            tweened.push(value);
                        }
                    });
                    d3.timer(function() {
                        timer.c = tick(elapsed || 1) ? d3_true : tick;
                        return 1;
                    }, 0, time);
                }
                function tick(elapsed) {
                    if (lock.active !== id) return stop();
                    var t = elapsed / duration, e = ease(t), n = tweened.length;
                    while (n > 0) {
                        tweened[--n].call(node, e);
                    }
                    if (t >= 1) {
                        transition.event && transition.event.end.call(node, d, i);
                        return stop();
                    }
                }
                function stop() {
                    if (--lock.count) delete lock[id]; else delete node.__transition__;
                    return 1;
                }
            }, 0, time);
        }
    }
    d3.svg.axis = function() {
        var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
        function axis(g) {
            g.each(function() {
                var g = d3.select(this);
                var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
                var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick).style("opacity", 1), tickTransform;
                var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"),
                    d3.transition(path));
                tickEnter.append("line");
                tickEnter.append("text");
                var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text");
                switch (orient) {
                    case "bottom":
                    {
                        tickTransform = d3_svg_axisX;
                        lineEnter.attr("y2", innerTickSize);
                        textEnter.attr("y", Math.max(innerTickSize, 0) + tickPadding);
                        lineUpdate.attr("x2", 0).attr("y2", innerTickSize);
                        textUpdate.attr("x", 0).attr("y", Math.max(innerTickSize, 0) + tickPadding);
                        text.attr("dy", ".71em").style("text-anchor", "middle");
                        pathUpdate.attr("d", "M" + range[0] + "," + outerTickSize + "V0H" + range[1] + "V" + outerTickSize);
                        break;
                    }

                    case "top":
                    {
                        tickTransform = d3_svg_axisX;
                        lineEnter.attr("y2", -innerTickSize);
                        textEnter.attr("y", -(Math.max(innerTickSize, 0) + tickPadding));
                        lineUpdate.attr("x2", 0).attr("y2", -innerTickSize);
                        textUpdate.attr("x", 0).attr("y", -(Math.max(innerTickSize, 0) + tickPadding));
                        text.attr("dy", "0em").style("text-anchor", "middle");
                        pathUpdate.attr("d", "M" + range[0] + "," + -outerTickSize + "V0H" + range[1] + "V" + -outerTickSize);
                        break;
                    }

                    case "left":
                    {
                        tickTransform = d3_svg_axisY;
                        lineEnter.attr("x2", -innerTickSize);
                        textEnter.attr("x", -(Math.max(innerTickSize, 0) + tickPadding));
                        lineUpdate.attr("x2", -innerTickSize).attr("y2", 0);
                        textUpdate.attr("x", -(Math.max(innerTickSize, 0) + tickPadding)).attr("y", 0);
                        text.attr("dy", ".32em").style("text-anchor", "end");
                        pathUpdate.attr("d", "M" + -outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + -outerTickSize);
                        break;
                    }

                    case "right":
                    {
                        tickTransform = d3_svg_axisY;
                        lineEnter.attr("x2", innerTickSize);
                        textEnter.attr("x", Math.max(innerTickSize, 0) + tickPadding);
                        lineUpdate.attr("x2", innerTickSize).attr("y2", 0);
                        textUpdate.attr("x", Math.max(innerTickSize, 0) + tickPadding).attr("y", 0);
                        text.attr("dy", ".32em").style("text-anchor", "start");
                        pathUpdate.attr("d", "M" + outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + outerTickSize);
                        break;
                    }
                }
                if (scale1.rangeBand) {
                    var x = scale1, dx = x.rangeBand() / 2;
                    scale0 = scale1 = function(d) {
                        return x(d) + dx;
                    };
                } else if (scale0.rangeBand) {
                    scale0 = scale1;
                } else {
                    tickExit.call(tickTransform, scale1);
                }
                tickEnter.call(tickTransform, scale0);
                tickUpdate.call(tickTransform, scale1);
            });
        }
        axis.scale = function(x) {
            if (!arguments.length) return scale;
            scale = x;
            return axis;
        };
        axis.orient = function(x) {
            if (!arguments.length) return orient;
            orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
            return axis;
        };
        axis.ticks = function() {
            if (!arguments.length) return tickArguments_;
            tickArguments_ = arguments;
            return axis;
        };
        axis.tickValues = function(x) {
            if (!arguments.length) return tickValues;
            tickValues = x;
            return axis;
        };
        axis.tickFormat = function(x) {
            if (!arguments.length) return tickFormat_;
            tickFormat_ = x;
            return axis;
        };
        axis.tickSize = function(x) {
            var n = arguments.length;
            if (!n) return innerTickSize;
            innerTickSize = +x;
            outerTickSize = +arguments[n - 1];
            return axis;
        };
        axis.innerTickSize = function(x) {
            if (!arguments.length) return innerTickSize;
            innerTickSize = +x;
            return axis;
        };
        axis.outerTickSize = function(x) {
            if (!arguments.length) return outerTickSize;
            outerTickSize = +x;
            return axis;
        };
        axis.tickPadding = function(x) {
            if (!arguments.length) return tickPadding;
            tickPadding = +x;
            return axis;
        };
        axis.tickSubdivide = function() {
            return arguments.length && axis;
        };
        return axis;
    };
    var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
        top: 1,
        right: 1,
        bottom: 1,
        left: 1
    };
    function d3_svg_axisX(selection, x) {
        selection.attr("transform", function(d) {
            return "translate(" + x(d) + ",0)";
        });
    }
    function d3_svg_axisY(selection, y) {
        selection.attr("transform", function(d) {
            return "translate(0," + y(d) + ")";
        });
    }
    d3.svg.brush = function() {
        var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
        function brush(g) {
            g.each(function() {
                var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
                var background = g.selectAll(".background").data([ 0 ]);
                background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
                g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
                var resize = g.selectAll(".resize").data(resizes, d3_identity);
                resize.exit().remove();
                resize.enter().append("g").attr("class", function(d) {
                    return "resize " + d;
                }).style("cursor", function(d) {
                        return d3_svg_brushCursor[d];
                    }).append("rect").attr("x", function(d) {
                        return /[ew]$/.test(d) ? -3 : null;
                    }).attr("y", function(d) {
                        return /^[ns]/.test(d) ? -3 : null;
                    }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
                resize.style("display", brush.empty() ? "none" : null);
                var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
                if (x) {
                    range = d3_scaleRange(x);
                    backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
                    redrawX(gUpdate);
                }
                if (y) {
                    range = d3_scaleRange(y);
                    backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
                    redrawY(gUpdate);
                }
                redraw(gUpdate);
            });
        }
        brush.event = function(g) {
            g.each(function() {
                var event_ = event.of(this, arguments), extent1 = {
                    x: xExtent,
                    y: yExtent,
                    i: xExtentDomain,
                    j: yExtentDomain
                }, extent0 = this.__chart__ || extent1;
                this.__chart__ = extent1;
                if (d3_transitionInheritId) {
                    d3.select(this).transition().each("start.brush", function() {
                        xExtentDomain = extent0.i;
                        yExtentDomain = extent0.j;
                        xExtent = extent0.x;
                        yExtent = extent0.y;
                        event_({
                            type: "brushstart"
                        });
                    }).tween("brush:brush", function() {
                            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
                            xExtentDomain = yExtentDomain = null;
                            return function(t) {
                                xExtent = extent1.x = xi(t);
                                yExtent = extent1.y = yi(t);
                                event_({
                                    type: "brush",
                                    mode: "resize"
                                });
                            };
                        }).each("end.brush", function() {
                            xExtentDomain = extent1.i;
                            yExtentDomain = extent1.j;
                            event_({
                                type: "brush",
                                mode: "resize"
                            });
                            event_({
                                type: "brushend"
                            });
                        });
                } else {
                    event_({
                        type: "brushstart"
                    });
                    event_({
                        type: "brush",
                        mode: "resize"
                    });
                    event_({
                        type: "brushend"
                    });
                }
            });
        };
        function redraw(g) {
            g.selectAll(".resize").attr("transform", function(d) {
                return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
            });
        }
        function redrawX(g) {
            g.select(".extent").attr("x", xExtent[0]);
            g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
        }
        function redrawY(g) {
            g.select(".extent").attr("y", yExtent[0]);
            g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
        }
        function brushstart() {
            var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(), center, origin = d3.mouse(target), offset;
            var w = d3.select(d3_window).on("keydown.brush", keydown).on("keyup.brush", keyup);
            if (d3.event.changedTouches) {
                w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
            } else {
                w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
            }
            g.interrupt().selectAll("*").interrupt();
            if (dragging) {
                origin[0] = xExtent[0] - origin[0];
                origin[1] = yExtent[0] - origin[1];
            } else if (resizing) {
                var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
                offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
                origin[0] = xExtent[ex];
                origin[1] = yExtent[ey];
            } else if (d3.event.altKey) center = origin.slice();
            g.style("pointer-events", "none").selectAll(".resize").style("display", null);
            d3.select("body").style("cursor", eventTarget.style("cursor"));
            event_({
                type: "brushstart"
            });
            brushmove();
            function keydown() {
                if (d3.event.keyCode == 32) {
                    if (!dragging) {
                        center = null;
                        origin[0] -= xExtent[1];
                        origin[1] -= yExtent[1];
                        dragging = 2;
                    }
                    d3_eventPreventDefault();
                }
            }
            function keyup() {
                if (d3.event.keyCode == 32 && dragging == 2) {
                    origin[0] += xExtent[1];
                    origin[1] += yExtent[1];
                    dragging = 0;
                    d3_eventPreventDefault();
                }
            }
            function brushmove() {
                var point = d3.mouse(target), moved = false;
                if (offset) {
                    point[0] += offset[0];
                    point[1] += offset[1];
                }
                if (!dragging) {
                    if (d3.event.altKey) {
                        if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
                        origin[0] = xExtent[+(point[0] < center[0])];
                        origin[1] = yExtent[+(point[1] < center[1])];
                    } else center = null;
                }
                if (resizingX && move1(point, x, 0)) {
                    redrawX(g);
                    moved = true;
                }
                if (resizingY && move1(point, y, 1)) {
                    redrawY(g);
                    moved = true;
                }
                if (moved) {
                    redraw(g);
                    event_({
                        type: "brush",
                        mode: dragging ? "move" : "resize"
                    });
                }
            }
            function move1(point, scale, i) {
                var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
                if (dragging) {
                    r0 -= position;
                    r1 -= size + position;
                }
                min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
                if (dragging) {
                    max = (min += position) + size;
                } else {
                    if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
                    if (position < min) {
                        max = min;
                        min = position;
                    } else {
                        max = position;
                    }
                }
                if (extent[0] != min || extent[1] != max) {
                    if (i) yExtentDomain = null; else xExtentDomain = null;
                    extent[0] = min;
                    extent[1] = max;
                    return true;
                }
            }
            function brushend() {
                brushmove();
                g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
                d3.select("body").style("cursor", null);
                w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
                dragRestore();
                event_({
                    type: "brushend"
                });
            }
        }
        brush.x = function(z) {
            if (!arguments.length) return x;
            x = z;
            resizes = d3_svg_brushResizes[!x << 1 | !y];
            return brush;
        };
        brush.y = function(z) {
            if (!arguments.length) return y;
            y = z;
            resizes = d3_svg_brushResizes[!x << 1 | !y];
            return brush;
        };
        brush.clamp = function(z) {
            if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
            if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
            return brush;
        };
        brush.extent = function(z) {
            var x0, x1, y0, y1, t;
            if (!arguments.length) {
                if (x) {
                    if (xExtentDomain) {
                        x0 = xExtentDomain[0], x1 = xExtentDomain[1];
                    } else {
                        x0 = xExtent[0], x1 = xExtent[1];
                        if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
                        if (x1 < x0) t = x0, x0 = x1, x1 = t;
                    }
                }
                if (y) {
                    if (yExtentDomain) {
                        y0 = yExtentDomain[0], y1 = yExtentDomain[1];
                    } else {
                        y0 = yExtent[0], y1 = yExtent[1];
                        if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
                        if (y1 < y0) t = y0, y0 = y1, y1 = t;
                    }
                }
                return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
            }
            if (x) {
                x0 = z[0], x1 = z[1];
                if (y) x0 = x0[0], x1 = x1[0];
                xExtentDomain = [ x0, x1 ];
                if (x.invert) x0 = x(x0), x1 = x(x1);
                if (x1 < x0) t = x0, x0 = x1, x1 = t;
                if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
            }
            if (y) {
                y0 = z[0], y1 = z[1];
                if (x) y0 = y0[1], y1 = y1[1];
                yExtentDomain = [ y0, y1 ];
                if (y.invert) y0 = y(y0), y1 = y(y1);
                if (y1 < y0) t = y0, y0 = y1, y1 = t;
                if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
            }
            return brush;
        };
        brush.clear = function() {
            if (!brush.empty()) {
                xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
                xExtentDomain = yExtentDomain = null;
            }
            return brush;
        };
        brush.empty = function() {
            return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
        };
        return d3.rebind(brush, event, "on");
    };
    var d3_svg_brushCursor = {
        n: "ns-resize",
        e: "ew-resize",
        s: "ns-resize",
        w: "ew-resize",
        nw: "nwse-resize",
        ne: "nesw-resize",
        se: "nwse-resize",
        sw: "nesw-resize"
    };
    var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
    var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
    var d3_time_formatUtc = d3_time_format.utc;
    var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
    d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
    function d3_time_formatIsoNative(date) {
        return date.toISOString();
    }
    d3_time_formatIsoNative.parse = function(string) {
        var date = new Date(string);
        return isNaN(date) ? null : date;
    };
    d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
    d3_time.second = d3_time_interval(function(date) {
        return new d3_date(Math.floor(date / 1e3) * 1e3);
    }, function(date, offset) {
        date.setTime(date.getTime() + Math.floor(offset) * 1e3);
    }, function(date) {
        return date.getSeconds();
    });
    d3_time.seconds = d3_time.second.range;
    d3_time.seconds.utc = d3_time.second.utc.range;
    d3_time.minute = d3_time_interval(function(date) {
        return new d3_date(Math.floor(date / 6e4) * 6e4);
    }, function(date, offset) {
        date.setTime(date.getTime() + Math.floor(offset) * 6e4);
    }, function(date) {
        return date.getMinutes();
    });
    d3_time.minutes = d3_time.minute.range;
    d3_time.minutes.utc = d3_time.minute.utc.range;
    d3_time.hour = d3_time_interval(function(date) {
        var timezone = date.getTimezoneOffset() / 60;
        return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
    }, function(date, offset) {
        date.setTime(date.getTime() + Math.floor(offset) * 36e5);
    }, function(date) {
        return date.getHours();
    });
    d3_time.hours = d3_time.hour.range;
    d3_time.hours.utc = d3_time.hour.utc.range;
    d3_time.month = d3_time_interval(function(date) {
        date = d3_time.day(date);
        date.setDate(1);
        return date;
    }, function(date, offset) {
        date.setMonth(date.getMonth() + offset);
    }, function(date) {
        return date.getMonth();
    });
    d3_time.months = d3_time.month.range;
    d3_time.months.utc = d3_time.month.utc.range;
    function d3_time_scale(linear, methods, format) {
        function scale(x) {
            return linear(x);
        }
        scale.invert = function(x) {
            return d3_time_scaleDate(linear.invert(x));
        };
        scale.domain = function(x) {
            if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
            linear.domain(x);
            return scale;
        };
        function tickMethod(extent, count) {
            var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
            return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
                return d / 31536e6;
            }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
        }
        scale.nice = function(interval, skip) {
            var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
            if (method) interval = method[0], skip = method[1];
            function skipped(date) {
                return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
            }
            return scale.domain(d3_scale_nice(domain, skip > 1 ? {
                floor: function(date) {
                    while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
                    return date;
                },
                ceil: function(date) {
                    while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
                    return date;
                }
            } : interval));
        };
        scale.ticks = function(interval, skip) {
            var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
                range: interval
            }, skip ];
            if (method) interval = method[0], skip = method[1];
            return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
        };
        scale.tickFormat = function() {
            return format;
        };
        scale.copy = function() {
            return d3_time_scale(linear.copy(), methods, format);
        };
        return d3_scale_linearRebind(scale, linear);
    }
    function d3_time_scaleDate(t) {
        return new Date(t);
    }
    var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
    var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
    var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
        return d.getMilliseconds();
    } ], [ ":%S", function(d) {
        return d.getSeconds();
    } ], [ "%I:%M", function(d) {
        return d.getMinutes();
    } ], [ "%I %p", function(d) {
        return d.getHours();
    } ], [ "%a %d", function(d) {
        return d.getDay() && d.getDate() != 1;
    } ], [ "%b %d", function(d) {
        return d.getDate() != 1;
    } ], [ "%B", function(d) {
        return d.getMonth();
    } ], [ "%Y", d3_true ] ]);
    var d3_time_scaleMilliseconds = {
        range: function(start, stop, step) {
            return d3.range(+start, +stop, step).map(d3_time_scaleDate);
        },
        floor: d3_identity,
        ceil: d3_identity
    };
    d3_time_scaleLocalMethods.year = d3_time.year;
    d3_time.scale = function() {
        return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
    };
    var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
        return [ m[0].utc, m[1] ];
    });
    var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
        return d.getUTCMilliseconds();
    } ], [ ":%S", function(d) {
        return d.getUTCSeconds();
    } ], [ "%I:%M", function(d) {
        return d.getUTCMinutes();
    } ], [ "%I %p", function(d) {
        return d.getUTCHours();
    } ], [ "%a %d", function(d) {
        return d.getUTCDay() && d.getUTCDate() != 1;
    } ], [ "%b %d", function(d) {
        return d.getUTCDate() != 1;
    } ], [ "%B", function(d) {
        return d.getUTCMonth();
    } ], [ "%Y", d3_true ] ]);
    d3_time_scaleUtcMethods.year = d3_time.year.utc;
    d3_time.scale.utc = function() {
        return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
    };
    d3.text = d3_xhrType(function(request) {
        return request.responseText;
    });
    d3.json = function(url, callback) {
        return d3_xhr(url, "application/json", d3_json, callback);
    };
    function d3_json(request) {
        return JSON.parse(request.responseText);
    }
    d3.html = function(url, callback) {
        return d3_xhr(url, "text/html", d3_html, callback);
    };
    function d3_html(request) {
        var range = d3_document.createRange();
        range.selectNode(d3_document.body);
        return range.createContextualFragment(request.responseText);
    }
    d3.xml = d3_xhrType(function(request) {
        return request.responseXML;
    });
    if (typeof define === "function" && define.amd) {
        define('lib.d3',d3);
    } else if (typeof module === "object" && module.exports) {
        module.exports = d3;
    } else {
        this.d3 = d3;
    }
}();
/**
 * Created by mcandela on 05/11/13.
 */

define('view.template-manager',[
    "env.utils",
    "lib.jquery-libs-amd"
], function(utils, $){

    /**
     * TemplateManagerView is the component in charge of creating and manipulating the HTML dom elements.
     *
     * @class TemplateManagerView
     * @constructor
     * @module view
     */

    var TemplateManagerView = function(env){
        var widgetUrl, config;

        widgetUrl = env.widgetUrl;
        config = env.config;

        this.loadingImage = '<img src="' + widgetUrl + 'view/img/loading.gif" class="loading-image"/> ';

        this.timeMargins = '<div class="time-margins"><div style="position: absolute; left: 0;"></div> <div style="position: absolute; right: 0;"></div></div>';

        this.controlPanel =
            '<div class="button-group control-panel">' +
                '<div class="legend-controller">' +
                '<select class="legend-controller-select" title="' + env.lang.viewSelectboxTitle + '"></select>' +
                '</div>' +
                '<div class="legend">' +
                '<div class="legend-pls">' +
                '<div class="legend-pls-item"><div class="pls-color"></div>&nbsp;&gt;&nbsp;<span class="pls-percentage"></span><span class="pls-unit"></span>&nbsp;</div>' +
                '<div class="legend-pls-item"><div class="pls-color"></div>&nbsp;&le;&nbsp;<span class="pls-percentage"></span><span class="pls-unit"></span>&nbsp;</div>' +
                '</div>' +
                '<div class="legend-agr-level">' +
                '</div>'
                +
                '</div>' +


                '<div class="button forward">' +
                '<img src="' + widgetUrl + 'view/img/dnsmon_forward_icon.png"/>' +
                '</div>' +

                '<div class="button right">' +
                '<img src="' + widgetUrl + 'view/img/right_icon.png"/>' +
                '</div>' +

                '<div class="button zoom-in">' +
                '<img src="' + widgetUrl + 'view/img/zoomin_icon.png"/>' +
                '</div>' +

                '<div class="button zoom-out">' +
                '<img src="' + widgetUrl + 'view/img/zoomout_icon.png"/>' +
                '</div>' +

                '<div class="button allrows">' +
                '<img src="' + widgetUrl + 'view/img/allrows_icon.png"/>' +
                '</div>' +

                '<div class="button left">' +
                '<img src="' + widgetUrl + 'view/img/left_icon.png"/>' +
                '</div>' +

                '<div class="button timepicker">' +
                '<img src="' + widgetUrl + 'view/img/calendar_icon.png"/>' +
                '</div>' +

                '<div class="button thresholds">' +
                '<img src="' + widgetUrl + 'view/img/thresholds_icon.png"/>' +
                '</div>' +

                '<div class="button keep-updated">' +
                '<img src="' + widgetUrl + 'view/img/keep_updated_icon.png"/>' +
                '</div>' +

                '<div class="button filters">' +
                '<img src="' + widgetUrl + 'view/img/filter_icon.png"/>' +
                '</div>' +

                '<div class="button full-screen">' +
                '<img src="' + widgetUrl + 'view/img/dnsmon_fullscreen_icon.png"/>' +
                '</div>' +


                '<div class="dnsmon-popup default-text">' +
                '</div>' +

                '</div>';

        this.timepickersPopup =
            '<div style="float: left;">' + env.lang.startDateLabel + ' <br/><input type="text" class="timepicker-start date-field" /></div>' +
                '<div style="position: absolute; top: 15px; left: 145px;"><img style="" src="' + widgetUrl + 'view/img/double_arrow.gif" /></div>' +
                '<div style="float: right;">' + env.lang.endDateLabel + ' <br/><input type="text" class="timepicker-stop date-field" /></div>';

        this.thresholdsPopup =
            '<div>' +
                '<div class="thresholds-internal-legend">' + '<div class="popup-pls-text"></div>' +
                '<div class="popup-pls-item"><div class="pls-color"></div>&nbsp;&gt;&nbsp;<input class="pls-percentage max-val" value="0"/>&nbsp;<span class="pls-unit"></span>&nbsp;</div>' +
                '<div class="popup-pls-item"><div class="pls-color"></div>&nbsp;&le;&nbsp;<input class="pls-percentage min-val" value="0"/>&nbsp;<span class="pls-unit"></span>&nbsp;</div>' +
                '</div>' +
                '<div class="popup-pls-apply">' + env.lang.pressToApply + '</div>' +
                '<div class="thresholds-slider"></div>' +
                '</div>';

        this.slidingMenu = '<div class="sliding-panel">' +
            '</div>';

        this.openTimeOverviewImage = '<img src="' + widgetUrl + 'view/img/open_time_overview.png" class="open-timeoverview-button"/>';

        this.getLastData = '<div>5h</div>' +
            '<div>1d</div>' +
            '<div>1w</div>' +
            '<div>1m</div>';


        this.extraDataPopup =
            '<div>' +
                '<div>' + env.lang.extraInfoDialogTextSample + ':' +
                '<div class="popup-raw-data"></div>' +
                '</div>' +

                '<div style="margin-top: 10px;">' + env.lang.extraInfoDialogTextOverview + ':' +
                '<div class="popup-overview-raw-data"></div>' +
                '</div>' +
                '<div class="popup-tabs">' +
                    '<ul>' +
                        '<li><a href="#tabs-1">' + env.lang.tab1Title + '</a></li>' +
                        '<li><a href="#tabs-2">' + env.lang.tab2Title + '</a></li>' +
                        '<li><a href="#tabs-3">' + env.lang.tab3Title + '</a></li>' +
                    '</ul>' +
                    '<div id="tabs-1">' +
                        '<div class="popup-dns-response"></div>' +
                    '</div>' +
                    '<div id="tabs-2">' +
                        '<div class="popup-traceroute"></div>' +
                    '</div>' +
                    '<div id="tabs-3">' +
                        '<div class="popup-hostnamebind-response"></div>' +
                    '</div>' +
                '</div>' +
                '</div>';

        this.dnsResponse =
            '<table class="dns-response-table" border="1">' +
                '<tr class="dns-response-top">' +
                '<td>' + env.lang.dnsResponsePrbId + ': <span class="dns-response-prbid"></span>' + '</td>' +
                '<td>' + env.lang.dnsResponseRt + ': <span class="dns-response-rt"></span>' + '</td>' +
                '<td>' + env.lang.dnsResponseDate + ': <span class="dns-response-date"></span>' + '</td>' +
                '</tr>' +
                '<tr class="dns-response-nsid-rd">' +
                '<td colspan = "3">' + env.lang.dnsResponseNsId + ': <span class="dns-response-nsid"></span></td>' +
                '</tr>' +
                '<tr class="dns-response-bottom">' +
                '<td colspan = "3"><span class="dns-response-plaintext"></span></td>' +
                '</tr>' +
            '</table>';

        this.hostBindResponse =
            '<table class="hostbind-response-table" border="1">' +
            '<tr class="hostbind-response-top">' +
            '<td>' + env.lang.hostBindResponsePrbId + ': <span class="hostbind-response-prbid"></span>' + '</td>' +
            '<td>' + env.lang.hostBindResponseRt + ': <span class="hostbind-response-rt"></span>' + '</td>' +
            '<td>' + env.lang.hostBindResponseDate + ': <span class="hostbind-response-date"></span>' + '</td>' +
            '</tr>' +
            '<tr class="hostbind-response-msmId-rd">' +
            '<td colspan = "3">' + env.lang.hostBindResponseMsmId + ': <span class="hostbind-response-msmId"></span></td>' +
            '</tr>' +
            '<tr class="hostbind-response-bottom">' +
            '<td colspan = "3"><span class="hostbind-response-plaintext"></span></td>' +
            '</tr>' +
            '</table>';

        this.tracerouteRensponse =
            '<div>' +
            '<div class="traceroute-title">' + env.lang.closestTracerouteLabel + '</div>' +
            '</div>';

        this.fullScreenThrobber = '<img class="full-screen-throbber" src="' + widgetUrl + 'view/img/full_screen_loader.gif"/>';

        this.filtersPopup =
            '<div>' +
                '<label>' + env.lang.filterSelectionTitle + '</label><br/>' +
                '<div class="filter-popup-item">' +
                  env.lang.excludeErrorsFilterLabel + '<input type="checkbox" class="exclude-errors" name="exclude-errors">' +
                '</div>' +

                '<div class="filter-popup-item">' +
                  '<span>' + env.lang.protocol3SelectionFilterLabel + ': ' +
                    '<select class="dnsmon-filter-3protocol">' +
                      '<option value="both">IPv4 and IPv6</option>' +
                      '<option value="4">IPv4 only</option>' +
                      '<option value="6">IPv6 only</option>' +
                    '</select>' +
                  '</span>' +
                '</div>' +

              '<div class="filter-popup-item">' +
              '<span>' + env.lang.protocol4SelectionFilterLabel + ': ' +
              '<select class="dnsmon-filter-4protocol">' +
                '<option value="udp">UDP</option>' +
                '<option value="tcp">TCP</option>' +
              '</select>' +
              '</span>' +
              '</div>' +

            '</div>';

        this.breadcrumbs = '<div class="stacked-title"></div>';

        this.overlayMessage = '<div class="dnsmon-message"></div>';


        /**
         * This method creates all the basic DOM elements needed to the widget
         *
         * @method createDom
         * @input {Object} parentDom A DOM element to be filled with the initial DOM of the widget
         * @input {Object} instanceParams A vector of initialisation parameter
         */

        this.createDom = function(parentDom, instanceParams){
            var containerDom, svgContainerDom, externalDom, timeMargins, timeOvervireContainerDom, bottomInfoSection;

            this.dom = {};

            /*
             * Set the DOM container
             */
            externalDom = $('<div></div>').addClass(config.domClasses.externalDom).css("border-width", config.style.externalBorderWidth);
            containerDom = $('<div></div>').addClass(config.domClasses.mainDom).css("margin", config.style.containerMargin);
            svgContainerDom = $('<div></div>').addClass(config.domClasses.svgContainerDom);
            timeOvervireContainerDom = $('<div></div>').addClass(config.domClasses.timeOvervireContainerDom);
            bottomInfoSection = $('<div>' + env.lang.bottomInfoSection + '</div>').addClass(config.domClasses.bottomInfoNoticeClass);
            timeMargins = $(this.timeMargins).css("top", config.style.controlPanelHeight);

            /*
             * Style the container
             */
            if (instanceParams.width < config.containerMinWidth){
                console.log("The minimum possible with is " + config.containerMinWidth);
                instanceParams.width = null;
            }

            externalDom.css("width", (instanceParams.width || config.containerWidthDefault) - (config.style.externalBorderWidth * 2));
            timeOvervireContainerDom.css("margin-left", config.labelWidth - config.timeOverviewMargins.left);

            containerDom.tooltip(
                {
                    tooltipClass: 'custom-jquery-ui-tooltip',
                    hide: {
                        effect: "fade",
                        duration: config.tooltipFade
                    }
                }
            );

            /*
             * Build DOM tree
             */
            containerDom.append(svgContainerDom);
            externalDom.append(containerDom);
            $(parentDom).append(externalDom);

            /*
             * Build DOM js vectors
             */
            env.mainDom = utils.encapsulateDom(containerDom);
            env.externalDom = utils.encapsulateDom(externalDom);

            this.dom.svgContainer = utils.encapsulateDom(svgContainerDom);

            env.mainDom.$.append(timeMargins);
            this.dom.timeMargins = utils.encapsulateDom(timeMargins);

            env.mainDom.$.append(timeOvervireContainerDom);
            this.dom.timeOverviewContainer = utils.encapsulateDom(timeOvervireContainerDom);

            env.mainDom.$.append(bottomInfoSection);
            this.dom.bottomInfoSection = utils.encapsulateDom(bottomInfoSection);

            this.dom.loadingImage = utils.encapsulateDom($(this.loadingImage));
            env.mainDom.$.append(this.dom.loadingImage.$);


            this.dom.message = utils.encapsulateDom($(this.overlayMessage));
            env.mainDom.$.append(this.dom.message.$);


            if (utils.getUrlParam("dnsmon_info") == "true" && window.atob){
                // - Christopher Amin (data-api), Massimo Candela (web tool), Andreas Strikos (deployment) - RIPE NCC
                bottomInfoSection.html("Version: " + env.version + window.atob("IC0gQ2hyaXN0b3BoZXIgQW1pbiAoZGF0YS1hcGkpLCBNYXNzaW1vIENhbmRlbGEgKHdlYiB0b29sKSwgQW5kcmVhcyBTdHJpa29zIChkZXBsb3ltZW50KSAtIFJJUEUgTkND"));
            }

        };

    };


    return TemplateManagerView;
});
/**
 * Created with JetBrains WebStorm.
 * User: mcandela
 * Date: 10/2/13
 * Time: 10:42 AM
 * To change this template use File | Settings | File Templates.
 */

define('view.time-overview',[
    "lib.d3" // Load d3 - put your path here
], function(d3){

    /**
     * TimeOverviewView is the view component providing the time overview bar.
     * It allows the user to easily interact with the TimeController.
     *
     * @class TimeOverviewView
     * @constructor
     * @module view
     */

    var TimeOverviewView = function(options, callbacks){
        var timeMapper, timeTicker, brusherBucketLevelsMinutes, timeGrid, margins, width, hideIfLessThanSeconds,
            height, brush, xAxis, svg, groupOverview, timeUnitGrid, $this, dom, labels, verticalLabels,
            format, innerWidth, innerHeight, endCallback, interactionCallback, changeCallback, initCallback,
            parent, borderMargin;

        $this = this;
        margins = options.margins;
        brusherBucketLevelsMinutes = options.granularityLevels;
        hideIfLessThanSeconds = options.hideIfLessThanSeconds;
        verticalLabels = (options.verticalLabels != null) ? options.verticalLabels : true;
        format = options.format || d3.time.format.utc("%Y-%m-%d");
        endCallback = callbacks.end;
        interactionCallback = callbacks.interaction;
        changeCallback = callbacks.change;
        initCallback = callbacks.init;
        width = options.width;
        height = options.height;

        borderMargin = 1;


        /**
         * This method initialises the time overview
         *
         * @method init
         * @input {Object} domElement A DOM element to be filled with the time overview representation
         * @input {Array} domainRange An array composed of two Date object and describing the actual domain
         * @input {Array} currentSelection An array composed of two Date object and describing the actual selection
         */

        this.init = function(domElement, domainRange, currentSelection){
            var points;

            parent = d3.select(domElement);
            dom = parent
                .append('div')
                .attr('class', 'time-overview-container');

            if (domainRange && currentSelection){
                this.render(domainRange, currentSelection);
                points = [xAxis(currentSelection[0]), xAxis(currentSelection[1])];
                initCallback.call(this, currentSelection[0], currentSelection[1], points);
            }
        };


        /**
         * This is a callback triggered after the interaction with the time overview
         *
         * @method _afterInteraction
         * @private
         */

        this._afterInteraction = function(){
            if (!d3.event.sourceEvent) return;
            var extent0, selectionPoints, boundedLeft, boundedRight, selectionPointsRounded, magneticEffect, points;

            extent0 = brush.extent();

            boundedLeft = false;
            boundedRight = false;
            magneticEffect = 10 * 60 * 60 * 1000;

            selectionPoints = extent0; // Normal selection
            selectionPointsRounded = extent0.map(timeUnitGrid.round); // Magnetic effect

            // If empty or reversed align it to the minimum unit possible
            if (selectionPointsRounded[0] >= selectionPointsRounded[1]) {
                selectionPointsRounded[0] = timeUnitGrid.floor(extent0[0]);
                selectionPointsRounded[1] = timeUnitGrid.ceil(extent0[1]);
            }

            if (selectionPoints[0].getTime() <= $this.domainRange[0].getTime() + magneticEffect){
                selectionPoints[0] = $this.domainRange[0];
                boundedLeft = true;
            }

            if (selectionPoints[1].getTime()  >= $this.domainRange[1].getTime() - magneticEffect){
                selectionPoints[1] = $this.domainRange[1];
                boundedRight = true;
            }

            if (boundedLeft && !boundedRight){
                selectionPoints[1] = selectionPointsRounded[1];
            }else if (!boundedLeft && boundedRight){
                selectionPoints[0] = selectionPointsRounded[0];
            }else if (!boundedLeft && !boundedRight){
                selectionPoints[0] = selectionPointsRounded[0];
                selectionPoints[1] = selectionPointsRounded[1];
            }

            // Apply magnetic feedback
            d3.select(this).transition()
                .call(brush.extent(selectionPoints));

            points = [xAxis(selectionPoints[0]), xAxis(selectionPoints[1])];

            endCallback.call(this, selectionPoints[0], selectionPoints[1], points);
        };


        /**
         * This is a callback triggered during the interaction with the time overview
         *
         * @method _duringInteraction
         * @private
         */

        this._duringInteraction = function(){
            if (!d3.event.sourceEvent) return;
            var extent0, selectionPoints, points;

            extent0 = brush.extent();

            selectionPoints = extent0;

            points = [xAxis(selectionPoints[0]), xAxis(selectionPoints[1])];
            interactionCallback.call(this, selectionPoints[0], selectionPoints[1], points);
        };


        /**
         * This method renders the time overview
         *
         * @method render
         * @input {Array} domainRange An array composed of two Date object and describing the actual domain
         * @input {Array} currentSelection An array composed of two Date object and describing the actual selection
         */

        this.render = function(domainRange, currentSelection){
            var timeWindow;

            this.domainRange = domainRange;
            this.currentSelection = currentSelection;

            timeWindow = domainRange[1] - domainRange[0];

            if (timeWindow < hideIfLessThanSeconds * 1000){
                return false;
            }

            if (timeWindow < (brusherBucketLevelsMinutes.day * 60 * 1000)){
                timeMapper = d3.time.day.utc;
                timeTicker = d3.time.days.utc;
                timeGrid = d3.time.hours.utc;
                timeUnitGrid = d3.time.hour.utc;
            }else if (timeWindow < (brusherBucketLevelsMinutes.week * 60 * 1000)){
                timeMapper = d3.time.week.utc;
                timeTicker = d3.time.weeks.utc;
                timeGrid = d3.time.days.utc;
                timeUnitGrid = d3.time.day.utc;
            }else if (timeWindow < (brusherBucketLevelsMinutes.month * 60 * 1000)){
                timeMapper = d3.time.month.utc;
                timeTicker = d3.time.months.utc;
                timeGrid = d3.time.weeks.utc;
                timeUnitGrid = d3.time.week.utc;
            }else{
                timeMapper = d3.time.year.utc;
                timeTicker = d3.time.years.utc;
                timeGrid = d3.time.months.utc;
                timeUnitGrid = d3.time.month.utc;
            }

            innerWidth = width - margins.left - margins.right - borderMargin;
            innerHeight = height - margins.top - margins.bottom;

            xAxis = d3
                .time
                .scale
                .utc()
                .domain(domainRange)
                .range([0, innerWidth]);

            brush = d3.svg.brush()
                .x(xAxis)
                .extent(currentSelection)
                .on("brush", $this._duringInteraction)
                .on("brushend", $this._afterInteraction);

            svg = dom
                .append("svg")
                .attr("class", "time-overview")
                .attr("width", width)
                .attr("height", height)
                .append("g")
                .attr("transform", "translate(" + margins.left + "," + margins.top + ")");

            svg.append("rect")
                .attr("class", "grid-background")
                .attr("width", innerWidth)
                .attr("height", innerHeight);

            svg.append("g")
                .attr("class", "x grid")
                .attr("transform", "translate(0," + innerHeight + ")")
                .call(d3.svg.axis()
                    .scale(xAxis)
                    .orient("bottom")
                    .ticks(timeGrid)
                    .tickSize(-innerHeight)
                    .tickFormat(""))
                .selectAll(".tick")
                .classed("minor", function(d) { return d.getHours(); });

            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + innerHeight + ")")
                .call(d3.svg.axis()
                    .scale(xAxis)
                    .orient("bottom")
                    .ticks(timeTicker)
                    .tickFormat(format)
                    .tickPadding(0))
                .selectAll("text")
                .attr("x", 6)
                .style("text-anchor", null);

            groupOverview = svg.append("g")
                .attr("class", "brush")
                .call(brush);

            groupOverview.selectAll("rect")
                .attr("height", innerHeight);

            labels = svg.selectAll("text")
                .style("text-anchor", "end");

            if (verticalLabels){
                labels
                    .attr("dx", "-1.2em")
                    .attr("dy", ".15em")
                    .attr('transform', 'rotate(-65)');
            }

            return true;
        };


        /**
         * This method updates the time overview. If the domainRange changes, a complete redraw is triggered.
         *
         * @method update
         * @input {Array} domainRange An array composed of two Date object and describing the actual domain
         * @input {Array} currentSelection An array composed of two Date object and describing the actual selection
         */

        this.update = function(domainRange, currentSelection){
            var points, out;

            if (this.domainRange[0] == domainRange[0] && this.domainRange[1] == domainRange[1]){
                return this.updateSelection(currentSelection);
            }else{
                dom
                    .select(".time-overview")
                    .remove();

                out = this.render(domainRange, currentSelection);
                points = [xAxis(currentSelection[0]), xAxis(currentSelection[1])];
                changeCallback.call(this, currentSelection[0], currentSelection[1], points);

                return out;
            }
        };



        /**
         * This method redraws the time overview imposing a different width
         *
         * @method width
         * @input {Number} newWidth The new width in pixels
         */

        this.width = function(newWidth){
            if (newWidth == null){
                return width;
            }else{
                if (width != newWidth && this.domainRange && this.currentSelection){

                    width = newWidth;
                    dom
                        .select(".time-overview")
                        .remove();

                    this.render(this.domainRange, this.currentSelection);
                }
            }
        };


        /**
         * This method updates the selection on the time overview
         *
         * @method updateSelection
         * @input {Array} currentSelection An array composed of two Date object and describing the actual selection
         */

        this.updateSelection = function(currentSelection){
            var points;

            if (this.currentSelection != currentSelection){
                groupOverview
                    .call(brush.extent(currentSelection));

                points = [xAxis(currentSelection[0]), xAxis(currentSelection[1])];
                changeCallback.call(this, currentSelection[0], currentSelection[1], points);

                return true;
            }
            return false;
        };
};

return TimeOverviewView;
});
/**
 * Created with JetBrains WebStorm.
 * User: mcandela
 * Date: 10/16/13
 * Time: 4:25 PM
 * To change this template use File | Settings | File Templates.
 */

define('view.svg.chart',[
    "env.utils",
    "env.config",
    "lib.jquery-libs-amd",
    "lib.d3"
], function(utils, config, $, d3){

    /**
     * SvgChartView is the view component representing the chart in SVG terms
     *
     * @class SvgChartView
     * @constructor
     * @module view.svg
     */

    var SvgChartView = function(container, margins, options) {
        var jqueryDom, $this, padding, lineFunction, duration, chartMaxHeight, chartMinHeight, cellsMinHeight,
            cellsMaxHeight, maxHeight, minHeight;

        $this = this;

        this.margin = margins;

        padding = options.trackerPadding;
        maxHeight = options.maxHeight;
        minHeight = options.minHeight;
        duration = options.animationDuration || 0;

        lineFunction = d3.svg.line()
            .x(function(d) { return d.x; })
            .y(function(d) { return d.y; })
            .interpolate("linear");

        this.width = function() {
            return container.width() - (this.margin.left + this.margin.right);
        };

        this.height = function() {
            return container.height() - (this.margin.top + this.margin.bottom);
        };

        chartMaxHeight = maxHeight;
        chartMinHeight = minHeight;

        cellsMinHeight = config.cellsMinHeight;
        cellsMaxHeight = config.cellsMaxHeight;

        this.computeBestHeight = function(numberOfRows){
            var totalCellsMinHeight, totalCellsMaxHeight, height, residualSpace;

            totalCellsMinHeight = numberOfRows * cellsMinHeight;
            totalCellsMaxHeight = numberOfRows * cellsMaxHeight;

            if (totalCellsMaxHeight <= chartMinHeight){
                height = chartMinHeight;
            }else if (totalCellsMaxHeight >= chartMaxHeight){
                height = chartMaxHeight;
            }else{
                residualSpace = (chartMaxHeight - totalCellsMaxHeight);
                height = Math.min(Math.max((Math.log(residualSpace) + totalCellsMinHeight), chartMinHeight), chartMaxHeight);
            }

            height = Math.min(height, chartMaxHeight);
            height = Math.max(height, chartMinHeight);

            return height;
        };

        this.chartSelectorVertical = container.svg
            .append("rect")
            .attr("class", config.domClasses.chartSelectorVertical)
            .attr("fill", config.style.chartBackground)
            .attr("x", margins.left)
            .attr("y", margins.top)
            .style("stroke", config.style.selectorRectColor)
            .style("shape-rendering", "crispEdges")
            .attr("height", $this.height());

        this.timeBoundaries = container.svg
            .append("path")
            .attr("class", "cone-time-boundaries");

        this.svg = container.svg
            .append("g")
            .attr("class", config.domClasses.chartDom)
            .attr("transform", "translate(" + margins.left + ", " + margins.top + ")");

        this.trackerBackground = this.svg
            .append("svg:rect")
            .attr("class", "selectionTracker")
            .attr("fill", config.style.chartBackground)
            .attr("opacity", 0)
            .attr("transform", "translate(-" + padding + ", -" + padding + ")")
            .attr("width", $this.width() + padding + padding)
            .attr("height", $this.height() + padding + padding);

        jqueryDom = $("." + config.domClasses.chartDom);

        this.dom = utils.encapsulateDom(jqueryDom);

        this.update = function(){
            this.svg
                .transition()
                .duration(duration)
                .attr("height", $this.height())
                .attr("width", $this.width());

            this.chartSelectorVertical
                .attr("height", $this.height());

            this.trackerBackground
                .attr("width", $this.width() + padding + padding)
                .attr("height", $this.height() + padding + padding);

        };

        this.updateBoundaries = function(points){
            this.timeBoundaries
                .attr("d", lineFunction([
                    {x: margins.left, y: $this.height() + margins.top},
                    {x: points[0] + margins.left, y: $this.height() + margins.top + margins.bottom},
                    {x: points[1] + margins.left, y: $this.height() + margins.top + margins.bottom},
                    {x: $this.width() + margins.left, y: $this.height() + margins.top}
                ]));
        };

        this.getCenter = function(){
            var center = {};

            center.x = this.width() / 2;
            center.y = this.height() / 2;

            return center;
        };

        container.updateList.push({update: this.update, context: this});
    };

    return SvgChartView;
});
/**
 * Created with JetBrains WebStorm.
 * User: mcandela
 * Date: 10/16/13
 * Time: 4:24 PM
 * To change this template use File | Settings | File Templates.
 */

define('view.svg.container',[
    "env.utils",
    "env.config",
    "lib.d3",
    "view.svg.chart"
], function(utils, config, d3, SvgChartView){

    /**
     * SvgContainerView is the view component representing the SVG container
     *
     * @class SvgContainerView
     * @constructor
     * @module view.svg
     */

    var SvgContainerView = function(parentDom, chartMargins, options){
        var node, svg, duration;

        node = d3.select(parentDom.plain);

        this.dom = parentDom;
        this.updateList = [];

        duration = options.animationDuration || 0;

        this.svg = node
            .append('svg')
            .attr("class", "dnsmon-svg");

        this.width = function(val) {
            if (val != null){
                parentDom.$.width(val);
                this.updateDimensions();
            }
            return parentDom.$.width();
        };

        this.height = function(val) {
            if (val != null){
                parentDom.$.height(val);
                this.updateDimensions();
            }

            return parentDom.$.height();
        };

        this.updateDimensions = function(){
            var updateFuncElement;

            this.svg
                .transition()
                .duration(duration)
                .attr("width", parentDom.$.width())
                .attr("height", parentDom.$.height())
                .style("width", parentDom.$.width())
                .style("height", parentDom.$.height());

            for (var n=0, length=this.updateList.length; n<length; n++){
                updateFuncElement = this.updateList[n];
                updateFuncElement.update.call(updateFuncElement.context);
            }
        };


        /*
         * Draw chart
         */

        this.chart = new SvgChartView(this, chartMargins, options);
        this.chart.hidden = false;

    };

    return SvgContainerView;
});
/**
 * Created by mcandela on 19/11/13.
 */
define('view.pop-up',[
    "lib.d3",
    "env.utils"
], function(d3, utils){

    /**
     * PopUpView is the view component for the cell's pop-up function
     *
     * @class PopUpView
     * @constructor
     * @module view
     */

    var PopUpView = function(env){
        var config;

        config = env.config;


        /**
         * This method hides the pop-up describing a cell
         *
         * @method hide
         */

        this.hide = function(){
            clearTimeout(this._popupDelayTimer);

            if (this.svgBalloon){
                this.svgBalloon.group
                    .remove();

                this.svgBalloon = null;
            }
        };


        /**
         * This method shows the pop-up describing a cell
         *
         * @method show
         * @input {Object} cell A cell
         * @input {Object} mouseCoords The coordinates of the mouse cursor
         */

        this.show = function(cell, mouseCoords){
            if (env.timeEventsActive){
                var $this, container, chart;
                $this = this;

                clearTimeout(this._popupDelayTimer);

                if (!container){
                    container = env.container;
                    chart = container.chart;
                }

                this._popupDelayTimer = setTimeout(function(){
                        var balloonWidth, balloonHeight, svgBallonLeft, svgBallonRight, cursorOffset, arrowPoint,
                            chartCenter, translationVector, arrowTop, absTranslationVector, balloonArray, lineFunction,
                            cursorOffsetUnit, roundingFactor, balloonCellPosition, cellText, fontCharWidth, fontCharHeight,
                            defaultYTranslation;

                        fontCharWidth = 7; // Pixels
                        fontCharHeight = 20; // Pixels
                        defaultYTranslation = chart.margin.top + 20; // Pixels


                        if (env.timeEventsActive){
                            chartCenter = chart.getCenter();

                            cellText = cell.toArrayString();

                            balloonWidth = utils.getLongestString(cellText) * fontCharWidth;
                            balloonHeight = cellText.length * fontCharHeight;

                            chartCenter.y = Math.max(balloonHeight + defaultYTranslation, chartCenter.y); // This line avoids the pop-up to overflow the chart top margin

                            cursorOffsetUnit = 3;

                            absTranslationVector = {x: balloonWidth/4, y: balloonHeight/4};
                            translationVector = {x: 0, y: 0};

                            arrowTop = false;

                            svgBallonLeft = [];
                            svgBallonRight = [];

                            roundingFactor = 3;

                            //Balloon points

                            // ---Left
                            svgBallonLeft.push({x: balloonWidth/4, y: 0});

                            svgBallonLeft.push({x: roundingFactor, y: 0}); //Rounded
                            svgBallonLeft.push({x: 0, y: roundingFactor}); //Rounded

                            svgBallonLeft.push({x: 0, y: balloonHeight - roundingFactor}); //Rounded
                            svgBallonLeft.push({x: roundingFactor, y: balloonHeight}); //Rounded

                            svgBallonLeft.push({x: balloonWidth/4, y: balloonHeight});


                            // ---Right
                            svgBallonRight.push({x: (balloonWidth/4)*3, y: balloonHeight});

                            svgBallonRight.push({x: balloonWidth - roundingFactor, y: balloonHeight}); //Rounded
                            svgBallonRight.push({x: balloonWidth, y: balloonHeight - roundingFactor}); //Rounded

                            svgBallonRight.push({x: balloonWidth, y: roundingFactor}); //Rounded
                            svgBallonRight.push({x: balloonWidth - roundingFactor, y: 0}); //Rounded

                            svgBallonRight.push({x: (balloonWidth/4)*3, y: 0});

                            if (mouseCoords.x > chartCenter.x && mouseCoords.y < chartCenter.y){ //First quadrant
                                arrowTop = true;
                                cursorOffset = {x: -cursorOffsetUnit, y: cursorOffsetUnit}; //To avoid overlaps with the mouse cursor
                                translationVector.x = mouseCoords.x - (absTranslationVector.x + balloonWidth);
                                translationVector.y = mouseCoords.y + absTranslationVector.y;

                            }else if (mouseCoords.x < chartCenter.x && mouseCoords.y < chartCenter.y){ //Second quadrant
                                arrowTop = true;
                                cursorOffset = {x: cursorOffsetUnit, y: cursorOffsetUnit}; //To avoid overlaps with the mouse cursor
                                translationVector.x = mouseCoords.x + absTranslationVector.x;
                                translationVector.y = mouseCoords.y + absTranslationVector.y;

                            }else if (mouseCoords.x < chartCenter.x && mouseCoords.y > chartCenter.y){ //Third quadrant
                                arrowTop = false;
                                cursorOffset = {x: cursorOffsetUnit, y: -cursorOffsetUnit}; //To avoid overlaps with the mouse cursor
                                translationVector.x = mouseCoords.x + absTranslationVector.x;
                                translationVector.y = mouseCoords.y - (absTranslationVector.y + balloonHeight);

                            }else{ //Fourth quadrant
                                arrowTop = false;
                                cursorOffset = {x: -cursorOffsetUnit, y: -cursorOffsetUnit}; //To avoid overlaps with the mouse cursor
                                translationVector.x = mouseCoords.x - (absTranslationVector.x + balloonWidth);
                                translationVector.y = mouseCoords.y - (absTranslationVector.y + balloonHeight);

                            }

                            svgBallonLeft = utils.translate(svgBallonLeft, translationVector);
                            svgBallonRight = utils.translate(svgBallonRight, translationVector);

                            arrowPoint = {x: mouseCoords.x + cursorOffset.x , y: mouseCoords.y + cursorOffset.y};

                            //Add the arrow
                            if (arrowTop == false){
                                svgBallonLeft.push(arrowPoint);
                                balloonArray = svgBallonLeft.concat(svgBallonRight);
                            }else{
                                svgBallonRight.push(arrowPoint);
                                balloonArray = svgBallonRight.concat(svgBallonLeft);
                            }

                            lineFunction = d3.svg.line()
                                .x(function(d) { return d.x; })
                                .y(function(d) { return d.y; })
                                .interpolate("linear-closed");


                            if (!$this.svgBalloon){

                                $this.svgBalloon = {};

                                $this.svgBalloon.group = container.svg
                                    .append('g');

                                $this.svgBalloon.cloud = $this.svgBalloon.group
                                    .append("path")
                                    .attr("class", "svg-balloon");

                                $this.svgBalloon.cell = $this.svgBalloon.group
                                    .append("rect")
                                    .attr("class", "balloon-rect");

                                $this.svgBalloon.text = $this.svgBalloon.group
                                    .append('g');
                            }

                            $this.svgBalloon.cloud
                                .attr("d", lineFunction(balloonArray))
                                .attr("stroke", "#757575")
                                .attr("stroke-width", 2)
                                .attr("opacity", 0.8)
                                .attr("fill", "white");

                            balloonCellPosition = utils.translate([{x: 0, y: 0}], translationVector)[0];

                            $this.svgBalloon.cell
                                .attr("width", balloonWidth - 10)
                                .attr("height", balloonHeight - 10)
                                .attr("rx", 3)
                                .attr("ry", 3)
                                .attr("x", balloonCellPosition.x + 5)
                                .attr("y", balloonCellPosition.y + 5)
                                .attr("fill", function(){
                                    return env.mainView.getCellColor(cell);
                                });

                            utils.writeSvgText($this.svgBalloon.text, cellText, balloonCellPosition, {left: 10, top: 20});
                        }
                    },
                    config.popupDelay);

            }
        };
    };
    return PopUpView;
});
/**
 * Created by mcandela on 28/11/13.
 */

define('view.breadcrumbs',[
    "env.utils",
    "lib.jquery-libs-amd",
    "env.params-manager"
], function(utils, $, paramsManager){

    /**
     * BreadcrumbsView is the view component for the breadcrumbs function
     *
     * @class BreadcrumbsView
     * @constructor
     * @module view
     */

    var BreadcrumbsView = function(env){
        var levelsIndex, dom, stateStack, config;

        config = env.config;
        levelsIndex = [];
        stateStack = {};

        dom = $(env.mainView.templateManager.breadcrumbs);

        env.mainDom.$.append(dom);

        dom.css("margin-left", config.labelWidth + "px");


        /**
         * This method updates the html representing the breadcrumbs
         *
         * @method update
         */

        this.update = function(){
            var domElement, $this, item, positionIndex;

            $this = this;
            domElement = $(this._getTitle());

            domElement
                .off("click")
                .on("click", function(){

                    item = $(this).text();

                    env.params = utils.lightClone(stateStack[item]); // Rebuild the status

                    positionIndex = utils.indexOf(item, levelsIndex);
                    if (positionIndex != levelsIndex.length){
                        levelsIndex = levelsIndex.slice(0, $.inArray(item, levelsIndex) + 1);

                        $this.update();
                    }
                    env.mainView.redraw();
                });

            dom.html(domElement);
        };


        /**
         * This method removes the last entry of the breadcrumbs
         *
         * @method removeLastLevel
         */

        this.removeLastLevel = function(){
            var index;

            if (levelsIndex.length > 0){
                index = levelsIndex.pop();
                delete stateStack[index];

                this.update();
            }
        };


        /**
         * This method removes all the entries of the breadcrumbs
         *
         * @method resetLevels
         */

        this.resetLevels = function(){
            levelsIndex = [];
            stateStack = {};

            dom.children().off('click');
            this.update();
        };


        /**
         * This method initialises the breadcrumbs
         *
         * @method init
         */

        this.init = function(){
            if (env.initialHistory){
                this.pushHistory(env.initialHistory);
            }else{
                this.addLevel(env.connector.getGroup().label);
            }
        };


        /**
         * This method pushes a new entry in the breadcrumbs based on the actual query parameters
         *
         * @method addLevel
         * @input {String} levelString A string describing the new state
         */

        this.addLevel = function(levelString){

            this._addLevelWithParams(levelString, env.params);
        };


        /**
         * This method pushes a new entries and a vector of query parameters fot that entry
         *
         * @method _addLevelWithParams
         * @private
         * @input {String} levelString A string describing the new state
         * @input {Object} levelString A vector of query parameters
         */

        this._addLevelWithParams = function(levelString, params){
            var label;

            label = this._getLabelPrefix(params.type);
            levelString = label + levelString;

            if (utils.indexOf(levelString, levelsIndex) == -1){
                levelsIndex.push(levelString);


                stateStack[levelString] = utils.lightClone(params);
                this.update();
            }
        };


        /**
         * This method returns the actual html representation for the breadcrumbs
         *
         * @method _getTitle
         * @private
         * @return {Array} A set of DOM elements
         */

        this._getTitle = function(){
            var domElements, index;

            domElements = [];

            for (var n=0,length=levelsIndex.length; n<length; n++){
                index = levelsIndex[n];
                domElements.push('<span class="stacked-title-item">' + index + '</span>');
            }

            return utils.join(domElements, "&nbsp;&gt;&nbsp;");
        };


        /**
         * This method imposes a set of items based on a given history object
         *
         * @method pushHistory
         * @input {Object} history A history object
         */

        this.pushHistory = function(history){
            var historicParams, historicParamItem, group, entryId;

            this.resetLevels();

            for (var n=0,length=history.length; n<length; n++){
                historicParamItem = history[n];
                historicParams = paramsManager.mergeParams(utils.lightClone(env.params), historicParamItem.params);

                group = env.connector.getGroup();

                entryId = (group && group.id == historicParamItem.id) ? group.label : historicParamItem.id; // To be improved

                this._addLevelWithParams(paramsManager.convertLocalToRemoteId(entryId), historicParams);
            }
        };


        /**
         * This method returns the introducing label of an entry based on its type
         *
         * @method _getLabelPrefix
         * @private
         * @input {String} type An entry type
         * @return {String} A label
         */

        this._getLabelPrefix = function(type){
            var label;

            switch(type){

                case "servers":
                    label = env.lang.zoneLevelLabel;
                    break;

                case "probes":
                    label = env.lang.serverLevelLabel;
                    break;

                case "instance":
                    label = ''; // For now
                    break;
            }

            return label + ': ';
        }

    };

    return BreadcrumbsView;
});
/**
 * Created by mcandela on 19/11/13.
 */
define('view.full-screen',[
    "env.utils",
    "lib.jquery-libs-amd"
], function(utils, $){

    /**
     * FullScreenView is the view component for the full screen feature
     *
     * @class FullScreenView
     * @constructor
     * @module view
     */

    var FullScreenView = function(env){

        var oldDimensions, oldDomDimensions, oldBackground, config, templateManager, margin, body, fullScreenThrobber,
            timeOverviewContainer, oldTimeOverviewDimensions, openTimeOverviewImage, $this, isTimeOverviewOpened,
            windowWidth, windowHeight;

        $this = this;
        config = env.config;
        templateManager = env.mainView.templateManager;
        body = $('body');
        margin = config.style.fullScreenMargin;
        fullScreenThrobber = $(templateManager.fullScreenThrobber);
        timeOverviewContainer = templateManager.dom.timeOverviewContainer;
        openTimeOverviewImage = $(templateManager.openTimeOverviewImage);
        isTimeOverviewOpened = config.timeOverviewOpenedByDefaultInFullScreen;

        /**
         * This method manages the full screen mode
         *
         * @method fullScreenMode
         * @input {Boolean} fullScreen If true the full screen will be enabled
         */

        this.fullScreenMode = function(fullScreen){
            if (fullScreen){
                this._openFullScreen();
            }else{
                this._closeFullScreen();
            }
        };


        /**
         * This method shows the time overview
         *
         * @method openTimeOverviewPanel
         */

        this.openTimeOverviewPanel = function(){
            timeOverviewContainer.$.css({"position": "relative"}).animate({"height": oldTimeOverviewDimensions.height}, 800);

            env.mainView.defaultDimensions.height = windowHeight;
            env.container.height(env.mainView.defaultDimensions.height);
            env.mainView.redraw(function(){
                env.container.chart.timeBoundaries.style("visibility", "visible");
            }, this);

            openTimeOverviewImage
                .css("opacity", 0.8);
        };


        /**
         * This method hides the time overview
         *
         * @method closeTimeOverviewPanel
         */

        this.closeTimeOverviewPanel = function(){
            timeOverviewContainer.$.animate({"height": "0"}, 800);


            env.mainView.defaultDimensions.height = windowHeight + config.style.timeOverviewHeight;
            env.container.height(env.mainView.defaultDimensions.height);
            env.mainView.redraw();

            env.mainDom.$
                .append(openTimeOverviewImage);

            env.container.chart.timeBoundaries.style("visibility", "hidden");

            openTimeOverviewImage
                .css("opacity", 1)
                .off("click")
                .on("click", function(){

                    if (isTimeOverviewOpened){
                        $this.closeTimeOverviewPanel();
                    }else{
                        $this.openTimeOverviewPanel();
                    }
                    isTimeOverviewOpened = !isTimeOverviewOpened;
                });
        };


        /**
         * This method starts the full screen mode
         *
         * @method _openFullScreen
         * @private
         */

        this._openFullScreen = function(){
            oldDimensions = {width: env.container.width(), height: env.container.height()};
            oldTimeOverviewDimensions = {width: timeOverviewContainer.$.width(), height: timeOverviewContainer.$.height()};
            oldDomDimensions = {width: env.externalDom.$.width(), height: env.externalDom.$.height()};

            oldBackground = body.css("background");

            windowWidth = $(window).width() - margin;
            windowHeight = $(window).height() - margin;

            env.mainView.templateManager.dom.bottomInfoSection.$.hide();

            env.mainView.defaultDimensions.height = windowHeight;
            env.container.width(windowWidth);

            body.css({
                "visibility": "hidden", // Hide the rest of the page
                "background": config.style.fullScreenBackground
            }).append(fullScreenThrobber);

            timeOverviewContainer.$.addClass("floating-panel");

            env.externalDom.$.css({
                width: "auto",
                visibility: "visible",
                position: "fixed",
                opacity: 0,
                "z-index": config.style.fullScreenZIndex,
                top: "0",
                left: "0"
            });

            env.mainView.redraw(function(){
                env.externalDom.$.animate({"opacity": "1"}, 400);
                fullScreenThrobber.remove();
                if (!isTimeOverviewOpened){
                    $this.closeTimeOverviewPanel();
                }
            }, this);
        };


        /**
         * This method closes the full screen mode
         *
         * @method _closeFullScreen
         * @private
         */

        this._closeFullScreen = function(){

            isTimeOverviewOpened = config.timeOverviewOpenedByDefaultInFullScreen;
            body.css({
                "visibility":  "visible",
                "background": oldBackground
            });

            env.container.chart.timeBoundaries.style("visibility", "visible");
            timeOverviewContainer.$.removeClass("floating-panel").css("height", oldTimeOverviewDimensions.height);

            env.mainView.defaultDimensions = oldDomDimensions;
            env.container.width(oldDimensions.width);

            env.mainView.templateManager.dom.bottomInfoSection.$.show();

            env.externalDom.$.css({
                position: "relative",
                visibility: "visible",
                opacity: 0,
                width: oldDomDimensions.width
            });

            env.mainView.redraw(function(){
                env.externalDom.$.animate({"opacity": "1"}, 400);
                openTimeOverviewImage.remove();
            }, this);
        };


    };

    return FullScreenView;
});
/**
 * Created by mcandela on 20/11/13.
 */

define('view.control-panel',[
    "env.utils",
    "lib.jquery-libs-amd",
    "env.params-manager",
    "view.full-screen"
    //"lib.jquery-ui.timepicker"
], function(utils, $, paramsManager, FullScreenView){

    /**
     * ControlPanelView is the view component managing the representation of the control panel
     *
     * @class ControlPanelView
     * @constructor
     * @module view
     */

    var ControlPanelView = function(env){
        var container, chart, thresholdsPopup, legendColors, legendPercentages, legendUnit, config, lang, templateManager,
            disabledOpacity, normalOpacity, filtersPopup, extraDataPopup, dnsResponseDom, tracerouteDom, lazyLoadTab2,
            autoUpdateButton, slidingMenu, insideSubMenu, slidingMenuOpened, fullScreenButton, hostBindResponseDom,
            lazyLoadTab3, lazyLoadTab1;

        config = env.config;
        lang = env.lang;
        container = env.container;
        chart = container.chart;
        templateManager = env.mainView.templateManager;

        disabledOpacity = config.style.disabledControllerOpacity;
        normalOpacity = config.style.normalControllerOpacity;
        this.dom = $(templateManager.controlPanel);


        /**
         * This method updates the width of this view
         *
         * @method updateWidth
         */

        this.updateWidth = function(){
            var margin;

            margin = 6;
            this.dom.css("width", env.container.chart.width() - margin + "px");
        };


        /**
         * This method renders this view
         *
         * @method render
         * @input {Object} parentDom The parent DOM where this view should be drawn
         */

        this.render = function(parentDom){
            var $this, datepickers;

            $this = this;
            parentDom.$.prepend($this.dom);
            this.dom.css("margin-left", config.labelWidth);

            this.fullScreenView = new FullScreenView(env);

            datepickers = $(templateManager.timepickersPopup);
            filtersPopup = $(templateManager.filtersPopup);
            thresholdsPopup = $(templateManager.thresholdsPopup);
            extraDataPopup = $(templateManager.extraDataPopup);
            dnsResponseDom = $(templateManager.dnsResponse);
            hostBindResponseDom = $(templateManager.hostBindResponse);
            tracerouteDom = $(templateManager.tracerouteRensponse);
            slidingMenu = $(templateManager.slidingMenu);

            autoUpdateButton = this.dom.find(".keep-updated");
            fullScreenButton = this.dom.find(".full-screen");

            this.dialogPopUp = this.dom.find(".dnsmon-popup");

            this.legend = this.dom.find(".legend");
            this.aggregationLevelLegend = this.dom.find(".legend-agr-level");

            this.updatePeriodically = {
                "dom": autoUpdateButton,
                "icon": autoUpdateButton.find("img")
            };

            this.fullScreenButton = {
                "dom": fullScreenButton,
                "icon": fullScreenButton.find("img")
            };

            this.aggregationLevelLegend.html(lang.aggregationLevelLabel + env.aggregationLabel);

            this.viewSelect = this.dom.find(".legend-controller-select");



            this.thresholdsPopup = {
                "dom": thresholdsPopup,
                "slider": thresholdsPopup.find(".thresholds-slider"),
                "legendPercentages": thresholdsPopup.find(".pls-percentage"),
                "legendUnit": thresholdsPopup.find(".pls-unit"),
                "legendColors": thresholdsPopup.find(".pls-color"),
                "description": thresholdsPopup.find(".popup-pls-text"),
                "messageApply": thresholdsPopup.find(".popup-pls-apply")
            };

            this.extraDataPopup = {
                "dom": extraDataPopup,
                "rawUrl": extraDataPopup.find(".popup-raw-data"),
                "overviewRawUrl": extraDataPopup.find(".popup-overview-raw-data"),
                "dnsResponse": extraDataPopup.find(".popup-dns-response"),
                "hostBindResponse": extraDataPopup.find(".popup-hostnamebind-response"),
                "traceroutePlace":extraDataPopup.find(".popup-traceroute"),

                "dnsResponseDom": dnsResponseDom,
                "hostBindResponseDom": hostBindResponseDom,
                "tracerouteDom": tracerouteDom
            };

            this.filtersPopup = {
                "dom": filtersPopup,
                "excludeErrorsCheck": filtersPopup.find(".exclude-errors"),
                "filter3Protocol": filtersPopup.find(".dnsmon-filter-3protocol"),
                "filter4Protocol": filtersPopup.find(".dnsmon-filter-4protocol")
            };

            this.datepickers = {
                "dom": datepickers
            };

            legendColors = $this.legend.find(".pls-color");
            legendUnit = $this.legend.find(".pls-unit");
            legendPercentages = $this.legend.find(".pls-percentage");

            legendColors.last().css("background-color", env.mainView.color(env.mainView.colorDomainBreakPoints[0]));
            legendColors.first().css("background-color", env.mainView.color(env.mainView.colorDomainBreakPoints[1] + config.colorSeparationOffset)); // Greater than

            this.thresholdsPopup.legendPercentages.last().val(env.mainView.colorDomainBreakPoints[0]);
            this.thresholdsPopup.legendPercentages.first().val(env.mainView.colorDomainBreakPoints[1]);

            this.thresholdsPopup.legendColors.last().css("background-color", env.mainView.color(env.mainView.colorDomainBreakPoints[0]));
            this.thresholdsPopup.legendColors.first().css("background-color", env.mainView.color(env.mainView.colorDomainBreakPoints[1] + config.colorSeparationOffset)); // Greater than


            this.dialogPopUp.dialog({
                resizable: false,
                modal: true,
                hide: 200,
                autoOpen: false,
                show: 100,
                open: function(){
                    $('.ui-dialog').addClass('default-text');
                },
                close: function(){
                    $('.ui-dialog').removeClass('default-text');
                }
            });

            this.initButtonEventHandlers();
        };


        /**
         * This method creates sliding menus
         *
         * @method bindSlidingMenu
         * @input {Object} callerButton The DOM element where to attach the sliding menu
         * @input {Object} menuItemsHtml The DOM to draw inside the sliding menu
         * @input {Number} height The height of the menu
         * @input {String} cssClass The class to be applied to the sliding menu
         * @input {Function} callback The callback to be called on click
         */

        this.bindSlidingMenu = function(callerButton, menuItemsHtml, height, cssClass, callback){
            var timerHide;

            if (insideSubMenu == null){
                env.mainDom.$.append(slidingMenu); // Append the sub menu dom
                slidingMenuOpened = false;
                insideSubMenu = false;

                slidingMenu
                    .on("mouseenter", function(){
                        insideSubMenu = true;
                    })
                    .on("mouseleave", function(evt){
                        insideSubMenu = false;
                        if ($(evt.target).attr('class') == slidingMenu.attr('class')){
                            hideSubMenu();
                        }
                    });
            }

            function hideSubMenu(){
                if (insideSubMenu == false){
                    slidingMenu
                        .removeClass(cssClass)
                        .off("click")
                        .hide()
                        .css({
                            height: "0"
                        });
                    slidingMenuOpened = false;
                    env.mainDom.$.tooltip("enable");
                }
            }

            callerButton
                .on("mouseenter",
                function(){
                    if (slidingMenuOpened == false){
                        clearTimeout(timerHide);
                        slidingMenuOpened = true;
                        slidingMenu.html(menuItemsHtml);

                        slidingMenu
                            .on("click", callback)
                            .addClass(cssClass)
                            .css({
                                left: callerButton.position().left,
                                top: callerButton.position().top + 20
                            })
                            .show()
                            .animate({
                                height: height
                            }, 300);

                        env.mainDom.$.tooltip("disable");
                    }
                })
                .on("mouseleave", function(){
                    clearTimeout(timerHide);
                    timerHide = setTimeout(hideSubMenu, 1000);
                });


        };


        /**
         * This method populates the view selectbox with all the options
         *
         * @method loadPossibleView
         */

        this.loadPossibleView = function(){
            var queryType;
            queryType = env.params.type;

            this.removeAllViews();

            switch(queryType){
                case "probes":
                    this.addPossibleView(lang.packetLossLabel, "pls");
                    this.addPossibleView(lang.responseTimeLabel, "rtt");
                    this.addPossibleView(lang.relativeResponseTimeLabel, "relative-rtt");
                    break;

                case "servers":
                    this.addPossibleView(lang.packetLossLabel, "pls");
                    this.addPossibleView(lang.responseTimeLabel, "rtt");
                    this.addPossibleView(lang.relativeResponseTimeLabel, "relative-rtt");
                    break;

                case "instances":
                    this.addPossibleView(lang.numberProbesLabel, "prb");
                    this.addPossibleView(lang.responseTimeLabel, "rtt");
                    this.addPossibleView(lang.relativeResponseTimeLabel, "relative-rtt");
                    break;
            }
        };


        /**
         * This method manages the auto-update function. It is an indirection for keepUpdated in MainView but it manages
         * the menu and the feedback for the user
         *
         * @method keepUpdatedActive
         * @input {Boolean} active If true the auto-update function will be activated
         */

        this.keepUpdatedActive = function(active){
            if(env.isOngoing){ // Is the measurement ongoing?
                if (!active){
                    env.mainView.showMessage(lang.keepUpdatedNotActive);
                    this.updatePeriodically.icon.attr("src", env.widgetUrl + 'view/img/keep_updated_icon.png');
                }else{
                    env.mainView.showMessage(lang.keepUpdatedActive);
                    this.updatePeriodically.icon.attr("src", env.widgetUrl + 'view/img/keep_updated_icon_move2.png');
                }

                env.isUpdatedPeriodicallyActive = active;
                env.mainView.timeController.keepUpdated(active);
            }
        };


        /**
         * This method manages all the auto-start functions
         *
         * @method _initAutoStartFunctions
         * @private
         */

        this._initAutoStartFunctions = function(){
            var $this;

            $this = this;

            env.mainView.on("load", function(){

                if (env.isUpdatedPeriodicallyActive){
                    $this.keepUpdatedActive(true); // Start the auto-update function
                }

                if (env.fullScreenActive){
                    $this.fullScreenView.fullScreenMode(true); // Start the full-screen
                }

            });
        };


        /**
         * This method creates all the listeners for the controllers
         *
         * @method initButtonEventHandlers
         */

        this.initButtonEventHandlers = function(){
            var timeController, manualZoomFactor, $this;

            timeController = env.mainView.timeController;
            manualZoomFactor = config.manualZoomFactor;
            $this = this;

            this._initAutoStartFunctions();

            this.updatePeriodicallyButton = this.updatePeriodically.dom
                .attr("title", lang.keepUpdatedTitle)
                .css("opacity", disabledOpacity)
                .on("click", function(){
                    env.isUpdatedPeriodicallyActive = !env.isUpdatedPeriodicallyActive;
                    $this.keepUpdatedActive(env.isUpdatedPeriodicallyActive);
                });


            this.zoomInButton = this.dom
                .find(".zoom-in")
                .attr("title", lang.zoomInTitle)
                .on("click", function(){
                    if (env.isZoomableIn){
                        timeController.zoomIn.call(timeController, manualZoomFactor);
                    }
                });

            this.zoomOutButton = this.dom
                .find(".zoom-out")
                .attr("title", lang.zoomOutTitle)
                .on("click", function(){
                    if (env.isZoomableOut){
                        timeController.zoomOut.call(timeController, manualZoomFactor);
                    }
                });

            this.leftButton = this.dom
                .find(".left")
                .attr("title", lang.shiftLeftTitle)
                .on("click", function(){
                    if (env.isTranslableLeft){
                        timeController.shiftLeft.call(timeController);
                    }
                });

            this.rightButton = this.dom
                .find(".right")
                .attr("title", lang.shiftRightTitle)
                .on("click", function(){
                    if (env.isTranslableRight){
                        timeController.shiftRight.call(timeController);
                    }
                });

            this.fullScreenButton.dom
                .attr("title", lang.fullScreenTitle)
                .on("click", function(){
                    env.fullScreenActive = !env.fullScreenActive; // Toggle full screen
                    $this.setFullScreen(env.fullScreenActive);
                });

            this.forwardButton = this.dom
                .find(".forward")
                .attr("title", lang.forwardTitle)
                .on("click", function(){
                    timeController.getNewData.call(timeController, null);
                });

            this.bindSlidingMenu(this.forwardButton, $(templateManager.getLastData), 90, 'get-last-data-sliding-panel', function(evt){
                var value;

                value = paramsManager.convertRemoteToLocalTimeWindow($(evt.target).text());

                timeController.getNewData.call(timeController, value);
            });


            this.datepickerButton = this.dom
                .find(".timepicker")
                .attr("title", lang.changeTimeWindowTitle)
                .on("click", function(){

                    $this.dialogPopUp.html($this.datepickers.dom);
                    $this.dialogPopUp.dialog("open");

                    $this.datepickers.start = $this.dialogPopUp.find(".timepicker-start");
                    $this.datepickers.stop = $this.dialogPopUp.find(".timepicker-stop");

                    $this.datepickers.start.datetimepicker({
                        minDate: utils.localDateToUTCDate(env.measurementStartTime),
                        maxDate: utils.localDateToUTCDate(env.measurementEndTime),
                        dateFormat: "yy-mm-dd",
                        beforeShow: function(){
                            $('#ui-datepicker-div').addClass('default-text');
                        },
                        onClose: function(){
                            $('#ui-datepicker-div').removeClass('default-text');
                        }
                    });

                    $this.datepickers.stop.datetimepicker({
                        minDate: utils.localDateToUTCDate(env.measurementStartTime),
                        maxDate: utils.localDateToUTCDate(env.measurementEndTime),
                        dateFormat: "yy-mm-dd",
                        beforeShow: function(){
                            $('#ui-datepicker-div').addClass('default-text');
                        },
                        onClose: function(){
                            $('#ui-datepicker-div').removeClass('default-text');
                        }
                    });

                    $this.datepickers.start.datepicker("setDate", utils.localDateToUTCDate(env.params.startDate));
                    $this.datepickers.stop.datepicker("setDate", utils.localDateToUTCDate(env.params.endDate));


                    $this.dialogPopUp.dialog({
                        title: lang.changeTimeWindowTitle,
                        width: 380,
                        height: 140,
                        buttons: {
                            "Cancel": function() {
                                $(this).dialog("close");
                            },

                            "Apply": function() {
                                env.params.startDate = utils.UTCDateToLocalDate($this.datepickers.start.datetimepicker('getDate'));
                                env.params.endDate = utils.UTCDateToLocalDate($this.datepickers.stop.datetimepicker('getDate'));
                                env.mainView.updateXDomain(true);
                                $(this).dialog("close");
                            }
                        },
                        beforeClose: function() {
                            $this.datepickers.start.datepicker("destroy");
                            $this.datepickers.stop.datepicker("destroy");
                        }
                    });

                });

            this.thresholdsButton = this.dom
                .find(".thresholds,.legend-pls") // Both button and legend are clickable STAT-511
                .attr("title", lang.changeColorsRangeTitle)
                .on("click", function(){
                    var thresholdsRanges;

                    $this.dialogPopUp.dialog("open");

                    thresholdsRanges = $this._getThresholdsRanges();
                    $this.dialogPopUp.html($this.thresholdsPopup.dom);

                    $this.dialogPopUp.dialog({
                        title: lang.changeColorsRangeTitle,
                        width: 460,
                        height: 220,
                        buttons: {

                            "Default": function(){
                                var newColorScale, showFilter;

                                showFilter = env.showFilter;

                                newColorScale = utils.computeColorScale(config.normalColorScales[showFilter]);
                                env.mainView.updateOnlyColors(newColorScale.valueRange);
                                $this.updateLegend(newColorScale.valueRange[2], newColorScale.valueRange[3]);
                                env.history.update();
                                $(this).dialog("close");
                            },

                            "Close": function() {
                                $(this).dialog("close");
                            }
                        }
                    });

                    $this.thresholdsPopup.description.html(lang.thresholdsDescritions[env.showFilter]);

                    $this.thresholdsPopup.slider.show();
                    $this.thresholdsPopup.messageApply.hide();

                    $this.thresholdsPopup
                        .slider
                        .slider({
                            range: true,
                            min: thresholdsRanges[0],
                            max: thresholdsRanges[1],
                            values: env.mainView.colorDomainBreakPoints,
                            stop: function(){
                                env.history.update();
                            },
                            slide: function(event, ui) {
                                var newValuesRange;

                                $this.updateLegend(ui.values[0], ui.values[1]);

                                newValuesRange = [
                                    thresholdsRanges[0],
                                    ui.values[0],
                                    ui.values[0],
                                    ui.values[1],
                                    thresholdsRanges[1]
                                ];
                                env.mainView.updateOnlyColors(newValuesRange);
                            }
                        });

                    $this.thresholdsPopup.legendPercentages
                        .off('keydown')
                        .off('change')
                        .on('keydown', function(evt){
                            var unicode;

                            evt.stopPropagation();
                            unicode = (evt.which) ? evt.which : evt.keyCode;
                            if (!(unicode > 31 && (unicode < 48 || unicode > 57) && (unicode < 96 || unicode > 105))) {
                                $this.thresholdsPopup.slider.hide();
                                $this.thresholdsPopup.messageApply.show();
                            }
                        })
                        .on('change keyup', function(evt){
                            var max, min, valueMax, valueMin, values, slider, parent, unicode;
                            evt.stopPropagation();

                            unicode = (evt.which) ? evt.which : evt.keyCode;

                            if (!unicode || unicode == 13){

                                $this.thresholdsPopup.messageApply.hide();
                                slider = $this.thresholdsPopup.slider;

                                slider.show();

                                max = slider.slider('option', 'max');
                                min = slider.slider('option', 'min');

                                parent = $this.thresholdsPopup.dom;

                                values = [parseFloat(parent.find('.min-val').val()), parseFloat(parent.find('.max-val').val())];

                                valueMin = (utils.isNumber(values[0]) && values[0] < max && values[0] > min) ? parseFloat(values[0]) : parseFloat(min);
                                valueMax = (utils.isNumber(values[1]) && values[1] < max && values[1] > min) ? parseFloat(values[1]) : parseFloat(max);


                                if (valueMax < valueMin){ // Don't invert the boundaries
                                    if (valueMax == parseFloat($(this).val())){ // Give to the user a feedback related to what is changed in the last interaction
                                        valueMax = valueMin;
                                    }else{
                                        valueMin = valueMax;
                                    }

                                }

                                slider.slider("values", 1, valueMin);
                                $this.thresholdsPopup.legendPercentages.last().val(valueMin);

                                slider.slider("values", 0, valueMax);
                                $this.thresholdsPopup.legendPercentages.first().val(valueMax);

                                $this.updateLegend(valueMin, valueMax);
                                env.mainView.updateOnlyColors([min, valueMin, valueMin, valueMax, max]);
                            }
                        });
                });

            this.allRowsButton = this.dom
                .find(".allrows")
                .attr("title", lang.allRowsTitle)
                .css("opacity", disabledOpacity)
                .on("click", function(){
                    if (env.params.selectedRows.length != 0){

                        env.params.selectedRows = [];
                        env.params.filterProbes = false;
                        env.mainView.redraw();
                    }
                });

            this.filterSelection = this.dom
                .find(".filters")
                .attr("title", lang.filterSelectionTitle)
                .on("click", function(){

                    $this.dialogPopUp.dialog("open");
                    $this.dialogPopUp.html($this.filtersPopup.dom);

                    $this.dialogPopUp.dialog({
                        title: lang.filtersPopupTitle,
                        width: 300,
                        height: 140,
                        buttons: {
                            "Close": function() {
                                $(this).dialog("close");
                            }
                        }
                    });

                    $this.filtersPopup
                        .excludeErrorsCheck
                        .off("click")
                        .attr('checked', (env.session.getValue('exclude-errors') == 'true'))
                        .on("click", function(){
                            env.session.saveValue('exclude-errors', $(this).is(":checked"));
                            env.mainView.redraw();
                        });


                    $this.filtersPopup
                      .filter3Protocol
                      .off("change")
                      .attr("disabled", (env.params.type == "probes"))
                      .val((env.params.ipVersion == null) ? "both" : env.params.ipVersion)
                      .on("change", function(){
                        var actualVal;

                        actualVal = $(this).val();
                        actualVal = (actualVal == "both") ? null : actualVal;
                        env.params.selectedRows = [];
                        env.params.ipVersion = actualVal;
                        env.mainView.redraw();
                      });

                    $this.filtersPopup
                      .filter4Protocol
                      .off("change")
                      .val((env.params.isTcp) ? "tcp" : "udp")
                      .on("change", function(){
                        env.params.isTcp = ($(this).val() == "tcp");
                        env.mainView.redraw();
                      });

                });

            this.viewSelect
                .on("change", function(){
                    env.showFilter = $(this).val();
                    env.mainView.redraw();
                });
        };


        /**
         * This method returns the ranges for the colors thresholds
         *
         * @method _getThresholdsRanges
         * @private
         * @return {Array} An array composed of two integers
         */

        this._getThresholdsRanges = function(){
            var showFilter;

            showFilter = env.showFilter;
            switch(showFilter){
                case "pls":
                    return [0, 100];
                    break;

                case "rtt":
                    return [0, 5000];
                    break;

                case "relative-rtt":
                    return [0, 1000];
                    break;

                case "prb":
                    return [0, 5000];
                    break;
            }
        };


        /**
         * This method manages the full screen mode. It is an indirection for fullScreenMode in FullScreenView
         * but it manages the menu and the feedback for the user
         *
         * @method setFullScreen
         * @return {Boolean} fullScreen If true the full screen will be activated
         */

        this.setFullScreen = function(fullScreen){
            var icon;

            icon = (fullScreen) ? 'view/img/dnsmon_smallscreen_icon.png' : 'view/img/dnsmon_fullscreen_icon.png';

            this.fullScreenButton.icon.attr("src", env.widgetUrl + icon);
            this.fullScreenView.fullScreenMode(fullScreen);
        };


        /**
         * This method updates the status of all the items in the menu (e.g. if a button is clickable or not)
         *
         * @method update
         */

        this.update = function(){
            this.allRowsButton.css("opacity", (env.params.selectedRows.length == 0) ? disabledOpacity : normalOpacity);
            this.rightButton.css("opacity", (env.isTranslableRight == false) ? disabledOpacity : normalOpacity);
            this.leftButton.css("opacity", (env.isTranslableLeft == false) ? disabledOpacity : normalOpacity);
            this.zoomInButton.css("opacity", (env.isZoomableIn == false) ? disabledOpacity : normalOpacity);
            this.zoomOutButton.css("opacity", (env.isZoomableOut == false) ? disabledOpacity : normalOpacity);

            this.updatePeriodicallyButton.css("opacity", (env.isOngoing == false) ? disabledOpacity : normalOpacity);


            this.updateAggregationLevelLegend(lang.aggregationLevelLabel + ': ' + env.aggregationLabel);

            this.updateLegend(env.mainView.colorDomainBreakPoints[0], env.mainView.colorDomainBreakPoints[1]);

            this.loadPossibleView();
        };


        /**
         * This method updates the color thresholds with the new values
         *
         * @method updateLegend
         * @input {Number} firstValue An integer for the first threshold
         * @input {Number} secondValue An integer for the second threshold
         */

        this.updateLegend = function(firstValue, secondValue){
            var firstUnit, secondUnit, showFilter, realFirstValue, realSecondValue, realFirstUnit, realSecondUnit;

            showFilter = env.showFilter;

            realFirstValue = firstValue;
            realSecondValue = secondValue;

            switch(showFilter){
                case "pls":
                    realFirstUnit = "%";
                    realSecondUnit = "%";
                    firstUnit = realFirstUnit;
                    secondUnit = realSecondUnit;
                    break;

                case "rtt":
                    if (firstValue >= 1000){
                        firstValue = (firstValue/1000).toFixed(1);
                        realFirstUnit = "ms";
                        firstUnit = "s";
                    }else{
                        realFirstUnit = "ms";
                        firstUnit = "ms";
                    }

                    if (secondValue >= 1000){
                        secondValue = (secondValue/1000).toFixed(1);
                        realSecondUnit = "ms";
                        secondUnit = "s";
                    }else{
                        realSecondUnit = "ms";
                        secondUnit = "ms";
                    }

                    break;

                case "relative-rtt":
                    realFirstUnit = "%";
                    realSecondUnit = "%";
                    firstUnit = realFirstUnit;
                    secondUnit = realSecondUnit;
                    break;

                case "prb":
                    firstUnit = "#p";
                    secondUnit = "#p";
                    break;
            }

            legendPercentages.last().html(firstValue);
            legendPercentages.first().html(secondValue);

            legendUnit.last().html(firstUnit);
            legendUnit.first().html(secondUnit);

            this.thresholdsPopup.legendPercentages.last().val(realFirstValue);
            this.thresholdsPopup.legendPercentages.first().val(realSecondValue);

            this.thresholdsPopup.legendUnit.last().html(realFirstUnit);
            this.thresholdsPopup.legendUnit.first().html(realSecondUnit);
        };


        /**
         * This method updates the data resolution legend
         *
         * @method updateAggregationLevelLegend
         * @input {String} newLabel The new legend
         */

        this.updateAggregationLevelLegend = function(newLabel){
            var domElement;
            domElement = this.aggregationLevelLegend;

            if (domElement.text() != newLabel){
                domElement
                    .html(newLabel)
                    .attr("title", lang.aggregationLevelTitle)
                    .toggleClass("updated");

                setTimeout(function(){
                    domElement.toggleClass("updated");
                }, config.aggregationLegendUpdatedDuration);
            }

        };


        /**
         * This method appends an option for the selectobox fo the views
         *
         * @method addPossibleView
         * @input {String} label The name of the view
         * @input {String} value The value/key of the view
         */

        this.addPossibleView = function(label, value){
            var checked, showFilter;

            showFilter = env.showFilter;

            checked = (value == showFilter) ? 'selected="selected"' : '' ;
            this.viewSelect.append('<option value="' + value + '" ' + checked + '>' + label + '</option>');
        };


        /**
         * This method removes all the options of the selectobox fo the views
         *
         * @method removeAllViews
         */

        this.removeAllViews = function(){
            this.viewSelect.html("");
        };


        this._showDnsResponse = function(cell, dnsResponsePlace){
            var htmlDnsResponse, dataItem;

            this.dialogPopUp.dialog({height: 320, minWidth: 0, minHeight: 0, maxHeight: 0});
            this.dialogPopUp.dialog("option", "resizable", false);
            if (!lazyLoadTab1) {
                env.connector.getNativeDnsResult(cell, function (data) { // Show the DNS response

                    lazyLoadTab1 = true;
                    for (var n = 0, length = data.length; n < length; n++) {
                        dataItem = data[n];
                        htmlDnsResponse = this.extraDataPopup.dnsResponseDom.clone();

                        htmlDnsResponse.find(".dns-response-prbid").html(dataItem.probeId);
                        htmlDnsResponse.find(".dns-response-rt").html(dataItem.responseTime);
                        htmlDnsResponse.find(".dns-response-date").html(utils.dateToString(dataItem.date));

                        if (dataItem.nsId) {
                            htmlDnsResponse.find(".dns-response-nsid").html(dataItem.nsId);
                        } else {
                            htmlDnsResponse.find(".dns-response-nsid-rd").hide();
                        }

                        if (dataItem.response && dataItem.response != '') {
                            htmlDnsResponse.find(".dns-response-plaintext").html(dataItem.response);
                        }

                        if (dataItem.error) {
                            htmlDnsResponse.find(".dns-response-plaintext").addClass("dns-response-error").html('[' + dataItem.error.type + '] ' + dataItem.error.message);
                        }

                        dnsResponsePlace.append(htmlDnsResponse);
                    }

                }, this);
            }
        };


        this._showTraceroutes = function(cell, traceroutePlace){
            var dataItem, textareaWidth, tracerouteArea;

            this.dialogPopUp.dialog({height: 512, minWidth: 490, minHeight: 512, maxHeight: 512});
            this.dialogPopUp.dialog("option", "resizable", true);
            if (!lazyLoadTab2) {
                env.connector.getClosestTraceroutes(cell, function (data) { // Show the closest Traceroutes
                    lazyLoadTab2 = true;
                    if (data.length > 0) {
                        tracerouteDom = this.extraDataPopup.tracerouteDom.clone();
                        traceroutePlace.append(tracerouteDom);

                        if (data.length >= 2) {
//                            this.dialogPopUp.dialog("option", "resizable", true);
                            this.dialogPopUp.dialog({
                                resize: function (event, ui) {
                                    if (ui.size.width > textareaWidth * 2 + 74) {
                                        $(this).addClass("resized-dialog-traceroute");
                                    } else {
                                        $(this).removeClass("resized-dialog-traceroute");
                                    }
                                }
                            });

                        } else {
                            this.dialogPopUp.dialog("option", "resizable", false);
                        }

                        for (var n = 0, length = data.length; n < length; n++) {

                            dataItem = data[n];

                            tracerouteArea = $('<div class="textarea"></div>').tooltip(
                                {
                                    tooltipClass: 'custom-jquery-ui-tooltip',
                                    hide: {
                                        effect: "fade",
                                        duration: config.tooltipFade
                                    }
                                });

                            tracerouteArea.html(dataItem);
                            tracerouteDom.append(tracerouteArea);
                            textareaWidth = tracerouteArea.outerWidth();
                        }

                    }
                }, this);
            }
        };

        this._showHostonameBindResponse = function(cell, hostBindResponsePlace){
            var htmlHostnameResponse, dataItem;

            this.dialogPopUp.dialog({height: 380, minWidth: 0, minHeight: 0, maxHeight: 0});
            this.dialogPopUp.dialog("option", "resizable", false);
            if (!lazyLoadTab3) {
                env.connector.getClosestHostnameBind(cell, function (data) { // Show the closest Traceroutes
                    lazyLoadTab3 = true;
                    if (data.length > 0) {

                        for (var n = 0, length = data.length; n < length; n++) {
                            dataItem = data[n];

                            htmlHostnameResponse = this.extraDataPopup.hostBindResponseDom.clone();
                            htmlHostnameResponse.find(".hostbind-response-prbid").html(dataItem.probeId);
                            htmlHostnameResponse.find(".hostbind-response-msmId").html(dataItem.msmId);
                            htmlHostnameResponse.find(".hostbind-response-rt").html(dataItem.responseTime);
                            htmlHostnameResponse.find(".hostbind-response-date").html(utils.dateToString(dataItem.date));

                            if (dataItem.response && dataItem.response != '') {
                                htmlHostnameResponse.find(".hostbind-response-plaintext").html(dataItem.response);
                            } else {
                                htmlHostnameResponse.find(".hostbind-response-plaintext").html(env.lang.hostBindResponseNoAnswer);
                            }

                            hostBindResponsePlace.append(htmlHostnameResponse);
                        }

                    }
                }, this);
            }
        };

        /**
         * This method renders a dialog box with all the information related to a cell
         *
         * @method showExtraInfoDialog
         * @input {Object} cell A cell object
         */

        this.showExtraInfoDialog = function(cell){
            var overviewUrls, sampleUrls, parentOverview, parentSample, linkText, linkUrl, linkCurrent, urlItem,
                dnsResponsePlace, traceroutePlace, dialogHeight, n, length, hostBindResponsePlace, $this;

            $this = this;

            lazyLoadTab1 = false;
            lazyLoadTab2 = false;
            lazyLoadTab3 = false;

            overviewUrls = env.connector.getDataUrls(cell);
            sampleUrls = env.connector.getCellDataUrls(cell);

            dialogHeight = 210;

            this.dialogPopUp.dialog({
                title: lang.extraInfoDialogTitle,
                width: 500,
                height: dialogHeight,
                close: function(){
                    var $this;

                    $this = $(this);
                    $this.removeClass("resized-dialog-traceroute");
                    $this.dialog({height: 0, minWidth: 0, minHeight: 0, maxHeight: Infinity});
                    $this.dialog("option", "resizable", false);
                },
                buttons: {
                    "Close": function() {
                        $(this).dialog("close");
                    }
                }
            });

            this.dialogPopUp.dialog("open");
            this.dialogPopUp.html(this.extraDataPopup.dom);

            parentOverview = this.extraDataPopup.overviewRawUrl;
            parentSample = this.extraDataPopup.rawUrl;

            parentOverview.html('');
            parentSample.html('');

            for (n=0,length=sampleUrls.length; n<length; n++){
                urlItem = sampleUrls[n];
                linkUrl = urlItem.url;
                linkText = urlItem.label;
                linkCurrent = urlItem.current;

                if (env.retrievedAggregationLevel != 0 || linkCurrent){
                    parentSample.append('<a target="_blank" href="' + linkUrl + '" title="' + linkText + '">' + linkText + ((linkCurrent) ? ' (current)' : '') + '</a> ');
                }
            }

            for (n=0,length=overviewUrls.length; n<length; n++){
                urlItem = overviewUrls[n];
                linkUrl = urlItem.url;
                linkText = urlItem.label;
                linkCurrent = urlItem.current;
                if (env.retrievedAggregationLevel != 0 || linkCurrent){
                    parentOverview.append('<a target="_blank" href="' + linkUrl + '" title="' + linkText + '">' + linkText + ((linkCurrent) ? ' (current)' : '') + '</a> ');
                }
            }

            dnsResponsePlace = this.extraDataPopup.dnsResponse;
            dnsResponsePlace.html("").removeClass('dns-response-error');

            hostBindResponsePlace = this.extraDataPopup.hostBindResponse;
            hostBindResponsePlace.html("").removeClass('hostbind-response-error');

            traceroutePlace = this.extraDataPopup.traceroutePlace;
            traceroutePlace.html("");

            this.dialogPopUp.dialog("option", "resizable", false);

            if (env.retrievedAggregationLevel == 0) {
                this.dialogPopUp.find('.popup-tabs').show().tabs().find('a').on('click', function () {
                    var tab, tabId;

                    tab = $(this);
                    tabId = tab.attr('href');

                    switch (tabId) {

                        case '#tabs-1':
                            $this._showDnsResponse(cell, dnsResponsePlace);
                            break;

                        case '#tabs-2':
                            $this._showTraceroutes(cell, traceroutePlace);
                            break;

                        case '#tabs-3':
                            $this._showHostonameBindResponse(cell, hostBindResponsePlace);
                            break;
                    }
                });
                this._showDnsResponse(cell, dnsResponsePlace);
            } else {
                this.dialogPopUp.find('.popup-tabs').hide();
            }

        };


    };

    return ControlPanelView;
});
/**
 * Created with JetBrains WebStorm.
 * User: mcandela
 * Date: 9/20/13
 * Time: 10:59 AM
 * To change this template use File | Settings | File Templates.
 */

define('controller.gesture-manager',[
    "env.utils",
    "lib.jquery-libs-amd",
    "lib.d3"
], function(utils, $, d3){

    /**
     * GesturesManager provides all the features handling user gestures/interactions.
     *
     * @class GesturesManager
     * @constructor
     * @module controller
     */

    var GesturesManager =  function(env){
        var $this, config, mouseWheelSensibility, eventsAttachedOn;

        $this = this;
        config = env.config;
        mouseWheelSensibility = config.mouseWheelSensibility;

        this.alreadyInit = false;
        this.eventsList = {};
        this.eventsList.scrollDown = [];
        this.eventsList.scrollUp = [];
        this.eventsList.scrollLeft = [];
        this.eventsList.scrollRight = [];

        env.timeEventsActive = true;


        /**
         * Attach a callback to a gesture
         *
         * @method on
         * @param {String} evt An event id
         * @param {Function} callback A callback
         * @param {Object} context The context of the callback
         */

        this.on = function(evt, func, context){

            if (!this.alreadyInit) {
                this._init();
                this.alreadyInit = true;
            }

            this.eventsList[evt].push({
                bindedFunction: func,
                context: context
            });

        };


        /**
         * Initialise all the events related to the mouse wheel
         *
         * @method _initMouseWheel
         * @private
         */

        this._initMouseWheel = function(){
            env.container.chart.dom.$.on('DOMMouseScroll mousewheel', function (evt) {
                var list, element, newYDomain, wheelDelta, characherization;

                evt.preventDefault();

                if (mouseWheelSensibility != 0){
                    mouseWheelSensibility--;
                    return false;
                }else{
                    mouseWheelSensibility = config.mouseWheelSensibility;
                }

                list = [];

                if (env.timeEventsActive ==  true){

                    if (env.isUpdatedPeriodicallyActive){ // Disable the auto refresh function if active
                        env.mainView.controlPanel.keepUpdatedActive(false);
                    }

                    wheelDelta = evt.originalEvent.detail || -(evt.originalEvent.wheelDelta/120);

                    if (wheelDelta < 0) { //alternative options for wheelData: wheelDeltaX & wheelDeltaY

                        list = $this.eventsList.scrollDown;

                    }else{

                        if (config.allRowsZoomingOut && $this.rowsSubSelection){ // It is possible to get all the rows before to zoom out, check config.allRowsZoomingOut

                            $this.rowsSubSelection = false;
                            env.timeEventsActive = false;
                            env.params.selectedRows = [];
                            characherization = env.mainView.rowsCharacterization(env.mainView.rows);
                            newYDomain = characherization.domain;
                            env.mainView.yAxis.setDomain(function(){return newYDomain;});
                            env.mainView.redraw();

                        }else{
                            list = $this.eventsList.scrollUp;
                        }

                    }

                    for (var n=0,length=list.length; n<length; n++){
                        element = list[n];
                        element.bindedFunction.call(element.context, wheelDelta);
                    }

                }
                return false;
            });

        };


        /**
         * Initialise all the events related to the keyboard
         *
         * @method _initKeyEvents
         * @private
         */

        this._initKeyEvents = function(){
            eventsAttachedOn.$.keydown(function(evt){
                var list, element, key;

                if (env.timeEventsActive ==  true){
                    key = (evt.which) ? evt.which : evt.keyCode;
                    switch(key){
                        case 37: //Left
                            list = $this.eventsList.scrollLeft;
                            break;

                        case 39: //Right
                            list = $this.eventsList.scrollRight;
                            break;
                    }

                    if (list){
                        evt.preventDefault();

                        for (var n=0,length=list.length; n<length; n++){
                            element = list[n];
                            element.bindedFunction.call(element.context);
                        }
                    }
                }

            });
        };


        /**
         * Initialise all the events
         *
         * @method _init
         * @private
         */

        this._init = function(){
            eventsAttachedOn = env.document;
            env.timeEventsActive = true;

            if (env.activeMouseZoom) {
                this._initMouseWheel();
            }

            if(env.activeKeys){
                this._initKeyEvents();
            }

            if (env.activeGestures){
                this._initializeSelectionTool();
            }

            this._initializeActiveLabels();
            this._initializeRemoveRowsFunction();
        };


        /**
         * Initialise the function to remove rows
         *
         * @method _initializeRemoveRowsFunction
         * @private
         */

        this._initializeRemoveRowsFunction = function(){

            eventsAttachedOn.$.on("keydown", function(evt){
                var key;

                key = (evt.which) ? evt.which : evt.keyCode;
                if (evt.shiftKey || key == 16) { // Shift
                    env.rowRemotionOngoing = true;
                    env.mainView.showMessage(env.lang.clickToRemoveRow);
                    d3.selectAll(".y text").attr("class", "removable");
                }
            });

            eventsAttachedOn.$.on("keyup", function(evt){
                if (env.rowRemotionOngoing){ // Shift
                    env.rowRemotionOngoing = false;
                    d3.selectAll(".y text").attr("class", null);
                }
            });
        };


        /**
         * This method removes a row from the scene.
         *
         * @method _removeRowFromSelection
         * @private
         * @input {Object} rowSelection The selected row in a jQuery format
         */

        this._removeRowFromSelection = function(rowSelection){
            var rowMagnet;

            rowMagnet = rowSelection.attr("magnet");

            if (env.params.selectedRows.length == 0){
                env.params.selectedRows = $.map(env.connector.getRows(), function(item){ return item.id; }); // Get all rows
            }

            env.params.filterProbes = true;
            env.params.selectedRows = utils.removeSubArray(env.params.selectedRows, [rowMagnet]);
            env.mainView.redraw();
        };


        /**
         * This method executes the default click behaviour of a label on the y-axis.
         *
         * @method _executeRowAction
         * @private
         * @input {Object} rowSelection The selected row in a jQuery format
         */

        this._executeRowAction = function(rowSelection){
            var queryType, triggerAction, rowMagnet, rowObject;

            triggerAction = false;
            queryType = env.params.type;
            rowMagnet = rowSelection.attr("magnet");
            rowObject = env.connector.getRowById(rowMagnet);

            switch (queryType) {

                case "probes":
                    window.open(env.connector.getProbesPageUrl(rowMagnet, env.params), "_blank");
                    break;

                case "servers":
                    if (rowObject.cells.length > 0) {
                        env.params.type = "probes";
                        env.params.root = env.params.group;
                        env.params.group = rowMagnet;
                        env.params.filterProbes = false;
                        env.params.selectedRows = [];
                        triggerAction = true;
                    } else {
                        env.mainView.showMessage(env.lang.noDataForRow);
                    }
                    break;
            }

            if (triggerAction == true) {
                env.mainView.breadcrumbs.addLevel(rowSelection.text());
                env.mainView.redraw();
            }

        };


        /**
         * Initialise labels on the y-axis
         *
         * @method _initializeActiveLabels
         * @private
         */

        this._initializeActiveLabels = function(){
            env.mainView.yAxis.onClick(function(evt){
                var selectedRow;

                selectedRow = $(this);

                if (!env.rowRemotionOngoing) {

                    $this._executeRowAction(selectedRow);

                }else{

                    $this._removeRowFromSelection(selectedRow);

                }
            });
        };




        /**
         * Initialise the selection tool
         *
         * @method _initializeSelectionTool
         * @private
         */

        this._initializeSelectionTool = function(){
            var svg, body, selectionRect, endCoords, trackerDomElement, container, params, chart, selectedCells,
                removeSelectionWithFeedback, coords, startCoords, currentElement, coordsMousemove, finalStartCoords,
                finalEndCoords, removeRect, startSelection, stopSelection,
                getNormalCellColor, getSelectedCellColor, updateSelectionTimes, selectedRectsBoundingBox,
                updateSelectionNormal, updateSelectionLowProfile, dragStarted, selectionTooltipStart, selectionTooltipStop;

            container = env.container;
            params = env.params;
            chart = container.chart;
            svg = chart.svg;
            body = d3.select("body");


            trackerDomElement = svg;

            selectedRectsBoundingBox = {min: {x: Infinity, y: Infinity}, max: {x: -1, y: -1}}; //Reset the selection boundaries

            trackerDomElement.style("cursor", config.style.selectionCursor);


            // This function removes the selection providing a feedback for the user
            removeSelectionWithFeedback = function(event){

                if (event.target.nodeName != 'rect' && event.target.nodeName != 'svg'){

                    if (selectionRect){ //Remove the low profile selection rect
                        selectionRect
                            .transition()
                            .duration(config.selectionWithdrawalDuration)
                            .attr("width", "0")
                            .attr("height", "0")
                            .remove();
                    }

                    selectionTooltipStart.remove();
                    selectionTooltipStop.remove();

                    if(selectedCells && env.lowProfile == false){ //Remove the selected rectangles
                        selectedCells
                            .transition()
                            .duration(config.selectionWithdrawalDuration)
                            .style("fill", getNormalCellColor);
                    }

                    currentElement = null;

                    env.timeEventsActive = true;

                    body.classed("stat-noselect", false); //Remove the non-selection from all the dom
                    eventsAttachedOn.$.off("mouseup.selection").off("keyup.selection"); // Remove useless listeners
                    document.onselectstart = function(){return true;}; //Remove the cursor hack
                    trackerDomElement.on("mousemove", null);// .on("mouseup", null); //Remove the selection events
                }
            };


            // This function provides the selection feature in the low-profile mode
            updateSelectionLowProfile = function(){
                var chartHeight, chartWidth, x, y, width, height, tooltipsOffset, dates, startDateString, endDateString,
                    tooltipWidth;

                if (currentElement == null) return;

                coordsMousemove = d3.mouse(currentElement);

                chartHeight = chart.height();
                chartWidth = chart.width();

                tooltipsOffset = 3;

                // The following lines bound the selection inside the chart
                coordsMousemove[0] = (coordsMousemove[0] > 0) ? coordsMousemove[0] : 1 ;
                coordsMousemove[0] = (coordsMousemove[0] < chartWidth) ? coordsMousemove[0] : chartWidth ;

                coordsMousemove[1] = (coordsMousemove[1] > 0) ? coordsMousemove[1] : 1 ;
                coordsMousemove[1] = (coordsMousemove[1] < chartHeight) ? coordsMousemove[1] : chartHeight ;

                endCoords = {x: ((coordsMousemove[0] > 0) ? coordsMousemove[0] : 1 ), y: coordsMousemove[1]};
                dragStarted = true;

                x = Math.min(startCoords.x, endCoords.x);
                y = Math.min(startCoords.y, endCoords.y);
                width = Math.abs(startCoords.x - endCoords.x);
                height = Math.abs(startCoords.y - endCoords.y);

                dates = $this._computeSubDomains(startCoords, endCoords);

                startDateString = utils.dateToString(dates[0][0]);
                endDateString = utils.dateToString(dates[0][1]);

                tooltipWidth = (startDateString.length * 8); // Where 8 is the base width of a char in the tooltip (don't retrieve it for performance purposes)

                selectionTooltipStart
                    .css({
                        "position": "absolute",
                        "left": x + chart.margin.left - tooltipsOffset - selectionTooltipStart.outerWidth(),
                        "top": y + chart.margin.top - tooltipsOffset - selectionTooltipStart.outerHeight(),
                        "width": tooltipWidth
                    })
                    .text(startDateString)
                    .show();

                selectionTooltipStop
                    .css({
                        "position": "absolute",
                        "left": x + width + chart.margin.left + tooltipsOffset,
                        "top": y + height + chart.margin.top + tooltipsOffset,
                        "width": tooltipWidth
                    })
                    .text(endDateString)
                    .show();

                selectionRect.attr({
                    "x": x, //Update the selection rectangle in low profile mode
                    "y": y,
                    "width": width,
                    "height": height
                }).style("fill-opacity", function(){
                    return (env.lowProfile == true) ? 0.5 : 0.2;
                });
            };


            // This function provides the selection feature in the normal mode
            updateSelectionNormal = function(){
                var selectionVertices, allCells;

                updateSelectionTimes--;

                if (currentElement != null && updateSelectionTimes == 0) {

                    allCells = env.container.chart.svg.selectAll("rect.cell");

                    updateSelectionLowProfile();

                    dragStarted = true;

                    updateSelectionTimes = config.sensibilityFactorDuringSelection; // Reset the number of callback accepted

                    coordsMousemove = d3.mouse(currentElement); // Get the actual cursor position

                    endCoords = {x: coordsMousemove[0], y: coordsMousemove[1]};// Get the actual cursor position in our internal format

                    selectedRectsBoundingBox = {min: {x: Infinity, y: Infinity}, max: {x: -1, y: -1}}; //Reset the selection boundaries

                    finalStartCoords = {x: Math.min(startCoords.x, endCoords.x), y: Math.min(startCoords.y, endCoords.y)}; //Calculate the bounding box of the cells touched by the selection
                    finalEndCoords = {x: Math.max(startCoords.x, endCoords.x), y: Math.max(startCoords.y, endCoords.y)};

                    selectionVertices = utils.getRectangularVertexPoints(finalStartCoords.x, finalStartCoords.y, finalEndCoords.x - finalStartCoords.x, finalEndCoords.y - finalStartCoords.y); // Get Selection vertices

                    // This function finds the subset of cells outside the bounding box
                    allCells
                        .filter(function (d) {
                            var out;
                            out = d.selected;

                            if (out == true) {
                                d.selected = false;
                            }

                            return out;
                        })
                        .style("fill", getNormalCellColor); //Replace the color of the cells outside with the default one (useful for cells no longer involved in the selection)


                    // This function finds the subset of cells inside the bounding box
                    selectedCells = allCells
                        .filter(function (d) {
                            var isCellSelected, rectVertices, currentRect;

                            currentRect = d3.select(this); // Points the current cell

                            d.optional.rectVertices = d.optional.rectVertices || utils.getRectangularVertexPoints(d.optional.xPosition, d.optional.yPosition, parseFloat(currentRect.attr("width")), parseFloat(currentRect.attr("height"))); // Calculate the cell vertices

                            rectVertices = d.optional.rectVertices;

                            isCellSelected = utils.isThereAnIntersection(selectionVertices, rectVertices);// && d.selected == false; // Find if there is an intersection

                            if (isCellSelected == true) {
                                /*
                                 * Calculate the real bounding box based on cells boundaries
                                 */
                                selectedRectsBoundingBox.min = {x: Math.min(rectVertices[0].x, selectedRectsBoundingBox.min.x), y: Math.min(rectVertices[2].y, selectedRectsBoundingBox.min.y)};
                                selectedRectsBoundingBox.max = {x: Math.max(rectVertices[0].x, selectedRectsBoundingBox.max.x), y: Math.max(rectVertices[3].y, selectedRectsBoundingBox.max.y)};

                                d.selected = true;
                            }

                            return isCellSelected;
                        })
                        .style("fill", getSelectedCellColor); //Change the color of the selected cells


                }
            };

            // This function is called when the user starts to select cells
            startSelection = function() {
                var mainView;

                mainView = env.mainView;

                mainView.popUp.hide(); // Cancel any popup
                mainView.showMessage(''); // Cancel any message
                mainView.selectColumn(false); // Unselect column
                mainView.selectRow(false); // Unselect row

                env.timeEventsActive = false;

                dragStarted = false;

                document.onselectstart = function () {return false;}; //Cursor hack to avoid browser default dragging cursor

                currentElement = this;

                coords = d3.mouse(currentElement);

                startCoords = {x: coords[0], y: coords[1]};
                endCoords = {x: coords[0], y: coords[1]};


                if (env.lowProfile == true) {

                    d3.select(eventsAttachedOn.plain) //Attach the low profile callback for the mouse gestures
                        .on("mousemove", updateSelectionLowProfile);
                }


                if (selectionRect){ //Remove any possible old selection rectangles (can happen when the window goes out of focus)
                    selectionRect.remove();
                }

                selectionRect = svg //Introduce the selection rectangle
                    .append("rect")
                    .attr("class", "selection-rect");

                selectionTooltipStart = $('<div class="dnsmon-tooltip selection-tooltip-start custom-jquery-ui-tooltip"></div>');
                selectionTooltipStop = $('<div class="dnsmon-tooltip selection-tooltip-stop custom-jquery-ui-tooltip"></div>');

                container.dom.$.append(selectionTooltipStart);
                container.dom.$.append(selectionTooltipStop);


                if (env.lowProfile == false){

                    d3.select(eventsAttachedOn.plain) //Attach the high profile callback for the mouse gestures
                        .on("mousemove", updateSelectionNormal);

                    getNormalCellColor = env.mainView.getCellColor;
                    getSelectedCellColor = env.mainView.getSelectedCellColor;
                    updateSelectionTimes = config.sensibilityFactorDuringSelection;
                }

                body.classed("stat-noselect", true);

                eventsAttachedOn.$
                    .on("mouseup.selection", stopSelection)
                    .on("keyup.selection", function(evt){
                        var key;

                        key = (evt.which) ? evt.which : evt.keyCode;
                        if (key == 27){ // Esc
                            removeSelectionWithFeedback(evt);
                        }
                    });

            };

            // This function is called when the user stops to select cells
            stopSelection = function(evt) {
                var zoomAnimationDuration, zoomAnimationDelay, selectionWithdrawalDuration;

                zoomAnimationDuration = config.zoomAnimationDuration;
                zoomAnimationDelay = config.zoomAnimationDelay;
                selectionWithdrawalDuration = config.selectionWithdrawalDuration;

                if (currentElement == null){
                    return;
                }


                body.classed("stat-noselect", false);
                eventsAttachedOn.$.off("mouseup.selection").off("keyup.selection");
                env.mainView.selectColumn(false); // Unselect column
                env.mainView.selectRow(false); // Unselect row
                document.onselectstart = function () {return true;}; //Remove the cursor hack

                if (dragStarted == false){
                    $this._clickEvent(evt);

                    currentElement = null; // Reset it (also if not used in the same function)
                    if (selectionRect){
                        selectionRect.remove();
                    }
                    return;
                }

                selectionTooltipStart.remove();
                selectionTooltipStop.remove();

                if (env.lowProfile == true || selectedRectsBoundingBox.min.x == Infinity) { // Set the approximate box
                    selectedRectsBoundingBox.min = {x: Math.min(startCoords.x, endCoords.x), y: Math.min(startCoords.y, endCoords.y)};
                    selectedRectsBoundingBox.max = {x: Math.max(startCoords.x, endCoords.x), y: Math.max(startCoords.y, endCoords.y)};
                }

                removeRect = function(){ //This function will be pushed as a callback of the redraw function in order to remove the selection rect if the selection is not applicable
                    selectionRect
                        .transition()
                        .duration(zoomAnimationDuration)
                        .delay(zoomAnimationDelay)
                        .attr("x", 0)
                        .attr("y", 0)
                        .attr("width", chart.width())
                        .attr("height", chart.height())
                        .remove();

                    env.timeEventsActive = true;
                };

                if (!$this._computeSubDomainsAndApply(selectedRectsBoundingBox.min, selectedRectsBoundingBox.max, removeRect)){ //checks if the new subselection is not applicable

                    env.timeEventsActive = true;

                    if (selectionRect){
                        selectionRect
                            .transition()
                            .duration(selectionWithdrawalDuration)
                            .attr("x", (selectedRectsBoundingBox.max.x - selectedRectsBoundingBox.min.x)/2 + selectedRectsBoundingBox.min.x)
                            .attr("y", (selectedRectsBoundingBox.max.y - selectedRectsBoundingBox.min.y)/2 + selectedRectsBoundingBox.min.y)
                            .attr("width", 0)
                            .attr("height", 0)
                            .remove();
                    }

                    if (selectedCells){
                        selectedCells //Gives a feedback to the user about the inapplicability of the subselection
                            .style("fill", config.style.noSelectableAreaColor)
                            .transition()
                            .duration(selectionWithdrawalDuration)
                            .style("fill", getNormalCellColor);

                    }
                }

                currentElement = null; //Reset the selection start point
                trackerDomElement
                    .on("mousemove", null);
            };

            trackerDomElement
                .on("mousedown", startSelection);
        };


        /**
         * This function is called when an user clicks on a cell
         *
         * @method _clickEvent
         * @private
         */

        this._clickEvent = function(evt){
            var selectedCellData, target;

            env.timeEventsActive = true;
            target = d3.select(evt.target);
            selectedCellData = target[0][0]["__data__"];
            if (selectedCellData){
                env.mainView.controlPanel.showExtraInfoDialog(selectedCellData);
            }

        };


        /**
         * This function computes the new sub-domain after a selection
         *
         * @method _computeSubDomains
         * @private
         * @param {Number} finalStartCoords The top-left point of the selection
         * @param {Number} finalEndCoords The bottom-right point of the selection
         * @return {Array} The new domain
         */

        this._computeSubDomains = function(finalStartCoords, finalEndCoords){
            var newXDomain, newXRange, newYRange, newYDomain;

            newXRange = [finalStartCoords.x, finalEndCoords.x];

            newYRange = [finalStartCoords.y, finalEndCoords.y];
            newXDomain = env.mainView.xAxis.getSubDomain(newXRange);
            newYDomain = env.mainView.yAxis.getSubDomain(newYRange);

            return [newXDomain, newYDomain];
        };


        /**
         * This function computes and applies the new sub-domain after a selection
         *
         * @method _computeSubDomainsAndApply
         * @private
         * @param {Number} startCoords The top-left point of the selection
         * @param {Number} endCoords The bottom-right point of the selection
         * @param {Function} callback A callback function
         * @return {Boolean} True if the new domain is applied
         */

        this._computeSubDomainsAndApply = function(startCoords, endCoords, callback){
            var newXDomain, newYDomain, domains, row, tmpSelectedRows, tmpStartDate, tmpEndDate, newSelection;

            domains = this._computeSubDomains(startCoords, endCoords);
            newXDomain = domains[0];
            newYDomain = domains[1];

            if ((newXDomain.length > 0 ) &&
                (newYDomain.length > 0)) {  // Zoom damper

                tmpStartDate = newXDomain[0];
                tmpEndDate = newXDomain[1];

                tmpSelectedRows = [];


                for (var n=0,length=env.mainView.rows.length; n<length ;n++){
                    row = env.mainView.rows[n];

                    if (utils.indexOf(row.label, newYDomain) != -1){
                        tmpSelectedRows.push(row.id);
                        this.rowsSubSelection = true;
                    }
                }

                if (env.mainView.timeController.isSubSelectable(tmpStartDate, tmpEndDate, tmpSelectedRows)){ // Check if the sub-selection is possible

                    utils.log('Subselection possible', env.debugMode);
                    env.params.selectedRows = tmpSelectedRows;
                    env.params.filterProbes = true;
                    env.params.startDate = tmpStartDate;
                    env.params.endDate = tmpEndDate;

                    env.mainView.redraw(callback, this);
                    return true;

                }else if (env.retrievedAggregationLevel != env.minAggregation && env.retrievedAggregationLevel != 0){ // We still have some aggregation levels in the middle

                    utils.log('Subselection too small, enlarged', env.debugMode);
                    env.params.selectedRows = tmpSelectedRows;
                    env.params.filterProbes = true;
                    newSelection = env.mainView.timeController.getZoomableWindow(tmpStartDate, tmpEndDate);
                    newSelection = env.mainView.timeController.getBoundedWindow(newSelection.start, newSelection.end);
                    env.params.startDate = newSelection.start;
                    env.params.endDate = newSelection.end;
                    env.mainView.showMessage(env.lang.minimumSelectionImposed);

                    env.mainView.redraw(callback, this);
                    return true;

                }else if (env.mainView.timeController.isSelectionReduced(tmpSelectedRows)){ // Check if the selection is a sub-selection

                    utils.log('Subselection too small, not enlargeable, some rows removed', env.debugMode);
                    env.params.selectedRows = tmpSelectedRows; //Don't change time, only the selected probes
                    env.params.filterProbes = true;
                    env.mainView.redraw(callback, this);
                    env.mainView.showMessage(env.lang.minimumTimeSelectionReached);
                    return true;

                }else{

                    utils.log('Subselection too small, not enlargeable, rows cannot be removed', env.debugMode);
                    env.mainView.showMessage(env.lang.tooZoomedMessage); //SubSelection failed
                    return false;
                }
            }
        }

    };

    return GesturesManager;
});



/**
 * Created with JetBrains WebStorm.
 * User: mcandela
 * Date: 10/18/13
 * Time: 9:32 AM
 * To change this template use File | Settings | File Templates.
 */

define('controller.time',[
    "env.utils",
    "controller.gesture-manager"
], function(utils, GesturesManager){

    /**
     * TimeController provides all the functions to manage the time in the tool.
     *
     * @class TimeController
     * @constructor
     * @module controller
     */

    var TimeController = function(env){
        var gesturesManager, config, subMinutes, addMinutes, updateTimer;

        config = env.config;
        gesturesManager = new GesturesManager(env);

        addMinutes = utils.addMinutes;
        subMinutes = utils.subMinutes;

        this.init = function(){
            gesturesManager.on('scrollRight', this.shiftRight, this);
            gesturesManager.on('scrollLeft', this.shiftLeft, this);
            gesturesManager.on('scrollUp', this.zoomOut, this);
            gesturesManager.on('scrollDown', this.zoomIn, this);
        };


        /**
         * Checks if it is possible to zoom-out with the current selection
         *
         * @method _isZoomableOut
         * @private
         * @param {Date} startDate The start date of the new selection
         * @param {Date} endDate The end date of the new selection
         * @return {Boolean} True if the zoom-out is applicable
         */

        this._isZoomableOut = function(startDate, endDate){
            var aggregationLevel;
            aggregationLevel = this._getAggregationLevel(startDate, endDate);
            return (aggregationLevel <= env.maxAggregation && startDate >= env.measurementStartTime && endDate <= env.measurementEndTime);
        };


        /**
         * Checks if it is possible to zoom-in with the current selection
         *
         * @method _isZoomableIn
         * @private
         * @param {Date} startDate The start date of the new selection
         * @param {Date} endDate The end date of the new selection
         * @return {Boolean} True if the zoom-in is applicable
         */

        this._isZoomableIn = function(startDate, endDate){
            var aggregationLevel, virtualZoom;

            aggregationLevel = this._getAggregationLevel(startDate, endDate);

            virtualZoom = (aggregationLevel > (env.minAggregation * config.virtualZoomFactor));

            return virtualZoom;
        };


        /**
         * Checks if it is possible to shift left the time window
         *
         * @method _isTranslableLeft
         * @private
         * @param {Date} startDate The start date of the new selection
         * @return {Boolean} True if the shift is applicable
         */

        this._isTranslableLeft = function(startDate){
            return (startDate >= env.measurementStartTime);
        };


        /**
         * Checks if it is possible to shift right the time window
         *
         * @method _isTranslableRight
         * @private
         * @param {Date} endDate The end date of the new selection
         * @return {Boolean} True if the shift is applicable
         */

        this._isTranslableRight = function(endDate){
            return (endDate <= env.measurementEndTime);
        };


        this._getAggregationLevel = function(startDate, endDate){
            var maxNumberOfCells, aggregationSeconds, containerWidth, timeInterval;

            timeInterval = Math.floor((endDate - startDate) / 1000);

            containerWidth = env.container.chart.width();

            maxNumberOfCells = containerWidth / (config.cellsMinWidth + config.xCellsMargin);

            aggregationSeconds = timeInterval / maxNumberOfCells;

            return (aggregationSeconds > 0) ? aggregationSeconds.toFixed(2) : 0;
        };


        /**
         * Zoom in the chart
         *
         * @method zoomIn
         * @param {Number} zoomLevel A value to be applied at the current zoom
         */

        this.zoomIn = function(zoomLevel){
            var startDate, endDate, minutes;

            if (env.timeEventsActive == true) {
                minutes = ((env.params.endDate - env.params.startDate) / 60000) * config.zoomProportion * Math.abs(zoomLevel);

                startDate = addMinutes(env.params.startDate, minutes);
                endDate = subMinutes(env.params.endDate, minutes);

                if (this._isZoomableIn(startDate, endDate)) {
                    env.params.startDate = startDate;
                    env.params.endDate = endDate;

                    if (env.isUpdatedPeriodicallyActive) { // Disable the auto refresh function if active
                        env.mainView.controlPanel.keepUpdatedActive(false);
                    }

                    env.mainView.updateXDomain(true);
                }
            }
        };


        /**
         * Zoom out the chart
         *
         * @method zoomOut
         * @param {Number} zoomLevel A value to be applied at the current zoom
         */

        this.zoomOut = function(zoomLevel){
            var startDate, endDate, minutes, newTimeWindow;

            if (env.timeEventsActive == true) {
                minutes = ((env.params.endDate - env.params.startDate) / 60000) * config.zoomProportion * Math.abs(zoomLevel);

                startDate = subMinutes(env.params.startDate, minutes);
                endDate = addMinutes(env.params.endDate, minutes);

                newTimeWindow = this.getBoundedWindow(startDate, endDate);

                if (this._isZoomableOut(newTimeWindow.start, newTimeWindow.end)) {
                    env.params.startDate = newTimeWindow.start;
                    env.params.endDate = newTimeWindow.end;

                    if (env.isUpdatedPeriodicallyActive) { // Disable the auto refresh function if active
                        env.mainView.controlPanel.keepUpdatedActive(false);
                    }

                    env.mainView.updateXDomain(true);
                }
            }
        };


        /**
         * Shift left the time window
         *
         * @method shiftLeft
         */

        this.shiftLeft = function(){
            var startDate, endDate, timeOffset, newBoundaries;

            if (env.timeEventsActive == true) {
                timeOffset = ((env.params.endDate - env.params.startDate) / 60000) * config.slideProportion;

                startDate = subMinutes(env.params.startDate, timeOffset);
                endDate = subMinutes(env.params.endDate, timeOffset);

                newBoundaries = this.getBoundedWindow(startDate, endDate);

                if (this._isTranslableLeft(startDate) || env.params.startDate.getTime() != newBoundaries.start.getTime()) {
                    env.params.startDate = newBoundaries.start;
                    env.params.endDate = newBoundaries.end;

                    if (env.isUpdatedPeriodicallyActive) { // Disable the auto refresh function if active
                        env.mainView.controlPanel.keepUpdatedActive(false);
                    }

                    env.mainView.updateXDomain(true);
                }
            }
        };


        /**
         * Shift right the time window
         *
         * @method shiftRight
         */

        this.shiftRight = function(){
            var startDate, endDate, timeOffset, newBoundaries;

            if (env.timeEventsActive == true) {
                timeOffset = ((env.params.endDate - env.params.startDate) / 60000) * config.slideProportion;

                startDate = addMinutes(env.params.startDate, timeOffset);
                endDate = addMinutes(env.params.endDate, timeOffset);

                newBoundaries = this.getBoundedWindow(startDate, endDate);

                if (this._isTranslableRight(endDate) || env.params.endDate.getTime() != newBoundaries.end.getTime()) {
                    env.params.startDate = newBoundaries.start;
                    env.params.endDate = newBoundaries.end;

                    if (env.isUpdatedPeriodicallyActive) { // Disable the auto refresh function if active
                        env.mainView.controlPanel.keepUpdatedActive(false);
                    }

                    env.mainView.updateXDomain(true);
                }
            }
        };


        /**
         * Check if the new selection is a sub-selection of the previous one
         *
         * @method isSelectionReduced
         * @param {Array} selectedRows The new list of selected rows
         * @return {Boolean} True if the new selection is a sub-selection of the previous one
         */

        this.isSelectionReduced = function(selectedRows){
            var isSelectionReduced;

            isSelectionReduced = (selectedRows.length < env.params.selectedRows.length || env.params.selectedRows.length == 0);

            return isSelectionReduced;
        };


        /**
         * Check if the new selection can be applied
         *
         * @method isSubSelectable
         * @param {Date} startDate The start date of the new selections
         * @param {Date} endDate The end date of the new selection
         * @param {Array} selectedRows The new list of selected rows
         * @return {Boolean} True if the new selection can be applied
         */

        this.isSubSelectable = function(startDate, endDate, selectedRows){
            var isZoomableIn, isTimeChangend, isSelectionReduced;

            isZoomableIn = this._isZoomableIn(startDate, endDate);

            isTimeChangend = !((env.params.startDate == startDate) && (env.params.endDate == endDate));

            isSelectionReduced = this.isSelectionReduced(selectedRows);


            return isZoomableIn || (!isZoomableIn && !isTimeChangend && isSelectionReduced);
        };


        /**
         * Check if the new selection can be reduced
         *
         * @method isReducible
         * @param {Date} startDate The start date of the new selections
         * @param {Date} endDate The end date of the new selection
         * @return {Boolean} True if the new selection can be reduced
         */

        this.isReducible = function(startDate, endDate, selectedRows){
            var isZoomableIn, isTimeChangend, isSelectionReduced;

            isZoomableIn = this._isZoomableIn(startDate, endDate);

            isTimeChangend = !((env.params.startDate == startDate) && (env.params.endDate == endDate));

            isSelectionReduced = this.isSelectionReduced(selectedRows);


            return isZoomableIn || (!isZoomableIn && !isTimeChangend && isSelectionReduced);
        };


        /**
         * Update the status of the controller parameters of the whole widget.
         *
         * @method updateStatus
         */

        this.updateStatus = function(){
            var startDate, endDate, timeOffset, zoomMinutes, offsetTmp, newTimeWindow;

            startDate = env.params.startDate;
            endDate = env.params.endDate;

            offsetTmp = ((endDate - startDate) / 60000);

            timeOffset = offsetTmp * config.slideProportion;
            zoomMinutes = offsetTmp * config.zoomProportion * Math.abs(config.manualZoomFactor);

            env.params.aggregationLevel = this._getAggregationLevel(startDate, endDate);

            env.isZoomableIn = this._isZoomableIn(addMinutes(startDate, zoomMinutes), subMinutes(endDate, zoomMinutes));

            newTimeWindow = this.getBoundedWindow(subMinutes(startDate, zoomMinutes), addMinutes(endDate, zoomMinutes));
            env.isZoomableOut = this._isZoomableOut(newTimeWindow.start, newTimeWindow.end);

            env.isTranslableLeft = this._isTranslableLeft(subMinutes(startDate, timeOffset));
            env.isTranslableRight = this._isTranslableRight(addMinutes(endDate, timeOffset));
        };


        /**
         * Update the chart with the latest available data
         *
         * @method getNewData
         * @param {integer} timeWindow A time window express as seconds if null the current one will be used
         */

        this.getNewData = function(timeWindow){
            env.params.startDate = null;
            env.params.endDate = null;
            env.params.timeWindow = (timeWindow) ? timeWindow : env.timeWindowSeconds;
            env.timeEventsActive = false;

            env.mainView.redraw(function(){
                env.timeEventsActive = true;
            });
        };


        /**
         * Given a time interval, this function checks if it is valid otherwise it returns the closer valid selection
         *
         * @method getBoundedWindow
         * @param {Date} startDate The start date of the new selections
         * @param {Date} endDate The end date of the new selection
         * @return {Object} Returns start and end time (two Date Objects)
         */

        this.getBoundedWindow = function(startDate, endDate){
            var timeWindowMinutes, newStartDate, newEndDate;

            timeWindowMinutes = (endDate - startDate) / 60000; // Time window in minutes

            if (startDate < env.measurementStartTime && endDate <= env.measurementEndTime){

                newStartDate = env.measurementStartTime;
                newEndDate = addMinutes(newStartDate, timeWindowMinutes);

            }else if (endDate > env.measurementEndTime && startDate >= env.measurementStartTime){

                newEndDate = env.measurementEndTime;
                newStartDate = subMinutes(newEndDate, timeWindowMinutes);

            }else{

                newStartDate = startDate;
                newEndDate = endDate;

            }

            return {start: newStartDate, end: newEndDate};
        };


        /**
         * Given a time interval, this function checks if it is valid otherwise it returns the closer valid zoomable selection
         *
         * @method getZoomableWindow
         * @param {Date} startDate The start date of the new selections
         * @param {Date} endDate The end date of the new selection
         * @return {Object} Returns start and end time (two Date Objects)
         */

        this.getZoomableWindow = function(startDate, endDate){
            var minTimeWindow, newTimeWindow, newStartDate, newEndDate, timeWindowCenter, halfMinTimeWindow;

            minTimeWindow = ((env.minAggregation * config.virtualZoomFactor) * env.maxNumberOfCellsPerRow) * 1000;
            newTimeWindow = (endDate.getTime() - startDate.getTime());
            timeWindowCenter = startDate.getTime() + (newTimeWindow / 2);
            halfMinTimeWindow = (minTimeWindow / 2);

            newStartDate = new Date(timeWindowCenter - halfMinTimeWindow);
            newEndDate = new Date(timeWindowCenter + halfMinTimeWindow);

            return {start: newStartDate, end: newEndDate};
        };


        /**
         * This function starts the auto-update feature.
         *
         * @method keepUpdated
         * @param {Boolean} keepUpdate If true the auto-update feature starts
         */

        this.keepUpdated = function(keepUpdate){
            var $this, interval;

            $this = this;
            interval = ((env.debugMode) ? 6000 : (config.updateEverySeconds * 1000));

            if (keepUpdate){
                this.getNewData(null); // First refresh
                updateTimer = setInterval($this.getNewData, interval);
            }else{
                clearInterval(updateTimer);
            }
        };

    };

    return TimeController;
});

define('view.svg.time-axis',[
    "lib.d3"
], function(d3){

    /**
     * SvgTimeAxisView is the view component representing the x-axis in SVG terms.
     * It provides additional functions to manage interactions with the x elements.
     *
     * @class SvgTimeAxisView
     * @constructor
     * @module view.svg
     */

    var SvgTimeAxisView = function(container, options){

        this.orient = options.orient;

        this.container = container;

        this.range = options.range;

        this.domain = options.domain;

        this.parent = this.container.svg.append('g');

        this.setRange = function(range){
            this.range = range;
            this.update();
        }

        this.setDomain = function(domain){
            this.domain = domain;
            this.update();
        }

        this.render = function(){
            this._buildFunction();
            this.parent.call(this.axisFunction);
            this._rotate();
        };

        this.update = function(){
            this._buildFunction();
            this.parent.call(this.axisFunction);
            this._rotate();
        };

        this._buildFunction = function(){
            this.scale = d3
                .time
                .scale
                .utc()
                .domain(this.domain())
                .range(this.range());

            this.axisFunction = d3.svg
                .axis()
                .scale(this.scale)
                .tickFormat(this.timeFormat)
                .ticks(20);

            this.axisFunction
                .orient(this.orient);

            if (this.orient == 'left'){
                this.margin = {
                    left: this.container.chart.margin.left,
                    right: 0,
                    top: this.container.chart.margin.top,
                    bottom: 0
                };
            }else{
                this.margin = {
                    left: this.container.chart.margin.left,
                    right: 0,
                    top: this.container.height() - this.container.chart.margin.bottom,
                    bottom: this.container.chart.margin.bottom
                };
            }


            this.parent
                .attr("class", "x axis")
                .attr('transform', 'translate(' + this.margin.left + ', ' + this.margin.top+ ')');
        };

        this._rotate = function(){
            this.parent.selectAll("text")
                .style("text-anchor", "end")
                .attr("dx", "-.8em")
                .attr("dy", ".15em")
                .attr('transform', 'rotate(-65)');
        };


        this.getSubDomain = function(newRange){
            return newRange.map(this.scale.invert).sort(d3.ascending);
        };

        this.timeFormat = d3.time.format.utc.multi([
            [".%L", function(d) { return d.getUTCMilliseconds(); }],
            [":%S", function(d) { return d.getUTCSeconds(); }],
            ["%H:%M", function(d) { return d.getUTCMinutes(); }],
            ["%H:%M", function(d) { return d.getUTCHours(); }],
            ["%Y-%m-%d", function(d) { return d.getUTCDay() && d.getUTCDate() != 1; }],
            ["%Y-%m-%d", function(d) { return d.getUTCDate() != 1; }],
            ["%Y-%m-%d", function(d) { return d.getUTCMonth(); }],
            ["%Y", function() { return true; }]
        ]);

        this.container.updateList.push({update: this.update, context: this});

    };

    return SvgTimeAxisView;
});




define('view.svg.ordinal-axis',[
    "lib.d3",
    "lib.jquery-libs-amd"
], function(d3, $){

    /**
     * SvgOrdinalAxisView is the view component representing the y-axis in SVG terms.
     * It provides additional functions to manage interactions with the y elements.
     *
     * @class SvgOrdinalAxisView
     * @constructor
     * @module view.svg
     */

    var SvgOrdinalAxisView = function(container, options){
        var onMouseOverCallbacks, onMouseOutCallbacks, onClickCallbacks, $this, uniqueGroups, groupsRepresentation,
            axisTooltip, groupsCount;

        $this = this;
        onMouseOverCallbacks = [];
        onMouseOutCallbacks = [];
        onClickCallbacks = [];
        groupsRepresentation = {};
        groupsCount = {};

        this.magnetValues = options.magnetValues;

        this.descriptions = options.descriptions;

        this.groups = options.groups;

        this.displayGroupBlocks = options.displayGroupBlocks;

        this.orient = options.orient;

        this.container = container;

        this.range = options.range;

        this.domain = options.domain;

        this.parent = this.container.svg.append('g');


        this._computeGroupsColors = function(){
            if (this.displayGroupBlocks && this.groups){
                uniqueGroups = [];
                $.each(this.groups, function(i, el){
                    if($.inArray(el, uniqueGroups) === -1) uniqueGroups.push(el);
                });


                this.colors = (uniqueGroups.length <= 10) ? ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf"] : ["#1f77b4", "#aec7e8", "#ff7f0e", "#ffbb78", "#2ca02c", "#98df8a", "#d62728", "#ff9896", "#9467bd", "#c5b0d5", "#8c564b", "#c49c94", "#e377c2", "#f7b6d2", "#7f7f7f", "#c7c7c7", "#bcbd22", "#dbdb8d", "#17becf", "#9edae5"];
            }
        };


        this._getColorForGroup = function(group){
            var colorIndex;

            colorIndex = uniqueGroups.indexOf(group);
            return this.colors[colorIndex] || this._generateRandomColor();
        };


        this._generateRandomColor = function(){
            var letters, color;

            letters = '0123456789ABCDEF'.split('');
            color = '#';

            for (var i = 0; i < 6; i++ ) {
                color += letters[Math.round(Math.random() * 15)];
            }

            return color;
        };


        this.setRange = function(range){
            this.range = range;
            this.update();
        };

        this.setDomain = function(domain, magnetValues, descriptions, groups){
            this.domain = domain;

            if (magnetValues){
                this.magnetValues = magnetValues;
            }

            if (descriptions){
                this.descriptions = descriptions;
            }

            if (groups){
                this.groups = groups;
            }

            this.update();
        };

        this.render = function(){
            this._computeGroupsColors();
            this._buildFunction();
            this.parent.call(this.axisFunction);
            this._initOnClick();
            this._initOnMouseOver();
            this._initOnMouseOut();

            axisTooltip = $('<div></div>')
                .addClass('dnsmon-tooltip')
                .addClass('custom-jquery-ui-tooltip').hide();
            container.dom.$.append(axisTooltip);

            this._initTooltips();
        };

        this._initTooltips = function(){
            container.dom.$
                .find(".y.axis text")
                .off("mousemove")
                .off("mouseout")
                .on("mousemove", function(evt){
                    axisTooltip.show();
                    axisTooltip
                        .html(d3.select(this).attr('label'))
                        .css({
                            "top" : evt.clientY + 13,
                            "left" : evt.clientX
                        });
                })
                .on("mouseout", function(evt){

                    axisTooltip.hide();
                });
        };

        this.update = function(){
            this._computeGroupsColors();
            this._buildFunction();
            this.parent.call(this.axisFunction);

            this._initOnClick();
            this._initOnMouseOver();
            this._initOnMouseOut();
            this._initTooltips();
        };


        this._buildFunction = function(){
            var scale;

            if (this.orient == 'left'){
                this.margin = {
                    left: this.container.chart.margin.left,
                    right: 0,
                    top: this.container.chart.margin.top,
                    bottom: 0
                };
            }else{
                this.margin = {
                    left: this.container.chart.margin.left,
                    right: 0,
                    top: this.container.height() - this.container.chart.margin.bottom,
                    bottom: this.container.chart.margin.bottom
                };
            }

            scale = d3.scale
                .ordinal()
                .domain(this.domain())
                .rangeRoundBands(this.range(), options.offset, 0);


            scale.invert = function(x) {
                var domainElements, domainElement, inverseElementPosition, lastDomainElement;
                domainElements = this.domain();

                lastDomainElement = domainElements[0];

                for (var n=0,length=domainElements.length; n<length; n++){
                    domainElement = domainElements[n];

                    inverseElementPosition = scale(domainElement);
                    if (inverseElementPosition >= x){
                        break;
                    }

                    lastDomainElement = domainElement;
                }
                return lastDomainElement;
            };

            this.scale = scale;

            this.axisFunction = d3.svg
                .axis()
                .scale(this.scale);

            if ($this.displayGroupBlocks && $this.groups){
                for (var group in groupsRepresentation){
                    if (groupsRepresentation[group]){
                        groupsRepresentation[group].remove();
                        groupsRepresentation[group] = null;
                    }
                }
            }

            this.axisFunction
                .orient(this.orient)
                .tickSize(0)
                .tickFormat(function(d){
                    var thisElement, thisParentNode;
                    thisElement = d3.select(this);
                    thisParentNode = d3.select(this.parentNode);

                    if ($this.magnetValues){
                        thisElement.attr("magnet", $this.magnetValues[d.replace(" ", "_")]);
                    }

                    if ($this.descriptions){
                        thisElement.attr("label", $this.descriptions[d.replace(" ", "_")]);
                    }


                    if ($this.displayGroupBlocks && $this.groups){ // Draw group blocks
                        var group = $this.groups[d.replace(" ", "_")];

                        if (!groupsRepresentation[group]){

                            groupsCount[group] = 1;
                            groupsRepresentation[group] = thisParentNode
                                .append("svg:rect")
                                .attr("width", 4)
                                .attr("y", -$this.scale.rangeBand()/2)
                                .attr("x", -container.chart.margin.left + 1)
                                .attr("height", $this.scale.rangeBand())
                                .attr("stroke-width", 1)
                                .attr("title", group)
                                .attr("shape-rendering", "crispEdges")
                                .style("fill", function(d){
                                    return $this._getColorForGroup(group);
                                });
                        }else{
                            groupsCount[group] ++;
                            groupsRepresentation[group]
                                .attr("height", function(){
                                    return groupsCount[group] * ($this.scale.rangeBand() + ($this.scale.rangeBand()/2));
                                });

                        }
                    }

                    if (options.grid == true){
                        thisParentNode
                            .append("rect")
                            .attr("width", 500)
                            .attr("height", 1)
                            .attr("y", $this.scale.rangeBand()/2);
                    }
                    return d;
                });

            this.parent
                .attr("class", "y axis")
                .attr('transform', 'translate(' + this.margin.left + ', ' + this.margin.top+ ')');
        };

        this.getSubDomain = function(selection){
            var startElement, stopElement, domainElements, domainElement, subDomain, insideSubDomain, start, stop;

            subDomain = [];

            start = selection[0];
            stop = selection[1];

            startElement = this.scale.invert(start);

            stopElement = this.scale.invert(stop);

            domainElements = this.domain();

            insideSubDomain = false;

            for (var n=0,length=domainElements.length; n<length; n++){
                domainElement = domainElements[n];


                if (domainElement == startElement || insideSubDomain == true){
                    insideSubDomain = true;
                    subDomain.push(domainElement);
                }

                if (domainElement == stopElement){
                    insideSubDomain = false;
                    break;
                }
            }

            if (subDomain.length == 2 && subDomain[0] == subDomain[1]){
                subDomain = [subDomain[0]];
            }
            return subDomain;
        };

        this.onClick = function(callback){
            onClickCallbacks.push(callback);
        };

        this.onMouseOver = function(callback){
            onMouseOverCallbacks.push(callback);
        };

        this.onMouseOut = function(callback){
            onMouseOutCallbacks.push(callback);
        };

        this._initOnClick = function(){
            container.dom.$
                .find(".y.axis text")
                .off("click")
                .on("click", function(evt){

                    var callback, context;
                    for(var n=0,length=onClickCallbacks.length; n<length; n++){

                        callback = onClickCallbacks[n];
                        context = this;

                        callback.call(context, evt);
                    }

                });
        };


        this._initOnMouseOver = function(){
            container.dom.$
                .find(".y.axis text")
                .off("mouseover")
                .on("mouseover", function(evt){
                    var callback, context;
                    for(var n=0,length=onMouseOverCallbacks.length; n<length; n++){

                        callback = onMouseOverCallbacks[n];
                        context = this;

                        callback.call(context, evt);
                    }
                });
        };

        this._initOnMouseOut = function(){
            container.dom.$
                .find(".y.axis text")
                .off("mouseout")
                .on("mouseout", function(evt){
                    var callback, context;
                    for(var n=0,length=onMouseOutCallbacks.length; n<length; n++){

                        callback = onMouseOutCallbacks[n];
                        context = this;

                        callback.call(context, evt);
                    }
                });
        };


        this.container.updateList.push({update: this.update, context: this});

    };

    return SvgOrdinalAxisView;
});



/**
 * Created with JetBrains WebStorm.
 * User: mcandela
 * Date: 9/20/13
 * Time: 10:59 AM
 * To change this template use File | Settings | File Templates.
 */


define('view.main',[
    "env.utils",
    "lib.jquery-libs-amd",
    "lib.d3",
    "view.template-manager",
    "view.time-overview",
    "view.svg.container",
    "view.pop-up",
    "view.breadcrumbs",
    "view.control-panel",
    "controller.time",
    "view.svg.time-axis",
    "view.svg.ordinal-axis",
    "env.params-manager"
], function(utils, $, d3, TemplateManagerView, TimeOverviewView,
            SvgContainerView, PopUpView, BreadcrumbsView,
            ControlPanelView, TimeController, SvgTimeAxisView, SvgOrdinalAxisView, paramsManager){

    /**
     * MainView is a mandatory view component in charge of initialising and coordinating the whole
     * representation layer
     *
     * @class MainView
     * @constructor
     * @module view
     */

    var MainView = function(env){
        var representedTimeWindowInSeconds, loadingImageDom, config, $this, oldStartDate, oldEndDate, d3Cells;

        config = env.config;
        $this = this;


        /**
         * This method initializes the representation layer
         *
         * @method init
         * @input {Object} mainDom A dom element where to place the widget
         * @input {Object} instanceParam A vector of parameter to initialise the widget
         */

        this.init = function(mainDom, instanceParam){
            /*
             * Create the dom elements needed
             */
            this.templateManager = new TemplateManagerView(env);
            this.templateManager.createDom(mainDom, instanceParam);
            this.defaultDimensions = {width: instanceParam.width, height: instanceParam.height};

            env.container = new SvgContainerView(
                this.templateManager.dom.svgContainer,
                {
                    left: config.labelWidth,
                    right: config.chartMargins.right,
                    top: config.chartMargins.top,
                    bottom: config.chartMargins.bottom
                }, {
                    trackerPadding: config.trackerPadding,
                    animationDuration: config.zoomAnimationDuration,
                    maxHeight: env.maxHeight - config.style.controlPanelHeight - config.style.timeOverviewHeight - config.style.breadCrumbsHeight - (config.style.containerMargin * 2),
                    minHeight: env.minHeight - config.style.controlPanelHeight - config.style.timeOverviewHeight - config.style.breadCrumbsHeight - (config.style.containerMargin * 2)
                });

            /*
             * Instantiate all components
             */
            this.timeController = new TimeController(env);
            this.popUp = new PopUpView(env);
            this.controlPanel = new ControlPanelView(env);
            this.breadcrumbs = new BreadcrumbsView(env);

            this.timeOverview = new TimeOverviewView(
                {
                    margins: config.timeOverviewMargins,
                    verticalLabels: true,
                    hideIfLessThanSeconds: config.hideTimeOverviewWhenLessThanSeconds,
                    granularityLevels: config.brusherBucketLevelsMinutes,
                    width: env.container.chart.width() + config.timeOverviewMargins.left,
                    height: config.style.timeOverviewHeight
                },

                {
                    end: function(startDate, endDate, points){
                        env.params.startDate = startDate;
                        env.params.endDate = endDate;

                        if (env.isUpdatedPeriodicallyActive){ // Disable the auto refresh function if active
                            $this.controlPanel.keepUpdatedActive(false);
                        }

                        env.mainView.updateXDomain(true);
                        env.container.chart.updateBoundaries(points);
                    },

                    interaction: function(startDate, endDate, points){
                        env.params.startDate = startDate;
                        env.params.endDate = endDate;
                        env.mainView.updateXDomain(false);
                        env.container.chart.updateBoundaries(points);
                    },

                    change: function(startDate, endDate, points){
                        env.container.chart.updateBoundaries(points);
                    },

                    init: function(startDate, endDate, points){
                        env.container.chart.updateBoundaries(points);
                    }

                });

            /*
             * Push elements in the update list
             */
            env.container.updateList.push({
                update: function(){
                    var newWidth;

                    newWidth = env.container.chart.width();

                    this.templateManager.dom.timeOverviewContainer.$.width(newWidth + config.timeOverviewMargins.left);
                    this.timeOverview.width(newWidth + config.timeOverviewMargins.left);
                },
                context: this});

            env.container.updateList.push({
                update: this.controlPanel.updateWidth,
                context: this.controlPanel
            });


            /*
             * Mouse tracking globally visible (to optimize)
             */
            env.mouse = {};
            env.mainDom.$.on("mousemove", function(evt){
                var offset = $(this).offset();
                env.mouse = {x: evt.pageX - offset.left, y: evt.pageY - offset.top};
            });

            this.loadingImage(true);
            env.connector.retrieveData(this.firstDraw, this); // Get the data and start the visualization
        };


        /**
         * This method computes the best height, related to the number of rows, for the chart
         *
         * @method _computeWidgetBestHeight
         * @private
         * @return {Number} The height
         */

        this._computeWidgetBestHeight = function(){
            var height;

            height = (this.defaultDimensions.height - config.style.timeOverviewHeight - config.style.controlPanelHeight - config.style.breadCrumbsHeight - (config.style.containerMargin * 2) ) || env.container.chart.computeBestHeight(this.rows.length);
            return height;
        };


        /**
         * This method draws the chart
         *
         * @method firstDraw
         * @input {Object} A data-set
         */

        this.firstDraw = function(data){

            utils.log("Visualization starts", env.debugMode);
            this.rows = data.rows;

            /*
             * Set dimensions of the elements based on data
             */
            env.container.height(this._computeWidgetBestHeight());

            this._initAxis(data);
            this._render(data);
            this.timeController.init();
            this.timeOverview.init(this.templateManager.dom.timeOverviewContainer.plain, [env.measurementStartTime, env.measurementEndTime], [env.params.startDate, env.params.endDate]);
            this.controlPanel.render(env.mainDom);
            this.breadcrumbs.init();

            this.timeController.updateStatus();
            this.controlPanel.update();

            this.setTimeMargins(data.startDate, data.endDate);

            utils.callCallbacks(env.callbacks["load"], paramsManager.fromInternalToExternal(env.params));

            this.loadingImage(false);
            utils.log("Visualization ends", env.debugMode);
        };


        /**
         * This method computes and applies the actual color scale
         *
         * @method updateColorScales
         */

        this.updateColorScales = function(){
            var rangeInSession, showFilter, internalColorScale;

            showFilter = env.showFilter;

            if (!this.normalColorScales){
                this.normalColorScales = config.normalColorScales;
                this.selectionColorScales = config.selectionColorScales;
            }

            this.colorDomainAndRange = utils.computeColorScale(this.normalColorScales[showFilter]);
            this.selectionColorDomainAndRange = utils.computeColorScale(this.selectionColorScales[showFilter]);

            // Get the actual range from the session
            rangeInSession = env.session.getValue("color_range_" + showFilter);

            // Apply the range in session
            if (rangeInSession){
                rangeInSession = $.map(rangeInSession.split("-"), parseFloat);
                this._applyRange(rangeInSession);
            }else{
                // Save the current range
                env.session.saveValue("color_range_" + showFilter,  utils.join(this.colorDomainAndRange.valueRange, "-"));

            }

            internalColorScale = this._addOffsetToColorScale(this.colorDomainAndRange.valueRange);

            this.color = d3.scale.linear().domain(internalColorScale).range(this.colorDomainAndRange.colorRange);
            this.selectionColor = d3.scale.linear().domain(internalColorScale).range(this.selectionColorDomainAndRange.colorRange);

            //Compute the breakpoints
            this.colorDomainBreakPoints = [this.colorDomainAndRange.valueRange[2], this.colorDomainAndRange.valueRange[3]];
        };


        /**
         * This method introduces some offsets in the ranges in order to preserve the consistency with the legend
         *
         * @method _addOffsetToColorScale
         * @private
         * @input {Array} colorScale A color scale expressed as an array of values
         */

        this._addOffsetToColorScale = function(colorScale){
            return [ colorScale[0], colorScale[1], colorScale[2] + config.colorSeparationOffset, colorScale[3], colorScale[4] ];
        };


        /**
         * This method applies a new range to the color scales
         *
         * @method _applyRange
         * @private
         * @input {Array} newValuesRange A color range expressed as an array of values
         */

        this._applyRange = function(newValuesRange){
            // Update the normal color range fot this visualization type
            this.colorDomainAndRange.valueRange = newValuesRange;

            // Update the selection color range fot this visualization type
            this.selectionColorDomainAndRange.valueRange = newValuesRange;
        };


        /**
         * This method changes the color of the cells without executing a complete redraw
         *
         * @method updateOnlyColors
         * @input {Array} newValuesRange A color range expressed as an array of values
         */

        this.updateOnlyColors = function(newValuesRange){
            var $this, showFilter, internalRange;

            $this = this;

            showFilter = env.showFilter;

            this._applyRange(newValuesRange);

            internalRange = this._addOffsetToColorScale(this.colorDomainAndRange.valueRange);

            // Compute the new color scales
            this.color = d3.scale.linear().domain(internalRange).range(this.colorDomainAndRange.colorRange);
            this.selectionColor = d3.scale.linear().domain(internalRange).range(this.selectionColorDomainAndRange.colorRange);

            // Save the current range
            env.session.saveValue("color_range_" + showFilter,  utils.join(this.colorDomainAndRange.valueRange, "-"));

            this.colorDomainBreakPoints = [this.colorDomainAndRange.valueRange[2], this.colorDomainAndRange.valueRange[3]];


            d3Cells.style("fill", $this.getCellColor);
        };


        /**
         * This method initialises the svg axis of the chart
         *
         * @method _initAxis
         * @private
         * @input {Object} data A data-set
         */

        this._initAxis = function(data){
            var $this, yRowsToDomainAndMagnets;

            $this = this;
            yRowsToDomainAndMagnets = this.rowsCharacterization(this.rows);

            this.xDomain = function(){
                return [env.params.startDate, env.params.endDate];
            };

            this.xRange = function(){
                return [0, env.container.chart.width()];
            };


            this.yDomain = function(){
                return yRowsToDomainAndMagnets.domain;
            };

            this.yRange = function(){
                return [0, env.container.chart.height()];
            };

            this.updateColorScales();

            this.xAxis = new SvgTimeAxisView(env.container, {domain: this.xDomain, range: this.xRange, orient: "bottom", offset: config.xSeparationOffset});
            this.yAxis = new SvgOrdinalAxisView(env.container,
                {
                    domain: this.yDomain,
                    range: this.yRange,
                    orient: "left",
                    offset: config.ySeparationOffset,
                    magnetValues: yRowsToDomainAndMagnets.magnets,
                    descriptions: yRowsToDomainAndMagnets.descriptions,
                    groups: yRowsToDomainAndMagnets.groups,
                    displayGroupBlocks: env.grouping
                });

            this.yAxis.onMouseOver(function(evt){
                $this.selectRow(true, $(this).attr("magnet"));
            });

            this.yAxis.onMouseOut(function(evt){
                $this.selectRow(false, $(this).attr("magnet"));
            });

        };


        /**
         * This method allows to register listeners
         *
         * @method on
         * @input {String} eventType An event type
         * @input {Function} callback A callback
         */

        this.on = function(eventType, callback){
            env.callbacks[eventType].push(callback);
        };


        /**
         * This method redraws completely the chart
         *
         * @method redraw
         * @input {Function} callback A callback triggered after the redraw
         * @input {Object} context The context of the callback
         */

        this.redraw = function(callback, context){
            var context = context || this;

            this.updateColorScales();
            this.loadingImage(true);

            this.selectColumn(false);
            this.selectRow(false);

            env.connector.retrieveData(function(data){
                this.update(data);

                this.loadingImage(false);

                if (callback != null){
                    callback.call(context, data);
                }
            }, this);
        };


        /**
         * This method selects a column of the chart
         *
         * @method selectColumn
         * @input {Boolean} selected True if selected
         * @input {Number} position The x position of the selection
         * @input {Number} width The width of the selection
         */

        this.selectColumn = function(selected, position, width){
            var verticalSelectorPadding, halfVerticalSelectorPadding;

            clearTimeout(this._selectColumnTimer);

            this._selectColumnTimer = setTimeout(function(){

                if (selected && env.timeEventsActive){

                    verticalSelectorPadding = config.style.verticalSelectorPadding;
                    halfVerticalSelectorPadding = verticalSelectorPadding / 2;
                    width += verticalSelectorPadding;

                    if (env.retrievedAggregationLevel == 0){ // Center the vertical selector for the native resolution
                        position += (width / 2); // Center it on an half of the cell
                        width = 1;
                    }

                    env.container.chart.chartSelectorVertical
                        .attr("transform", "translate(" + (position - halfVerticalSelectorPadding) + ", " + 0 + ")")
                        .style("stroke-width", ((width == 1) ? "1px" : config.style.selectorRectStokeWidth))
                        .style("display", "block")
                        .attr("width", width);
                }else{
                    env.container.svg
                        .select("." + config.domClasses.chartSelectorVertical)
                        .style("display", "none");
                }

            }, ((selected) ? config.selectRowColumnTimer : 0));

        };


        /**
         * This method selects a row of the chart starting from a label
         *
         * @method _selectLabel
         * @private
         * @input {Boolean} selected True if selected
         * @input {String} rowId The ID of a row
         */

        this._selectLabel = function(selected, rowId){
            var $this = this;

            if (env.timeEventsActive){
                if ($this._previousSelectedYLabel){
                    $this._previousSelectedYLabel
                        .css("font-size", config.style.axisLabelsFontSizeDefault)
                        .css("font-weight", "normal");
                }

                if (selected){
                    env.mainDom.$.find('text').each(function(){
                        var label = $(this);
                        if ((label.attr("magnet") == rowId)){

                            label
                                .css("font-size", config.style.axisLabelsFontSizeSelected)
                                .css("font-weight", "bold");

                            $this._previousSelectedYLabel = label;
                        }
                    });
                }
            }
        };


        /**
         * This method selects a row of the chart
         *
         * @method selectRow
         * @input {Boolean} selected True if selected
         * @input {String} rowId The ID of a row
         */

        this.selectRow = function(selected, rowId){
            var $this, chartSvg;

            $this = this;
            clearTimeout(this._selectRowTimer);

            this._selectRowTimer = setTimeout(function(){
                $this._selectLabel(selected, rowId);

                chartSvg = env.container.chart.svg;

                if (selected  && env.timeEventsActive){

                    if (!env.lowProfile){

                        chartSvg
                            .selectAll(".cell")
                            .each(function(){
                                var cell, cellClasses;
                                cell = d3.select(this);
                                cellClasses = cell.attr("class").split(" ");

                                if (cellClasses[2] != "origin" + rowId){

                                    cell
                                        .transition()
                                        .duration(((selected) ? config.hoverTransitionDuration : 0))
                                        .style({
                                            "opacity": config.cellUnselectedOpacity
                                        });

                                }else{

                                    cell
                                        .style({
                                            "opacity": 1,
                                            "stroke": "#616161",
                                            "stroke-width": "1px"
                                        });

                                }

                            });

                    } else {

                        if ($this._previusoSelectedRowCells){
                            $this._previusoSelectedRowCells
                                .style("stroke-width", "0px");
                        }

                        $this._previusoSelectedRowCells = chartSvg
                            .selectAll(".origin" + rowId)
                            .style("stroke", "#616161")
                            .style("stroke-width", "1px");
                    }

                }else{

                    if (!env.lowProfile){
                        chartSvg
                            .selectAll(".cell")
                            .style("opacity", "1")
                            .style("stroke-width", "0px");
                    }else{
                        if ($this._previusoSelectedRowCells){
                            $this._previusoSelectedRowCells
                                .style("stroke-width", "0px");
                        }
                    }

                    delete $this._previusoSelectedRowCells;
                }
            }, (selected) ? config.selectRowColumnTimer : 0);

        };


        /**
         * This method returns the values of the selected cell related to the current type of visualisation
         *
         * @method getCellValue
         * @input {Object} cellData The d3 cell data object
         * @return {String} The value
         */

        this.getCellValue = function(cellData){
            var value, showFilter, excludeErrors;

            showFilter = env.showFilter;
            excludeErrors = (env.session.getValue('exclude-errors') == 'true'); // ...SessionManager manages only strings

            switch(showFilter){
                case 'pls':
                    value = ((excludeErrors) ? cellData.getNumberCorrectResponses() : cellData.getPacketLoss());
                    break;

                case 'rtt':
                    value = cellData.getResponseTime();
                    break;

                case 'relative-rtt':
                    value = cellData.getRelativeResponseTime();
                    break;
            }

            return value;
        };


        /**
         * This method shows or hides the throbber image
         *
         * @method loadingImage
         * @input {Boolean} isVisible True if visible
         */

        this.loadingImage = function(isVisible){
            var moveLoadingImage, mouseCoords;

            loadingImageDom = this.templateManager.dom.loadingImage.$;
            mouseCoords = env.mouse;
            moveLoadingImage = this._moveLoadingImage;

            if (isVisible){
                loadingImageDom
                    .css({
                        "left": mouseCoords.x,
                        "top": mouseCoords.y
                    })
                    .show();
                env.document.$.on("mousemove", moveLoadingImage);
            }else{
                loadingImageDom.hide();
                env.document.$.off("mousemove", moveLoadingImage);
            }
        };


        /**
         * This method moves the throbber image in order to follow the cursor
         *
         * @method _moveLoadingImage
         * @private
         * @input {Object} evt A JavaScript event
         */

        this._moveLoadingImage = function(evt){
            var mouseCoords;

            mouseCoords = env.mouse;

            loadingImageDom
                .css({
                    "left": mouseCoords.x,
                    "top": mouseCoords.y
                });
        };


        /**
         * This method updates the time domain
         *
         * @method updateXDomain
         * @input {Object} pullData If true a new data-set will be requested
         */

        this.updateXDomain = function(pullData){
            var chart, elementIndex, shakeIterations, shakeDuration, shakeTransform, shakingElementsReduction;

            chart = env.container.chart;

            if (env.params.startDate < env.measurementStartTime || env.params.endDate > env.measurementEndTime){ // Check the boundaries
                return false;
            }

            this.xAxis.setDomain(function(){
                return [env.params.startDate, env.params.endDate];
            });

            this.timeOverview.updateSelection([env.params.startDate, env.params.endDate]);

            if (!chart.hidden){
                if (env.lowProfile == true || !config.shakeActive) {
                    chart.dom.$.fadeTo(config.redrawFadeOut, 0.4);
                    chart.hidden = true;
                }else{

                    shakeTransform = function(d){
                        var x, y;

                        x = d.optional.xPosition + Math.floor(Math.random() * config.shakeTuner);
                        y = d.optional.yPosition + Math.floor(Math.random() * config.shakeTuner);

                        return "translate(" + x + "," + y + ")";
                    };

                    elementIndex = 0;
                    shakeIterations = 5;
                    shakingElementsReduction = (d3Cells.length < 40) ? 1 : 4;
                    shakeDuration = config.shakeDuration/shakeIterations;

                    d3Cells
                        .each(function(d){
                            var that = this;
                            if (elementIndex % shakingElementsReduction == 0){
                                for (var n=5; n>0; n--){
                                    setTimeout(
                                        function(){
                                            d3.select(that)
                                                .attr("transform", shakeTransform);
                                        },
                                            shakeDuration * n
                                    );
                                }
                            }
                            elementIndex++;
                        });

                }
            }

            if (pullData){
                this.redraw();
            }
        };


        /**
         * This support method lists all the steps for a complete redraw
         *
         * @method _render
         * @private
         * @input {Object} data A data-set
         */

        this._render = function(data){
            this.xAxis.render();
            this.yAxis.render();
            this._setLowProfile(data);
            this._renderCells(data);

            env.history.init();
        };


        /**
         * This support method draws all the cell
         *
         * @method _renderCells
         * @private
         * @input {Object} data A data-set
         */

        this._renderCells = function(data){
            var cellsTransform, cellWidth, cellHeight, rect, $this, cellClass, transformSet, orderingFunction, pxToSec,
                cellTranslateLeft, cellsSVG;

            $this = this;

            cellTranslateLeft = (env.retrievedAggregationLevel == 0) ? (config.cellsMinWidth / 2) : 0;

            representedTimeWindowInSeconds = env.timeWindowSeconds;

            orderingFunction = function(d){
                return d.row.id + "-" + d.group + "-" + d.time;
            };

            cellsTransform = function(d) {
                d.selected = false;
                d.optional.xPosition = $this.xAxis.scale(d.time) - cellTranslateLeft;
                d.optional.xPosition = (d.optional.xPosition < 0) ? 0 : d.optional.xPosition; // OPTIMISATION: don't call Math.max
                d.optional.yPosition = $this.yAxis.scale(d.row.label);
                return "translate(" + d.optional.xPosition + "," + d.optional.yPosition + ")";
            };

            cellClass = function(d){
                return 'cell time_' + d.time.getTime() + ' origin' + d.row.id;
            };

            pxToSec = (env.container.chart.width() / env.timeWindowSeconds);

            cellsSVG = env.container.chart.svg.selectAll("rect.cell");

            cellWidth = function(cellData){
                var cellWidth;

                if (cellData.endTime){
                    cellWidth = (pxToSec * ((cellData.endTime - cellData.time)/1000)) - config.xCellsMargin;
                }else{
                    cellWidth = (pxToSec * (env.samplingFrequency/100) * config.nativeCellWidthFrequencyPercentage) - config.xCellsMargin;
                }

                if (cellWidth < config.cellsMinWidth){
                    cellWidth = config.cellsMinWidth;
                }
                return cellWidth;
            };


            cellHeight = function(d){

                if (window.dynamicHeight == true && d.getPacketLoss() > 66 && d.getPacketLoss() < 99){
                    var height = $this.yAxis.scale.rangeBand() * config.yCellsMargin;
                    return Math.min(d.respondingTime, height);
                }
                return $this.yAxis.scale.rangeBand() - ($this.yAxis.scale.rangeBand() * config.yCellsMargin);
            };


            this.cellWidth = cellWidth;

            d3Cells = cellsSVG
                .data(data.cells, orderingFunction);

            d3Cells
                .exit()
                .on('click', null)
                .on('mousemove', null)
                .on('mouseenter', null)
                .on('mouseout', null)
                .remove();

            d3Cells
                .enter()
                .append("rect")
                .attr("class", cellClass)
                .attr("rx", 2)
                .attr("ry", 2)
                .attr("y", 0)
                .style("fill", $this.getCellColor)
                .style("cursor", config.style.selectionCursor)
                .on("mousemove", function(d){

                    if ($this._mouseEntered != true){ // To improve performance

                        /*
                         * The block under (repetition of the mousenter) tries to avoid bugs in some browser that sometimes skip the mouseenter event
                         */
                        var xPosition, columnWidth;

                        columnWidth = parseFloat(d3.select(this).attr("width"));
                        xPosition = d.optional.xPosition;

                        $this.selectRow(true, d.row.id);
                        $this.selectColumn(true, xPosition, columnWidth);
                        $this._mouseEntered = true;

                    }else{

                        if (env.timeEventsActive){
                            var mouseCursor, mouseCursorFormatted;
                            mouseCursor = d3.mouse(env.container.dom.plain);
                            mouseCursorFormatted = {x: mouseCursor[0], y: mouseCursor[1]};
                            $this.popUp.show(d, mouseCursorFormatted);
                        }
                    }
                })
                .on("mouseenter", function(d){

                    if (env.timeEventsActive){
                        var xPosition, columnWidth;

                        columnWidth = parseFloat(d3.select(this).attr("width"));
                        xPosition = d.optional.xPosition;

                        $this.popUp.hide();
                        $this.selectRow(true, d.row.id);
                        $this.selectColumn(true, xPosition, columnWidth);
                        $this._mouseEntered = true;
                    }

                })
                .on("mouseout", function(d){

                    if (env.timeEventsActive){
                        $this.popUp.hide();

                        $this.selectRow(false, d.row.id);
                        $this.selectColumn(false);

                        $this._mouseEntered = false;
                    }
                });


            if (this.drawn && env.lowProfile == false && this.previosNumberOfCells > d3Cells[0].length){
                transformSet = d3Cells
                    .transition()
                    .duration(config.zoomAnimationDuration)
                    .attr("width", cellWidth)
                    .attr("height", cellHeight)
                    .attr("transform", cellsTransform)
                    .style("stroke-width", "0px")
                    .delay(config.zoomAnimationDelay)
                    .style("fill", $this.getCellColor);
            }else{
                d3Cells
                    .attr("width", cellWidth)
                    .attr("height", cellHeight)
                    .attr("transform", cellsTransform)
                    .style("stroke-width", "0px")
                    .style("fill", $this.getCellColor);
            }

            this.previosNumberOfCells = d3Cells[0].length;

            this.drawn = true;

            utils.log("Number of cell displayed: " + data.cells.length, env.debugMode);

//            delete this.d3Cells;
        };


        /**
         * This method computes the color of a given cell
         *
         * @method getCellColor
         * @input {Object} cell A cell object
         */

        this.getCellColor = function(cell){
            var value, color;

            value = $this.getCellValue(cell);

            if (value != null){
                color = $this.color(value);
            }else{
                color = config.style.noRttAvailableColor;
            }

            return color;
        };


        /**
         * This method computes the color of a given cell when it is selected
         *
         * @method getSelectedCellColor
         * @input {Object} cell A cell object
         */

        this.getSelectedCellColor = function(cell){
            var value, color;

            value = $this.getCellValue(cell);

            if (value != null){
                color = $this.selectionColor(value);
            }else{
                color = config.style.noRttAvailableSelectionColor;
            }

            return color;
        };


        /**
         * This method updates the chart applying the new data-set
         *
         * @method update
         * @input {Object} data A data-set
         */

        this.update = function(data){
            utils.log("Visualization update starts", env.debugMode);
            var yRowsToDomainAndMagnets;

            this.rows = data.rows;

            env.timeEventsActive = true;

            this.timeController.updateStatus();
            this.controlPanel.update();
            env.history.update();

            env.container.height(this._computeWidgetBestHeight());

            this.setTimeMargins(data.startDate, data.endDate);

            yRowsToDomainAndMagnets = this.rowsCharacterization(this.rows);

            this.xAxis.setDomain(function(){
                return [env.params.startDate, env.params.endDate];
            });

            this.yAxis.setDomain(
                function(){
                    return yRowsToDomainAndMagnets.domain;
                },
                yRowsToDomainAndMagnets.magnets,
                yRowsToDomainAndMagnets.descriptions,
                yRowsToDomainAndMagnets.groups
            );

            this._setLowProfile(data);
            this._renderCells(data);

            if (env.container.chart.hidden == true){
                env.container.chart.dom.$.fadeTo(config.redrawFadeIn, 1);
                env.container.chart.hidden = false;
            }

            this.timeOverview.update([env.measurementStartTime, env.measurementEndTime], [env.params.startDate, env.params.endDate]);

            utils.callCallbacks(env.callbacks["change"], paramsManager.fromInternalToExternal(env.params)); // Call all the "change" callbacks

            utils.log("Visualization update ends", env.debugMode);
        };


        /**
         * This method sets the right profile mode related to the data-set dimension
         *
         * @method _setLowProfile
         * @private
         * @input {Object} data A data-set
         */

        this._setLowProfile = function(data){
            var lowProfileLimitations;
            lowProfileLimitations = config.lowProfileLimitations;

            env.lowProfile = (config.forceLowProfile) || (lowProfileLimitations.numerOfCells < data.cells.length);
        };


        /**
         * This method computes all the information of the y-axis items
         *
         * @method rowsCharacterization
         * @input {Object} data A data-set of rows
         * @return {Object} A map of characterizations (i.e. domain, magnets, descriptions, groups)
         */

        this.rowsCharacterization = function(list){
            var domain, magnets, domainElement, idParsed, descriptions, groups;
            domain = [];
            magnets = {};
            descriptions = {};
            groups = {};

            list = list.sort(function(a, b) {

                if (a.group != ""){
                    a = a.group + "-" + a.internalOrder;
                    b = b.group + "-" + b.internalOrder;
                }else{
                    a = parseInt(a.id);
                    b = parseInt(b.id);
                }
                return a < b ? -1 : a > b ? 1 : 0;
            });


            for (var n=0,length=list.length; n<length; n++){
                domainElement = list[n];
                if (domainElement.label){
                    domain.push(domainElement.label);
                    idParsed = domainElement.label.replace(" ", "_");
                    magnets[idParsed] = domainElement.id;
                    descriptions[idParsed] = domainElement.description;
                    groups[idParsed] = domainElement.group;
                }
            }
            return {
                domain: domain,
                magnets: magnets,
                descriptions: descriptions,
                groups: groups
            };
        };


        /**
         * This method shows a textual message to the user
         *
         * @method showMessage
         * @input {String} text The message
         */

        this.showMessage = function(text){
            if (text == ''){
                this.templateManager.dom.message.$.hide();
            }else{
                this.templateManager.dom.message.$.html(text).show().fadeOut(config.messagesFadeOutSeconds);
            }
        };


        /**
         * This method applies new margins to the current time window
         *
         * @method setTimeMargins
         * @input {Date} start The start date
         * @input {Date} end The end date
         */

        this.setTimeMargins = function(start, end){
            var timeMarginsContainer, timeMargins, startDateDiv, endDateDiv;

            timeMarginsContainer = this.templateManager.dom.timeMargins.$;
            timeMargins = timeMarginsContainer.children();

            startDateDiv = timeMargins.first();
            endDateDiv = timeMargins.last();

            if (oldStartDate != start) {

                startDateDiv.html(env.lang.fromTimeRange + ' ' + utils.dateToStringShort(start));
                startDateDiv.toggleClass("updated");
                setTimeout(function () {startDateDiv.toggleClass("updated");}, config.aggregationLegendUpdatedDuration);

            }
            if (oldEndDate != end){

                if (!env.isUpdatedPeriodicallyActive){
                    endDateDiv.html(env.lang.toTimeRange + ' ' + utils.dateToStringShort(end) + " UTC");
                }else{
                    endDateDiv.html(env.lang.lastUpdateAt + ' ' + utils.dateToStringShort(env.lastUpdate) + " UTC");
                }
                endDateDiv.toggleClass("updated");
                setTimeout(function(){endDateDiv.toggleClass("updated");}, config.aggregationLegendUpdatedDuration);

            }

            oldStartDate = start;
            oldEndDate = end;
        };

    };

    return MainView;
});
/**
 * Created with JetBrains WebStorm.
 * User: mcandela
 * Date: 10/17/13
 * Time: 11:45 AM
 * To change this template use File | Settings | File Templates.
 */

/*
 *
 */
define('model.cell',["env.utils"], function(utils){

    /**
     * Cell is the model object for a cell.
     *
     * @class Cell
     * @constructor
     * @module model
     */

    var Cell = function(row, time){

        this.row = row;

        this.time = time;

        this.id = this.getId();

        this.optional = {};
    };


    /**
     * This method returns the packet loss of this cell
     *
     * @method getPacketLoss
     * @return {Number} A percentage
     */

    Cell.prototype.getPacketLoss = function(){
        return this.loss;
    };


    /**
     * This method returns the errors of the dns response of this cell
     *
     * @method getErrors
     * @return {Object} A Map of errors
     */

    Cell.prototype.getErrors = function(){
        return this.errors;
    };


    /**
     * This method returns the number of the correct dns responses of this cell
     *
     * @method getNumberCorrectResponses
     * @return {Number} The number of the correct responses
     */

    Cell.prototype.getNumberCorrectResponses = function(){
        return this.numberCorrectResponses;
    };


    /**
     * This method returns the response time of this cell
     *
     * @method getResponseTime
     * @return {Number} An amount of milliseconds
     */

    Cell.prototype.getResponseTime = function(){
        return this.respondingTime;
    };


    /**
     * This method returns the relative response time of this cell.
     * The relative response time is the percentage of increase from the minimum response time of the cell's row.
     *
     * @method getRelativeResponseTime
     * @return {Number} A percentage
     */

    Cell.prototype.getRelativeResponseTime = function(){
        return (this.respondingTime == null) ? null : (((this.respondingTime - this.row.minimumResponseTime) / this.row.minimumResponseTime) * 100);
    };


    /**
     * This method returns the unique ID of this cell
     *
     * @method getId
     * @return {String} A unique ID
     */

    Cell.prototype.getId = function(){
        return "" + this.row.id + "_" + this.time.getTime();
    };


    /**
     * This method returns a string describing this cell
     *
     * @method toString
     * @return {String} A string describing this cell
     */

    Cell.prototype.toString = function(){
        var string = "";

        if (this.respondingTime) {
            string += "RTT: " + this.respondingTime + "<br>";
        }

        string += "Packet Loss: " + this.loss;

        return string;
    };


    /**
     * This method returns an array of strings describing this cell in a multi-line way
     *
     * @method toArrayString
     * @return {Array} An array of strings
     */

    Cell.prototype.toArrayString = function(){
        var stringArray, type;

        stringArray = [];

        switch(this.row.___type___){

            case "server":
                type = "Server: ";
                break;

            case "probe":
                type = "Probe: ";
                break;
        }

        stringArray.push(type + this.row.label);
        if (this.endTime){
            stringArray.push("From " + utils.dateToString(this.time));
            stringArray.push("To " + utils.dateToString(this.endTime));
        }else{
            stringArray.push("At " + utils.dateToString(this.time));
        }

        stringArray.push('RTT' + ((this.sent == 1) ? '' : ' (median)') + ': ' +((this.respondingTime) ? this.respondingTime + ' ms' : 'NA'));
        stringArray.push("Queries sent: " + this.sent);
        stringArray.push("Unanswered queries: " + this.loss + "%");

        if (this.errors["ServFail"]) stringArray.push("\"ServFail\" errors: " + this.errors["ServFail"]);
        if (this.errors["NXDomain"]) stringArray.push("\"NXDomain\" errors: " + this.errors["NXDomain"]);
        if (this.errors["Refused"]) stringArray.push("\"Refused\" errors: " + this.errors["Refused"]);
        if (this.errors["others"]) stringArray.push("Other errors: " + this.errors["others"]);
        return stringArray;
    };

    return Cell;
});


/**
 * Created with JetBrains WebStorm.
 * User: mcandela
 * Date: 10/17/13
 * Time: 11:45 AM
 * To change this template use File | Settings | File Templates.
 */

define('model.row',[], function(){

    /**
     * Row is the model object for a row.
     *
     * @class Row
     * @constructor
     * @module model
     */

    var Row = function(id, label){
        this.id = id;
        this.label = label;
        this.cells = [];

        this.group = "";

        this.minimumResponseTime = null;
        this.measurementId = null;
    };

    return Row;
});
define('connector.atlas.rest',[
    "env.utils",
    "lib.jquery-libs-amd"
], function(utils, $){

    /**
     * Connector is in charge of connecting the data-apis and providing a JSON format to the layers over.
     *
     * @class Connector
     * @constructor
     * @module connector.Atlas
     */

    var Connector = function(env){
        var perServerDataUrl, serversDataUrl, nativeDnsResultDataUrl, closesttraceroutesDataUrl, config,
            commonServer, closestNsidDataUrl, xhrEnvelop;

        config = env.config;

        this.maxNumberOfCells = env.muxNumberOfCells || config.maxNumberOfCells;
        env.downoadedBytes = 0;

        //weir-dev
        commonServer = "https://atlas.ripe.net/dnsmon/api";

        perServerDataUrl = (typeof DNSMON_PROBES_DATA_API_URL === "undefined") ? commonServer + "/probes" : DNSMON_PROBES_DATA_API_URL;
        serversDataUrl = (typeof DNSMON_SERVERS_DATA_API_URL === "undefined") ? commonServer + "/servers" : DNSMON_SERVERS_DATA_API_URL;

        nativeDnsResultDataUrl = (typeof DNSMON_ATLAS_DATA_API_URL === "undefined") ? commonServer + "/atlas-data" : DNSMON_ATLAS_DATA_API_URL;
        closesttraceroutesDataUrl = (typeof DNSMON_ATLAS_TRACEROUTE_API_URL === "undefined") ? commonServer + "/atlas-data" : DNSMON_ATLAS_TRACEROUTE_API_URL;
        closestNsidDataUrl = (typeof DNSMON_ATLAS_NSID_API_URL === "undefined") ? commonServer + "/atlas-data" : DNSMON_ATLAS_NSID_API_URL;

        this.getDataUrl = function(params){

            utils.log('Queried for:', env.debugMode);
            utils.log(params, env.debugMode);
            var url = "";

            if (params.type == "zone-servers"){

                utils.log("Data-api type: multi-server-data", env.debugMode);

                url = serversDataUrl;
                url += (params.zone) ? "?group=" + params.zone : "";
                url += (params.selectedRows != '') ? "&servers=" + params.selectedRows : "";

                url += (!params.aggregationLevel) ? "" : "&min_aggregation=" + params.aggregationLevel;

                url += (params.startTime) ? "&start_time=" + params.startTime : "";
                url += (params.endTime) ? "&end_time=" + params.endTime : "";

                url += (!params.startTime && !params.endTime && params.timeWindow) ? "&default_time_period=" + params.timeWindow : "";

                url += (params.ipVersion) ? "&ip_version=" + params.ipVersion : "";
                url += (params.isTcp) ? "&is_tcp=" + params.isTcp : "";

                url += (env.maxNumberOfCellsPerRow) ? "&max_samples_per_row=" + env.maxNumberOfCellsPerRow : "";
                url += (this.maxNumberOfCells) ? "&max_samples=" + this.maxNumberOfCells : "";

            } else if(params.type == "server-probes"){

                utils.log("Data-api type: single-server-data", env.debugMode);

                url = perServerDataUrl
                    + "?server=" + params.server;

                url += (params.zone) ? "&group=" + params.zone : "";

                url += "&filter_probes=" + params.filterProbes;

                url += (!params.aggregationLevel) ? "" : "&min_aggregation=" + params.aggregationLevel;

                url += (params.selectedRows != "") ? "&probes=" + params.selectedRows : "";

                url += (params.startTime) ? "&start_time=" + params.startTime : "";
                url += (params.endTime) ? "&end_time=" + params.endTime : "";

                url += (!params.startTime && !params.endTime && params.timeWindow) ? "&default_time_period=" + params.timeWindow : "";

                url += (params.ipVersion) ? "&ip_version=" + params.ipVersion : "";
                url += (params.isTcp) ? "&is_tcp=" + params.isTcp : "";

                url += (env.maxNumberOfCellsPerRow) ? "&max_samples_per_row=" + env.maxNumberOfCellsPerRow : "";
                url += (this.maxNumberOfCells) ? "&max_samples=" + this.maxNumberOfCells : "";
            }

            //if (env.stats) url += "&stats=" +  env.stats;
            return url;
        };

        /**
         * It is strongly dedicated to a particular data-api.
         * From top to bottom: given some data-api valid parameters, it provides a method to connect to the data-api and query for that parameters.
         * From bottom to top: provides the raw JSON to the received callback.
         *
         * @method retrieveData
         * @param {Object} params A parameters vector valid for the data-api
         * @param {Function} callback A function taking the retrieved data as input when it is ready
         * @param {Object} context The context of the callback
         */

        this.retrieveData = function(params, callback, context){
            var dataUrl, externalParams;

            externalParams = params;

            dataUrl = this.getDataUrl(externalParams);

            utils.log('Ajax call: ' + dataUrl, env.debugMode);

//            for (var prop in xhrEnvelop) {
//                delete xhrEnvelop[prop];
//            }


            xhrEnvelop = $.ajax({
                dataType: "jsonp",
                url: dataUrl,
                cache : false,
                method : 'get',
                timeout : config.connectionTimeout,

                success: function(data){

                    utils.log("Data retrieved", env.debugMode);

                    if (env.debugMode){
                        env.lastDownloadBytes = utils.objectSize(data);
                        env.downoadedBytes += env.lastDownloadBytes;
                    }

                    data.type = params.type;
                    env.lastDownload = new Date();
                    callback.call(context, data);
                },

                error: function(XMLHttpRequest, textStatus, errorThrown) {
                    var emptyDataSet;

                    utils.log("Connection failed", env.debugMode);
                    emptyDataSet = {
                        messages: [
                            {type: "connection-fail", text: errorThrown}
                        ]
                    };

                    callback.call(context, emptyDataSet);
                }
            });

        };


        /**
         * Get the DNS response from the data-api
         *
         * @method getNativeDnsResult
         * @param {Number} msmId The id of the measurement
         * @param {Number} prbId The id of the probe
         * @param {Number} timestamp A UNIX timestamp
         * @param {Function} callback A function taking the retrieved data as input when it is ready
         * @param {Object} context The context of the callback
         */

        this.getNativeDnsResult = function(msmId, prbId, timestamp, callback, context){
            var dataUrl, xhrEnvelop, cleanXhrEnvelop;

            dataUrl = utils.setParam('msm_id', msmId, nativeDnsResultDataUrl);
            dataUrl = utils.setParam('prb_id', prbId, dataUrl);
            dataUrl = utils.setParam('timestamp', timestamp, dataUrl);

            utils.log('Retrieve native DNS data: '+ dataUrl, env.debugMode);

            cleanXhrEnvelop = function(xhrEnvelop) {
                for (var prop in xhrEnvelop) {
                    delete xhrEnvelop[prop];
                }
                xhrEnvelop = null;
            };

            xhrEnvelop = $.ajax({
                dataType: "jsonp",
                url: dataUrl,
                cache: false,
                timeout : config.connectionTimeout,
                success: function(data){
                    utils.log("Native DNS data retrieved", env.debugMode);

                    if (env.debugMode){
                        env.lastDownloadBytes = utils.objectSize(data);
                        env.downoadedBytes += env.lastDownloadBytes;
                    }

                    callback.call(context, data);

                    // Force garbage collector
                    for (var prop in data){
                        delete data[prop];
                    }
                    data = null;
                },

                fail: function(){
                    utils.log("It is not possible to retrieve native DNS data", env.debugMode);
                },
                complete: cleanXhrEnvelop
            });

        };


        /**
         * Get the closest traceroutes data from the data-api
         *
         * @method getClosestTraceroutes
         * @param {Number} msmId The id of the measurement
         * @param {Number} prbId The id of the probe
         * @param {Number} timestamp A UNIX timestamp
         * @param {Function} callback A function taking the retrieved data as input when it is ready
         * @param {Object} context The context of the callback
         */

        this.getClosestTraceroutes = function(msmId, prbId, timestamp, callback, context){
            var dataUrl, xhrEnvelop, cleanXhrEnvelop;

            dataUrl = utils.setParam('msm_id', msmId, closesttraceroutesDataUrl);
            dataUrl = utils.setParam('prb_id', prbId, dataUrl);
            dataUrl = utils.setParam('timestamp', timestamp, dataUrl);
            dataUrl = utils.setParam('surrounding', config.tracerouteSurrounding, dataUrl);
            dataUrl = utils.setParam('render', "false", dataUrl);

            utils.log('Retrieve traceroute data: '+ dataUrl, env.debugMode);

            cleanXhrEnvelop = function(xhrEnvelop) {
                for (var prop in xhrEnvelop) {
                    delete xhrEnvelop[prop];
                }
                xhrEnvelop = null;
            };

            xhrEnvelop = $.ajax({
                dataType: "jsonp",
                url: dataUrl,
                cache: false,
                timeout : config.connectionTimeout,
                success: function(data){
                    utils.log("Traceroute data retrieved", env.debugMode);

                    if (env.debugMode){
                        env.lastDownloadBytes = utils.objectSize(data);
                        env.downoadedBytes += env.lastDownloadBytes;
                    }

                    callback.call(context, data);

                    // Force garbage collector
                    for (var prop in data){
                        delete data[prop];
                    }
                    data = null;
                },

                fail: function(){
                    utils.log("It is not possible to retrieve traceroute data", env.debugMode);
                },

                complete: cleanXhrEnvelop
            });

        };


        /**
         * Get the closest hostname.bind data from the data-api
         *
         * @method getClosestHostnameBind
         * @param {Number} msmId The id of the measurement
         * @param {Number} prbId The id of the probe
         * @param {Number} timestamp A UNIX timestamp
         * @param {Function} callback A function taking the retrieved data as input when it is ready
         * @param {Object} context The context of the callback
         */

        this.getClosestHostnameBind = function(msmId, prbId, timestamp, callback, context){
            var dataUrl, xhrEnvelop, cleanXhrEnvelop;

            dataUrl = utils.setParam('msm_id', msmId, closestNsidDataUrl);
            dataUrl = utils.setParam('prb_id', prbId, dataUrl);
            dataUrl = utils.setParam('timestamp', timestamp, dataUrl);
            dataUrl = utils.setParam('surrounding', config.nsidSurrounding, dataUrl);
            dataUrl = utils.setParam('render', "false", dataUrl);

            utils.log('Retrieve traceroute data: '+ dataUrl, env.debugMode);

            cleanXhrEnvelop = function(xhrEnvelop) {
                for (var prop in xhrEnvelop) {
                    delete xhrEnvelop[prop];
                }
                xhrEnvelop = null;
            };

            xhrEnvelop = $.ajax({
                dataType: "jsonp",
                url: dataUrl,
                cache: false,
                timeout : config.connectionTimeout,
                success: function(data){
                    utils.log("hostname.bind data retrieved", env.debugMode);

                    if (env.debugMode){
                        env.lastDownloadBytes = utils.objectSize(data);
                        env.downoadedBytes += env.lastDownloadBytes;
                    }

                    callback.call(context, data);

                    // Force garbage collector
                    for (var prop in data){
                        delete data[prop];
                    }
                    data = null;
                },

                fail: function(){
                    utils.log("It is not possible to retrieve hostname.bind data", env.debugMode);
                },

                complete: cleanXhrEnvelop
            });
        };
    };

    return Connector;
});

/**
 * Created with JetBrains WebStorm.
 * User: mcandela
 * Date: 10/16/13
 * Time: 4:27 PM
 * To change this template use File | Settings | File Templates.
 */

define('connector.atlas.error-handler',[
    "env.utils",
    "lib.jquery-libs-amd",
    "connector.atlas.rest"
], function(utils, $, Connector){

    /**
     * ErrorsHandlerConnectorAtlas checks the validity of the JSON input and handle errors raised by the data-api.
     *
     * @class ErrorsHandlerConnectorAtlas
     * @constructor
     * @module connector.Atlas
     */

    var ErrorsHandlerConnectorAtlas = function(env){
        var connector, errorsNomenclature, responsivenessTimer, lastRequestWorkingParams,
            restoringAttempt, config, firstConnection;

        connector = new Connector(env);
        config = env.config;
        firstConnection = true;

        this.globalErrorState = 0; // 0 - No error

        errorsNomenclature = {
            messages: "messages",

            message: {
                text: "text",
                type: "type"
            }
        };

        /**
         * From bottom to top: check the JSON validity and handles the error raised by the data-api.
         *
         * @method retrieveData
         * @param {Object} params A params vector
         * @param {Function} callback A function taking the retrieved data as input when it is ready
         * @param {Object} context The context of the callback
         */

        this.retrieveData = function(params, callback, context){

            this.globalErrorState = 0; // Reset the global error state

            this._responsivenessCheck();

            connector.retrieveData(params,
                function(data){

                    clearTimeout(responsivenessTimer);

                    this._handleDataApiErrors(data); // This can change the global error state

                    if (this.globalErrorState < 3){ // retry still active

                        if (this.globalErrorState <= 1){ //If there are no blocking errors

                            if (this._checkDataFormat(data)){ //If the json format is correct

                                lastRequestWorkingParams = utils.lightClone(params); // Store last working request
                                firstConnection = false;

                                callback.call(context, data);

                            }else{ //If the json format is malformed

                                this._handle("error", env.lang.malformedDataset);
                                env.mainView.loadingImage(false);

                            }

                        }else { // There is at least one blocking error

                            this.globalErrorState = 0; // Reset it for the next error

                            if (env.isUpdatedPeriodicallyActive == false) { // Network error with auto-update disabled
                                this._tryToReconnect(params, callback, context);
                            } else {
                                env.mainView.showMessage(env.lang.lastQueryFails);
                            }
                        }
                    }

                }, this);

        };


        /**
         * This method tries to reconnect to the server in case of failures and provides a feedback to the user.
         *
         * @method _tryToReconnect
         * @private
         * @param {Object} params A params vector
         * @param {Function} callback A function taking the retrieved data as input when it is ready
         * @param {Object} context The context of the callback
         */

        this._tryToReconnect = function(params, callback, context){
            var $this;

            $this = this;
            setTimeout(function(){

                env.mainView.showMessage(env.lang.waitingConnection);

                utils.log('Try to reconnect', env.debugMode);
                $this.retrieveData(params, callback, context);

            }, config.reconnectionInterval);

        };


        /**
         * This method tries to restore the previous working query in case of failures and provides a feedback to the user.
         *
         * @method _restorePreviousWorkingQuery
         * @private
         * @param {Function} callback A function taking the retrieved data as input when it is ready
         * @param {Object} context The context of the callback
         */

        this._restorePreviousWorkingQuery = function(callback, context){
            utils.log('Try to restore the previous situation', env.debugMode);

            env.params = lastRequestWorkingParams;
            connector.retrieveData(lastRequestWorkingParams, callback, context);
        };


        /**
         * This method dispatches to _handle all the data-api errors
         *
         * @method _handleDataApiErrors
         * @private
         * @param {Object} data The data blob retrieved from the data-api
         */

        this._handleDataApiErrors = function(data){
            var errorsTmp, errorTmp, errorNomenclature;
            errorsTmp = data[errorsNomenclature.messages];

            if (errorsTmp){
                errorNomenclature = errorsNomenclature.message;

                for (var n=0,length=errorsTmp.length; n<length && this.globalErrorState <3; n++){
                    errorTmp = errorsTmp[n];
                    this._handle(errorTmp[errorNomenclature.type], errorTmp[errorNomenclature.text]);
                    env.mainView.loadingImage(false);
                }
            }
        };


        /**
         * It provides a different method to handle each error raised from the data-api.
         *
         * @method _handle
         * @private
         * @param {String} type A string representing the type of the error
         * @param {String} text A string describing the error
         */

        this._handle = function(type, text){
            switch(type){

                case "connection-fail":
                    env.mainView.showMessage(env.lang.connectionFailed);
                    this._setGlobalErrorState(2); // 2 - Blocking error, retry
                    break;

                case "error":
                    env.mainView.showMessage(text);
                    this._setGlobalErrorState(3); // 3 - Blocking error, no retry
                    break;

                case "info":
                    env.mainView.showMessage(text);
                    this._setGlobalErrorState(1); // 1 - The show must go on
                    break;
            }
        };


        /**
         * This method sets the global error state.
         * A global error is a blocking error that can not be handled by other components of the tool
         *
         * @method _setGlobalErrorState
         * @private
         * @param {Number} errorLevel An integer representing the current error state
         */

        this._setGlobalErrorState = function(errorLevel){
            this.globalErrorState = errorLevel;
        };


        /**
         * It checks if the retrieved JSON contains all the mandatory fields for all the possible views.
         *
         * @method _checkDataFormat
         * @private
         * @return {Boolean} Returns true on success
         */
        this._checkDataFormat = function(data){
            var requiredFields;

            requiredFields = {};

            requiredFields["zone-servers"] = ["start_time", "end_time", "earliest_available", "latest_available", "aggregation", "aggregation_levels", "native_available", "servers", "group"];
            requiredFields["server-probes"] = ["start_time", "end_time", "earliest_available", "latest_available", "aggregation", "aggregation_levels", "native_available", "probes", "group", "server"];


            return this._checkAllFields(data, requiredFields["zone-servers"]) || this._checkAllFields(data, requiredFields["server-probes"]);
        };


        /**
         * It checks if the retrieved JSON contains all the mandatory fields.
         *
         * @method _checkAllFields
         * @private
         * @return {Boolean} Returns true on success
         */
        this._checkAllFields = function(data, list){
            for (var n=0,length=list.length; n<length; n++){
                if (!this._checkField(data, list[n])){
                    return false;
                }
            }

            return true;
        };


        /**
         * It checks if the retrieved JSON contains a certain mandatory field.
         *
         * @method _checkField
         * @private
         * @return {Boolean} Returns true on success
         */
        this._checkField = function(data, field){
            var item, presence, emptiness, result;

            item = data[field];

            presence = (item != null);
            emptiness = ($.isArray(item)) ? (item.length > 0) : (item !== "");
            result = presence && emptiness;

            if (!result){
                utils.log(field + ': ' + (presence && emptiness) , env.debugMode);
            }
            return result;
        };


        /**
         * It checks the responsiveness of the data-api to provide a feedback to the user.
         *
         * @method _responsivenessCheck
         * @private
         */

        this._responsivenessCheck = function(){
            var $this = this;

            responsivenessTimer = setTimeout(function(){
                $this._handle.call($this, "info", env.lang.serverSlowMessage);
            }, 7 * 1000);
        };


        /**
         * Get the human readable version of the DNS response and check errors
         *
         * @method getNativeDnsResult
         * @param {Number} msmId The id of the measurement
         * @param {Number} prbId The id of the probe
         * @param {Number} timestamp A UNIX timestamp
         * @param {Function} callback A function taking the retrieved data as input when it is ready
         * @param {Object} context The context of the callback
         */

        this.getNativeDnsResult = function(msmId, prbId, timestamp, callback, context){ // Just indirection for now

            // No errors checks for now
            connector.getNativeDnsResult(msmId, prbId, timestamp, callback, context);
        };


        /**
         * Get the closest traceroutes and checks errors
         *
         * @method getClosestTraceroutes
         * @param {Number} msmId The id of the measurement
         * @param {Number} prbId The id of the probe
         * @param {Number} timestamp A UNIX timestamp
         * @param {Function} callback A function taking the retrieved data as input when it is ready
         * @param {Object} context The context of the callback
         */

        this.getClosestTraceroutes = function(msmId, prbId, timestamp, callback, context){ // Just indirection for now

            // No errors checks for now
            connector.getClosestTraceroutes(msmId, prbId, timestamp, callback, context);
        };


        /**
         * Get the closest hostname.bind and checks errors
         *
         * @method getClosestHostnameBind
         * @param {Number} msmId The id of the measurement
         * @param {Number} prbId The id of the probe
         * @param {Number} timestamp A UNIX timestamp
         * @param {Function} callback A function taking the retrieved data as input when it is ready
         * @param {Object} context The context of the callback
         */

        this.getClosestHostnameBind = function(msmId, prbId, timestamp, callback, context){ // Just indirection for now

            // No errors checks for now
            connector.getClosestHostnameBind(msmId, prbId, timestamp, callback, context);
        };

    };

    return ErrorsHandlerConnectorAtlas;
});
/**
 * Created with JetBrains WebStorm.
 * User: mcandela
 * Date: 10/16/13
 * Time: 4:38 PM
 * To change this template use File | Settings | File Templates.
 */

define(
    'connector.atlas.cache',[
        "env.utils",
        "connector.atlas.error-handler"
    ],
    function(utils, Connector){

        /**
         * CacheConnectorAtlas is the cache level dedicated to the atlas data-api for DNSMON.
         * It provides a bottom-up incremental cache and top-down decremental queries.
         *
         * @class CacheConnectorAtlas
         * @constructor
         * @module connector.Atlas
         */

        var CacheConnectorAtlas = function(env){
            var connector, dataNomenclatureMapping, minimumResultDate, maximumResultDate;

            connector = new Connector(env);

            env.totalSavedBytes = 0;
            env.stats = "";

            // The map declaring the low-level data nomenclature
            dataNomenclatureMapping = {
                startTime: "start_time",
                endTime: "end_time",
                aggregationLevel: "aggregation",
                probesList: "probes",
                serversList: "servers",
                aggregationLevels: "aggregation_levels",
                measurementStartTime: "earliest_available",
                measurementEndTime: "latest_available",
                aggregationLabel: "aggregation_label",
                nativeAvailable: "native_available",

                server: {
                    id: "id",
                    label: "label",
                    group: "grouping",
                    resultsList: "results",
                    ipVersion: "ip_version",
                    description: "description"
                },

                probe: {
                    id: "id",
                    label: "label",
                    group: "grouping",
                    resultsList: "results",
                    description: "description"
                },

                result: {
                    respondingTime: "rtt50",
                    packetSent: "queries",
                    packetReceived: "replies",
                    time: "time"
                }
            };


            // Initialise the cache
            this.cache = {
                data: null,
                params: null,
                aggregationLevel: null
            };


            /**
             * It is strongly related to a particular JSON format.
             * From top to bottom: tries to reduce the amount of data requested based on the available data in cache.
             * From bottom to top: enrich the retrieved subset of data with the data already in cache.
             *
             * @method retrieveData
             * @param {Object} params A parameters vector
             * @param {Function} callback A function taking the retrieved data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this.retrieveData = function(params, callback, context){
                if (env.localCacheActive && this.cache.data){ // Is the cache active and available

                    if (this._isCacheFilteredServerSide(params)) { // The server side is computing the diff (e.g. because the client doesn't know the time window that will be returned)

                        //this._composeQueryOnUpdate(params, callback, context); // To be tested

                    }else if (this._isCacheEnough(params)){ // The whole query is in cache

                        utils.log("Query in cache", env.debugMode);
                        utils.log(params);
                        this._composeQueryOnCache(params, callback, context);

                    }else if (this._isCachePartiallyValid(params)){ // A portion of the query is in the cache

                        utils.log("Query partially in cache", env.debugMode);
                        this._retrieveQuerySubset(params, callback, context);

                    }else{

                        this._retrieveWithoutCache(params, callback, context); // The cache is active and available but not related to the actual query

                    }

                }else{

                    this._retrieveWithoutCache(params, callback, context); // The cache is not active or empty

                }

            };


            /**
             * This method retrieves from the data-api a portion of the query.
             * It describes the available data in cache and the data-api provides the remaining parts
             *
             * @method _composeQueryOnUpdate
             * @private
             * @param {Object} params A parameters vector
             * @param {Function} callback A function taking the retrieved data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this._composeQueryOnUpdate = function(params, callback, context){
                var totalBytes, savedBytes;

                connector.retrieveData(params, function(data){

                    // Set the time boundaries retrieved from the server
                    params.startTime = data[dataNomenclatureMapping.startTime];
                    params.endTime = data[dataNomenclatureMapping.endTime];

                    data = this._mergeData(params, this.cache.data, data);
                    data = this._filterData(params, data);

                    if (env.debugMode){
                        totalBytes = utils.objectSize(data);
                        savedBytes = totalBytes - env.lastDownloadBytes;
                        env.totalSavedBytes += savedBytes;
                        env.stats += "t" + totalBytes + "s" + savedBytes + ",";
                        utils.log('Retrieved bytes: ' + env.lastDownloadBytes + ' Total bytes: ' + totalBytes + ' Saved bytes: ' +  savedBytes, env.debugMode);
                        utils.log('Total bytes saved until now: ' + env.totalSavedBytes, env.debugMode);
                    }

                    this._updateCache(params, data);

                    callback.call(context, data);

                }, this);
            };


            /**
             * This method checks if the data-api should filter the data or not.
             *
             * @method _isCacheFilteredServerSide
             * @private
             * @param {Object} params A parameters vector
             * @return {Boolean} True if the data-api should filter the data
             */

            this._isCacheFilteredServerSide = function(params){
                return (
                    params.startTime == null &&
                    params.endTime == null &&
                    params.timeWindow != null &&
                    params.cutFrom != null
                    );
            };


            /**
             * This method answers to the request by filtering the data in cache.
             * It usable only when the whole query is in cache.
             *
             * @method _composeQueryOnCache
             * @private
             * @param {Object} params A parameters vector
             * @param {Function} callback A function taking the composed data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this._composeQueryOnCache = function(params, callback, context){
                var filteredCacheData, totalBytes, savedBytes;

                filteredCacheData = this._filterData(params, this.cache.data);
                this._updateCache(params, filteredCacheData);

                if (env.debugMode){
                    totalBytes = utils.objectSize(filteredCacheData);
                    savedBytes = totalBytes;
                    env.totalSavedBytes += savedBytes;
                    env.stats += "t" + totalBytes + "s" + savedBytes + ",";
                    utils.log('Retrieved bytes: 0 Total bytes: ' + totalBytes + ' Saved bytes: ' +  savedBytes, env.debugMode);
                    utils.log('Total bytes saved until now: ' + env.totalSavedBytes, env.debugMode);
                }

                callback.call(context, this.cache.data);
            };


            /**
             * This method answers to the request by composing the answer from the cache and the server.
             * It computes the data not available in cache and asks to the server for it.
             *
             * @method _retrieveQuerySubset
             * @private
             * @param {Object} params A parameters vector
             * @param {Function} callback A function taking the composed data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this._retrieveQuerySubset = function(params, callback, context){
                var subsetParams, totalBytes, savedBytes, newAggregationLevels, oldAggregationLevels;

                subsetParams = this._getParamsSubset(this.cache.params, params);

                subsetParams.aggregationLevel = env.aggregationLevel; // Force the aggregation level

                connector.retrieveData(subsetParams, function(data){

                    oldAggregationLevels = this.cache.data[dataNomenclatureMapping.aggregationLevels];
                    newAggregationLevels = data[dataNomenclatureMapping.aggregationLevels];

                    if (newAggregationLevels.length != oldAggregationLevels.length || !utils.containsAll(newAggregationLevels, oldAggregationLevels)) { // If the aggregations list changes

                        this._retrieveWithoutCache(params, callback, context);

                    }else{

                        data = this._mergeData(params, this.cache.data, data);
                        data = this._filterData(params, data);

                        if (env.debugMode) {
                            totalBytes = utils.objectSize(data);
                            savedBytes = totalBytes - env.lastDownloadBytes;
                            env.totalSavedBytes += savedBytes;
                            env.stats += "t" + totalBytes + "s" + savedBytes + ",";
                            utils.log('Retrieved bytes: ' + env.lastDownloadBytes + ' Total bytes: ' + totalBytes + ' Saved bytes: ' + savedBytes, env.debugMode);
                            utils.log('Total bytes saved until now: ' + env.totalSavedBytes, env.debugMode);
                        }

                        this._updateCache(params, data);

                        callback.call(context, data);
                    }

                }, this);

            };


            /**
             * This method computes the difference between two parameters vector
             *
             * @method _getParamsSubset
             * @private
             * @param {Object} oldParams The old parameters vector
             * @param {Object} newParams The new parameters vector
             * @return {Object} The resulting parameters vector
             */

            this._getParamsSubset = function(oldParams, newParams){
                var params, timeDiff;

                params = utils.lightClone(newParams); // Clone the parameters vector

                //params.selectedRows = this._getRowsDiff(oldParams.selectedRows, newParams.selectedRows); // Get the new rows not included in the previous query

                timeDiff = this._getTimeDiff(this.cache.data[dataNomenclatureMapping.startTime], this.cache.data[dataNomenclatureMapping.endTime], newParams.startTime, newParams.endTime); // Get the diff in time boundaries

                params.startTime = timeDiff.startTime; // Set the new time boundaries
                params.endTime = timeDiff.endTime;

                return params;
            };


            /**
             * This method computes the difference between two time windows
             *
             * @method _getTimeDiff
             * @private
             * @param {Date} oldStartTime The old start date
             * @param {Date} oldEndTime The old end date
             * @param {Date} newStartTime The new start date
             * @param {Date} newEndTime The new end date
             * @return {Object} The computed time window (composed of startTime and endTime)
             */

            this._getTimeDiff = function(oldStartTime, oldEndTime, newStartTime, newEndTime){
                var startTime, endTime, consistencyOffset;

                consistencyOffset = env.aggregationLevel || env.samplingFrequency;

                if (newStartTime < oldStartTime){

                    startTime = newStartTime;
                    endTime = oldStartTime + consistencyOffset;

                }else if (newEndTime > oldEndTime){

                    startTime = oldEndTime - consistencyOffset;
                    endTime = newEndTime;

                }

                return {startTime: startTime, endTime: endTime};
            };


            /**
             * This method checks if the actual cache is partially valid or not.
             *
             * @method _isCachePartiallyValid
             * @private
             * @param {Object} params A parameters vector
             * @return {Boolean} True if the actual cache is partially valid
             */

            this._isCachePartiallyValid = function(params){
                var oldParams, oldRows, newRows;

                oldParams = this.cache.params;

                oldRows = utils.split(oldParams.selectedRows, ',', true);
                newRows = utils.split(params.selectedRows, ',', true);

                return (
                    params.startTime != null &&
                    params.endTime != null &&
                    this._isSameTarget(params) && // Same target
                    this.cache.aggregationLevel == env.aggregationLevel && // Check the aggregation level

                    // Same rows
                    oldRows.length == newRows.length &&
                    this._containsRows(oldRows, newRows) &&

                    (
                        (params.startTime >= oldParams.startTime  && params.startTime <= oldParams.endTime) || // Different time but partially valid
                        (params.endTime >= oldParams.startTime  && params.endTime <= oldParams.endTime)
                        )
                    );
            };


            /**
             * This method updates the cache
             *
             * @method _updateCache
             * @private
             * @param {Object} params The new parameters vector
             * @param {Object} data The blob of data
             */

            this._updateCache = function(params, data){


                this.cache = {
                    data: data,
                    params: utils.lightClone(params),
                    aggregationLevel: env.aggregationLevel
                };

            };


            /**
             * This method checks if a new row selection contains the old rows selected.
             *
             * @method _containsRows
             * @private
             * @param {Object} oldRowsSelection The old vector of selected rows
             * @param {Object} newRowsSelection The new vector of selected rows
             * @return {Boolean} True if the new row selection contains the old rows selected
             */

            this._containsRows = function(oldRowsSelection, newRowsSelection){

                return oldRowsSelection.length == 0 || (newRowsSelection.length != 0 && newRowsSelection.length <= oldRowsSelection.length && utils.containsAll(oldRowsSelection, newRowsSelection));

            };


            /**
             * This method rely on the layers below to answer the query
             *
             * @method _retrieveWithoutCache
             * @private
             * @param {Object} params A parameters vector
             * @param {Function} callback A function taking the data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this._retrieveWithoutCache = function(params, callback, context){

                connector.retrieveData(params, function(data){

                    this._updateCache(params, data);

                    utils.log('Retrieved bytes: ' + env.lastDownloadBytes, env.debugMode);
                    callback.call(context, data);
                }, this);

            };


            /**
             * This method checks if the actual cache is completely valid or not.
             *
             * @method _isCacheEnough
             * @private
             * @param {Object} params A parameters vector
             * @return {Boolean} True if the actual cache is completely valid
             */

            this._isCacheEnough = function(params){
                var oldParams;

                oldParams = this.cache.params;

                return (
                    params.startTime != null &&
                    params.endTime != null &&
                    this._isSameTarget(params) &&
                    this.cache.aggregationLevel == env.aggregationLevel &&
                    this._containsRows(utils.split(oldParams.selectedRows, ',', true), utils.split(params.selectedRows, ',', true)) &&
                    oldParams.startTime <= params.startTime &&
                    oldParams.endTime >= params.endTime
                    );
            };


            /**
             * This method filters the data in order to satisfy the actual parameters
             *
             * @method _filterData
             * @private
             * @param {Object} params The new parameters vector
             * @param {Object} data The blob of data
             * @return {Object} The filtered data
             */

            this._filterData = function(params, data){
                minimumResultDate = null;
                maximumResultDate = null;

                this._filterRows(params, data);

                // Updates the composed JSON with the actual start/end dates

                if (env.aggregationLevel != 0) {
                    data[dataNomenclatureMapping.startTime] = minimumResultDate; //( minimumResultDate >= params.startTime) ? params.startTime : minimumResultDate;
                    data[dataNomenclatureMapping.endTime] = maximumResultDate; // ( maximumResultDate + (env.aggregationLevel)  <= params.endTime) ? params.endTime : maximumResultDate;
                }else{
                    data[dataNomenclatureMapping.startTime] = params.startTime;
                    data[dataNomenclatureMapping.endTime] = params.endTime;
                }

                return data;
            };


            /**
             * This method filters the rows on a blob of data in order to satisfy a vector of parameters
             *
             * @method _filterRows
             * @private
             * @param {Object} params A parameters vector
             * @param {Object} data The blob of data
             */

            this._filterRows = function(params, data){
                var rows, newResults, row, rowId, selectedRows, rowsListNomenclature;

                newResults = [];
                selectedRows = utils.split(params.selectedRows, ',', true);
                rowsListNomenclature = this._getRowsListNomenclature(params);
                rows = data[rowsListNomenclature];

                for (var n=0,length=rows.length; n<length; n++){
                    row = rows[n];

                    rowId = '' + row[this._getRowNomenclature(params).id]; // Is a string

                    if (selectedRows.length == 0 || utils.indexOf(rowId, selectedRows) != -1){
                        newResults.push(row);

                        this._filterResults(params, row);
                    } else {
                        // Force GC
//                        delete data[rowsListNomenclature][n];
                    }
                }

                data[rowsListNomenclature] = newResults; //Replace the filtered data
            };


            /**
             * This method filters the results in a row in order to satisfy a vector of parameters
             *
             * @method _filterRows
             * @private
             * @param {Object} params A parameters vector
             * @param {Object} row A row (a group of results)
             */

            this._filterResults = function(params, row){
                var result, newResults, results, rowNomenclature, maxResultTime;

                newResults = [];
                rowNomenclature = this._getRowNomenclature(params);
                results = row[rowNomenclature.resultsList];

                for (var n=0,length=results.length; n<length; n++){
                    result = results[n];

                    // Get the new time boundaries
                    if (result.time < params.endTime && result.time >= params.startTime){
                        maxResultTime = result.time + env.aggregationLevel;
                        minimumResultDate = (result.time < minimumResultDate || !minimumResultDate) ? result.time : minimumResultDate;
                        maximumResultDate = (maxResultTime > maximumResultDate || !maximumResultDate) ? maxResultTime : maximumResultDate;
                        newResults.push(result);
                    } else {
                        // Force GC
//                        delete row[rowNomenclature.resultsList][n];
                    }

                }

                row[rowNomenclature.resultsList] = newResults; //Replace the filtered data
            };


            /**
             * This method checks if the provided parameters are referring to the same target/measurement/contest.
             *
             * @method _isSameTarget
             * @private
             * @param {Object} newParams The new parameters vector
             * @return {Boolean} True if is the same target/measurement/contest
             */

            this._isSameTarget = function(newParams){
                var oldParams, importantParams, paramTmp;

                oldParams = this.cache.params;
                importantParams = ["root", "group", "type", "ipVersion", "isTcp"];


                for (var n=0,length=importantParams.length; n<length; n++){
                    paramTmp = importantParams[n];

                    if (oldParams[paramTmp] != newParams[paramTmp]){
                        return false;
                    }
                }

                return true;
            };


            /**
             * This method merges two blob of data
             *
             * @method _mergeData
             * @private
             * @param {Object} params The new parameters vector
             * @param {Object} oldData The old blob of data
             * @param {Object} newData The new blob of data
             * @return {Object} The merged blob of data
             */

            this._mergeData = function(params, oldData, newData){

                return this._mergeRows(params, oldData, newData);

            };


            /**
             * This support method merges the rows of two blob of data
             *
             * @method _mergeData
             * @private
             * @param {Object} params The new parameters vector
             * @param {Object} oldData The old blob of data
             * @param {Object} newData The new blob of data
             * @return {Object} The merged blob of data
             */

            this._mergeRows = function(params, oldData, newData){
                var dataRows, oldDataRows, row, rowId, oldRow, results, newResults, resultsListNomenclature, rowsListNomenclature;

                rowsListNomenclature = this._getRowsListNomenclature(params);
                dataRows = newData[rowsListNomenclature];
                oldDataRows = oldData[rowsListNomenclature];


                for (var n=0,length=dataRows.length; n<length; n++){
                    row = dataRows[n];

                    rowId = '' + row[this._getRowNomenclature(params).id];
                    oldRow = this._getRow(params, oldData, rowId);

                    if (!oldRow){

                        oldDataRows.push(row);

                    }else{
                        resultsListNomenclature = this._getRowNomenclature(params).resultsList;
                        results = oldRow[resultsListNomenclature];
                        newResults = row[resultsListNomenclature];
                        oldRow[resultsListNomenclature]  = results.concat(newResults);

                    }

                }

                oldData[dataNomenclatureMapping.startTime] = Math.min(oldData[dataNomenclatureMapping.startTime], newData[dataNomenclatureMapping.startTime]);
                oldData[dataNomenclatureMapping.endTime] = Math.max(oldData[dataNomenclatureMapping.endTime], newData[dataNomenclatureMapping.endTime]);

                return oldData;
            };


            /**
             * This method returns the nomenclature of a group for the given query type
             *
             * @method _getRowNomenclature
             * @private
             * @param {Object} params A parameters vector
             * @return {String} The nomenclature
             */

            this._getRowNomenclature = function(params){

                switch (params.type){
                    case "zone-servers":
                        return dataNomenclatureMapping.server;
                        break;

                    case "server-probes":
                        return dataNomenclatureMapping.probe;
                        break;
                }
            };


            /**
             * This method returns the nomenclature of a list of groups for the given query type
             *
             * @method _getRowsListNomenclature
             * @private
             * @param {Object} params A parameters vector
             * @return {String} The nomenclature
             */

            this._getRowsListNomenclature = function(params){

                switch (params.type){
                    case "zone-servers":
                        return dataNomenclatureMapping.serversList;
                        break;

                    case "server-probes":
                        return dataNomenclatureMapping.probesList;
                        break;
                }
            };


            /**
             * This method retrieves a row from a blob of data
             *
             * @method _getRow
             * @private
             * @param {Object} params A parameters vector
             * @param {Object} data A blob of data
             * @param {String} id The if of a row
             * @return {Object} A row or null
             */

            this._getRow = function(params, data, id){
                var rows, row, rowId;

                rows = data[this._getRowsListNomenclature(params)];
                for (var n=0,length=rows.length; n<length; n++){
                    row = rows[n];
                    rowId = '' + row[this._getRowNomenclature(params).id];

                    if (rowId == id){
                        return row;
                    }
                }

                return null;
            };


            /**
             * Get the human readable version of the DNS response and use cache
             *
             * @method getNativeDnsResult
             * @param {Number} msmId The id of the measurement
             * @param {Number} prbId The id of the probe
             * @param {Number} timestamp A UNIX timestamp
             * @param {Function} callback A function taking the retrieved data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this.getNativeDnsResult = function(msmId, prbId, timestamp, callback, context){ // Just indirection for now
                connector.getNativeDnsResult(msmId, prbId, timestamp, callback, context);
            };


            /**
             * Get the closest traceroutes and use cache
             *
             * @method getClosestTraceroutes
             * @param {Number} msmId The id of the measurement
             * @param {Number} prbId The id of the probe
             * @param {Number} timestamp A UNIX timestamp
             * @param {Function} callback A function taking the retrieved data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this.getClosestTraceroutes = function(msmId, prbId, timestamp, callback, context){ // Just indirection for now
                connector.getClosestTraceroutes(msmId, prbId, timestamp, callback, context);
            };

            /**
             * Get the closest hostname.bind and checks errors
             *
             * @method getClosestHostnameBind
             * @param {Number} msmId The id of the measurement
             * @param {Number} prbId The id of the probe
             * @param {Number} timestamp A UNIX timestamp
             * @param {Function} callback A function taking the retrieved data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this.getClosestHostnameBind = function(msmId, prbId, timestamp, callback, context){ // Just indirection for now

                // No errors checks for now
                connector.getClosestHostnameBind(msmId, prbId, timestamp, callback, context);
            };

        };

        return CacheConnectorAtlas;
    });
function AtlasTraceroute(data) {
    this.data = data;
    this.reverseNames = data.reverse_names || {};

    this.render = function() {
        var output = [];
        output.push(this.renderTimestamp(this.data.timestamp));
        output.push(this.renderHeader(
            this.data.dst_name, this.data.dst_addr, this.data.size));
        for (var h=0; h < this.data.result.length; h++) {
            var hop = this.data.result[h];
            output.push(this.renderHop(hop));
        }
        return "<div class='traceroute'>" + output.join("") + "</div>";
    };

    this.renderTimestring = function(timestamp) {
        return timestamp;
    };

    this.renderTimestamp = function(timestamp) {
        return "<span class='traceroute-timestamp'>" +
            this.renderTimestring(timestamp) + "</span>";
    };

    this.renderHeader = function(dstName, dstAddr, packetSize) {
        return "<div class='traceroute-header'>traceroute to " + dstName + " (" +
            dstAddr + "), " + packetSize + " byte packets</div>";
    };

    this.renderHopNumber = function(hop) {
        return "<span class='traceroute-hop-number'>" + hop + "</span>";
    }

    this.renderReply = function(reply, lastAddr) {
        var output = [];
        if (reply.x == "*") {
            output.push(this.renderTimeout());
        }
        if (reply.hasOwnProperty("from")) {
            var addr = reply.from;
            if (addr && addr != lastAddr) {
                output.push(this.renderAddress(addr, this.reverseNames[addr]));
            }
        }

        if (reply.hasOwnProperty("rtt")) {
            output.push(this.renderTime(reply.rtt));
        }
        if (reply.hasOwnProperty("err")) {
            output.push(this.renderError(reply.err));
        }
        return output.join(" ");
    };

    this.renderHop = function(hop) {
        var lastAddr = null;
        var output = [];
        output.push(this.renderHopNumber(hop.hop));
        for (var r=0; r < hop.result.length; r++) {
            var reply = hop.result[r];
            output.push(this.renderReply(reply, lastAddr));
            lastAddr = reply.from || lastAddr;

        }
        return "<div class='traceroute-hop'>" + output.join(" ") + "</div>";
    };

    this.renderTimeout = function() {
        return "*";
    };

    this.renderTime = function(time) {
        return time + " ms";
    };

    this.renderError = function(error) {
        return "!" + error;
    };

    this.renderAddress = function(addr, hostname) {
        var label;
        if (hostname) {
            label = hostname + " (" + addr + ")";
        } else {
            label = addr;
        }
        return "<a target='_blank' href='https://stat.ripe.net/" + addr +
            "' title='" + label + " [click to open in RIPEstat]'>" + addr + "</a>";
    };
};
define("lib.atlas-traceroute-printer", function(){});

/**
 * Created with JetBrains WebStorm.
 * User: mcandela
 * Date: 10/17/13
 * Time: 11:35 AM
 * To change this template use File | Settings | File Templates.
 */



// Coupled with the model layer

define(
    'connector.atlas.isolation-level',[
        "env.utils",
        "env.params-manager",
        "model.cell",
        "model.row",
        "connector.atlas.cache",
        "lib.atlas-traceroute-printer"
    ],
    function(utils, paramsManager, Cell, Row, Connector){

        /**
         * IsolationLevelConnectorAtlas has a fundamental role providing isolation between the internal input format
         * and the external input format. It allows to block the propagation of changes affecting the JSON format
         * provided by the data-api. In addition it is a transposition level between a format convenient for the
         * data-api (e.g. light data data format) and a format convenient for the tool (e.g. less computation format).
         *
         * @class IsolationLevelConnectorAtlas
         * @constructor
         * @module connector.Atlas
         */

        var IsolationLevelConnectorAtlas = function(env) {

            var connector, dataNomenclatureMapping, maxUsedDate, minUsedDate, crowdestRow, config, originalTime, dataPool;

            connector = new Connector(env);
            config = env.config;

            dataPool = {
                cells: {},
                rows: {}
            };

            dataNomenclatureMapping = {
                startTimestamp: "start_time",
                endTimestamp: "end_time",
                aggregationLevel: "aggregation",
                probesList: "probes",
                serversList: "servers",
                isOngoing: "active",

                aggregationLevels: "aggregation_levels",
                measurementStartTime: "earliest_available",
                measurementEndTime: "latest_available",
                aggregationLabel: "aggregation_label",
                nativeAvailable: "native_available",

                singleZone: "group",
                singleServer: "server",

                zone: {
                    id: "id",
                    label: "label",
                    description: "description",
                    isOngoing: "active"
                },

                server: {
                    id: "id",
                    hostname: "hostname",
                    resultsList: "results",
                    ipVersion: "ip_version",
                    ipAddress: "ip_address",
                    label: "label",
                    description: "description",
                    urlsMap: "atlas_measurements"
                },

                urlItem: {
                    typeId: "type",
                    label: "type_label",
                    overviewUrl: "overview_url",
                    dataUrl: "result_url",
                    measurementId: "msm_id",
                    currentDatasource: "data_source",
                    samplingFrequency: "interval"
                },

                probe: {
                    id: "id",
                    country: "country",
                    label: "label",
                    description: "description",
                    hostname: "hostname",
                    resultsList: "results"
                },

                result: {
                    respondingTime: "rtt50",
                    packetSent: "queries",
                    packetReceived: "replies",
                    time: "time",
                    endTime: "end_time",
                    errors: "errors"
                },

                managedRcodes: ["ServFail", "NXDomain", "Refused"]
            };


            /**
             * It is strongly related to a particular JSON format.
             * From top to bottom: uses paramsManager to translate the internal format of the parameters in the format valid outside.
             * From bottom to top: translates the external input data in the internal format.
             *
             * @method retrieveData
             * @param {Object} params A params vector
             * @param {Function} callback A function taking the retrieved data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this.retrieveData = function (params, callback, context) {

                params = this._parseParams(params); //Translates the internal format of the parameters in the format valid outside

                //Just an indirection for now
                connector.retrieveData(params, function (data) {
                    this._freeMemoryOnPool();
                    var wrappedData = this._parseData(data);

//                    // Force garbage collector
//                    for (var prop in data){
//                        delete data[prop];
//                    }
//                    data = null;

                    callback.call(context, wrappedData); // Back to the normal data flow

                }, this); // Data callback context
            };


            /**
             * This method translates parameters from the internal to the external format
             *
             * @method _parseParams
             * @param {Object} params A params vector
             * @return {Object} A params vector in the internal format
             */
            this._parseParams = function (params) {
                return paramsManager.fromInternalToExternal(params);
            };


            /**
             * This method translates a server from the external to the internal format
             *
             * @method _parseSingleServer
             * @param {Object} server A server described in the external format
             * @return {Object} A server described in the internal format
             */

            this._parseSingleServer = function (server) {
                var serverNomenclature, serverObj;

                serverNomenclature = dataNomenclatureMapping.server;
                serverObj = {
                    id: paramsManager.convertRemoteToLocalId(server[serverNomenclature.id]),
                    label: server[serverNomenclature.label] || server[serverNomenclature.hostname] + ' ' + ((server[serverNomenclature.ipVersion] == 4) ? 'IPv4' : 'IPv6'),
                    description: server[serverNomenclature.description],
                    urlsMap: this._generateJsonUrls(server[serverNomenclature.urlsMap])
                };

                return serverObj;
            };


            /**
             * This method translates a zone from the external to the internal format
             *
             * @method _parseSingleServer
             * @param {Object} zone A zone described in the external format
             * @return {Object} A zone described in the internal format
             */

            this._parseZone = function (zone) {
                var zoneNomenclature, zoneObj;

                zoneNomenclature = dataNomenclatureMapping.zone;
                zoneObj = {
                    id: paramsManager.convertRemoteToLocalId(zone[zoneNomenclature.id]),
                    label: zone[zoneNomenclature.label]
                };

                env.isOngoing = zone[zoneNomenclature.isOngoing];

                return zoneObj;
            };


            /**
             * This method initialises the parsing of the input JSON
             *
             * @method _parseData
             * @private
             * @param {Object} data The external data structure
             * @return {Object} The internal data structure
             */

            this._parseData = function (data) {
                var envelop;

                maxUsedDate = null;
                minUsedDate = null;

                crowdestRow = {cells: []};

                originalTime = {
                    start: data[dataNomenclatureMapping.startTimestamp],
                    end: data[dataNomenclatureMapping.endTimestamp]
                };

                envelop = { // Creates the internal data structure
                    startDate: paramsManager.convertRemoteToLocalDate(originalTime.start),
                    endDate: paramsManager.convertRemoteToLocalDate(originalTime.end),
                    rows: [],
                    cells: [],
                    group: null
                };

                // Synchronizes the internal parameters with those returned
                env.params.startDate = envelop.startDate;
                env.params.endDate = envelop.endDate;

                env.retrievedAggregationLevel = data[dataNomenclatureMapping.aggregationLevel];

                if (data.type == "server-probes") { // Different parser based on data.type

                    envelop.group = this._parseSingleServer(data[dataNomenclatureMapping.singleServer]);
                    envelop.root = this._parseZone(data[dataNomenclatureMapping.singleZone]);
                    this._parseProbes(data[dataNomenclatureMapping.probesList], envelop);

                } else if (data.type == "zone-servers") {

                    envelop.group = this._parseZone(data[dataNomenclatureMapping.singleZone]);
                    this._parseServers(data[dataNomenclatureMapping.serversList], envelop);

                } else {
                    console.log("Malformed json!");
                }

                envelop.maxUsedDate = maxUsedDate;
                envelop.minUsedDate = minUsedDate;


                // Computes some internal parameters
                env.aggregationLevels = data[dataNomenclatureMapping.aggregationLevels];
                env.minAggregation = env.aggregationLevels[0];
                env.maxAggregation = env.aggregationLevels[env.aggregationLevels.length - 1];
                env.measurementStartTime = paramsManager.convertRemoteToLocalDate(data[dataNomenclatureMapping.measurementStartTime]);
                env.measurementEndTime = paramsManager.convertRemoteToLocalDate(data[dataNomenclatureMapping.measurementEndTime]);

                env.aggregationLabel = data[dataNomenclatureMapping.aggregationLabel];
                env.isNativeAvailable = data[dataNomenclatureMapping.nativeAvailable];

                envelop.usedTimeWindowSeconds = Math.ceil((maxUsedDate - minUsedDate) / 1000);
                env.timeWindowSeconds = Math.ceil((env.params.endDate - env.params.startDate) / 1000);
                envelop.crowdestRow = crowdestRow;

                if (minUsedDate < env.params.startDate) {
                    utils.log('Warning: an element retrieved is before the start date', env.debugMode);
                }

                return envelop;
            };


            /**
             * Parses all the servers available in the JSON in order to create an internal compatible version of them
             *
             * @method _parseServers
             * @private
             * @param {Object} servers A list of server
             */

            this._parseServers = function (servers, envelop) {
                var row, rowId, rowLabel, objRow, serverNomenclature, rowResults, rowGroup, rowIpVersion,
                    rowDescription, externalId, rowHostname, rowIp, multipleLabels;

                serverNomenclature = dataNomenclatureMapping.server;
                multipleLabels = {};

                for (var n = 0, length = servers.length; n < length; n++) { // For all the servers
                    row = servers[n];

                    externalId = row[serverNomenclature.id];
                    rowId = paramsManager.convertRemoteToLocalId(externalId);
                    rowResults = row[serverNomenclature.resultsList];

                    if (!dataPool.rows[rowId]) {

                        rowHostname = row[serverNomenclature.hostname];
                        rowGroup = rowHostname; // Grouped by host name

                        rowIpVersion = row[serverNomenclature.ipVersion];
                        rowIp = row[serverNomenclature.ipAddress];

                        rowDescription = row[serverNomenclature.description] || rowIp + ' (' + rowHostname + ')';

                        rowLabel = row[serverNomenclature.label] || this._abbreviateLabel(rowHostname) + ' ' + ((rowIpVersion == 4) ? 'IPv4' : 'IPv6');

                        if (multipleLabels[rowLabel]) {
                            multipleLabels[rowLabel]++;
                            rowLabel += '(' + multipleLabels[rowLabel] + ')';
                        } else {
                            multipleLabels[rowLabel] = 1;
                        }

                        objRow = new Row(rowId, rowLabel); // Create a row object of the model layer
                        objRow.group = rowGroup;
                        objRow.internalOrder = rowIpVersion;
                        objRow.description = rowDescription;
                        objRow.minimumResponseTime = null;
                        objRow.___externalId___ = externalId;
                        objRow.___type___ = "server";

                        objRow.urlsMap = this._generateJsonUrls(row[serverNomenclature.urlsMap]); // Get additional data-api URLs

                        dataPool.rows[rowId] = objRow;
                    }

                    envelop.rows.push(dataPool.rows[rowId]);
                    dataPool.rows[rowId].minimumResponseTime = null;
                    dataPool.rows[rowId].cells = [];
                    dataPool.rows[rowId]["__inuse__"] = true;

                    this._parseResults(rowResults, dataPool.rows[rowId], envelop); // Parse all the results for this row
                }

            };


            /**
             * This method translates the URLs of additional data-api reported in the JSON in the internal format
             *
             * @method _generateJsonUrls
             * @private
             * @param {Object} urlsMap A map of URLs
             * @return {Object} A map of URLs translated in the internal format
             */

            this._generateJsonUrls = function (urlsMap) {
                var jsonOverviewUrls, jsonSampleUrls, dataUrl, overviewUrl, label, nomenclatureUrlMap, mapUrlItem,
                    current, measurementId, typeId, samplingFrequency;

                jsonOverviewUrls = [];
                jsonSampleUrls = [];
                nomenclatureUrlMap = dataNomenclatureMapping.urlItem;

                for (var n = 0, length = urlsMap.length; n < length; n++) {

                    mapUrlItem = urlsMap[n];
                    label = mapUrlItem[nomenclatureUrlMap.label];
                    overviewUrl = mapUrlItem[nomenclatureUrlMap.overviewUrl];
                    dataUrl = mapUrlItem[nomenclatureUrlMap.dataUrl];
                    measurementId = mapUrlItem[nomenclatureUrlMap.measurementId];
                    typeId = mapUrlItem[nomenclatureUrlMap.typeId];
                    current = (mapUrlItem[nomenclatureUrlMap.currentDatasource] == true);

                    samplingFrequency = mapUrlItem[nomenclatureUrlMap.samplingFrequency];

                    if (current) {
                        env.samplingFrequency = samplingFrequency;
                    }

                    if (typeId != 3) {
                        jsonOverviewUrls.push({type: typeId, label: label, url: overviewUrl, current: current, measurementId: measurementId, samplingFrequency: samplingFrequency});
                        jsonSampleUrls.push({type: typeId, label: label, url: dataUrl, current: current, measurementId: measurementId, samplingFrequency: samplingFrequency});
                    }
                }

                return {sample: jsonSampleUrls, overview: jsonOverviewUrls};
            };


            /**
             * This method abbreviates the labels for IPv6 addresses
             *
             * @method _abbreviateIPv6Label
             * @private
             * @param {String} label An IP address
             */

            this._abbreviateIPv6Label = function (label) {
                var blocks, fullBlocks, blockTmp, resultBlocksHead, resultBlocksTail, labelOut;

                fullBlocks = [];
                resultBlocksHead = [];
                resultBlocksTail = [];
                blocks = label.split(":");

                for (var n = 0, length = blocks.length; n < length; n++) {
                    blockTmp = blocks[n];
                    if (blockTmp != "") {
                        fullBlocks.push(blockTmp);
                    }
                }

                if (fullBlocks.length > 4) {
                    resultBlocksHead.push(fullBlocks[0]);
                    resultBlocksHead.push(fullBlocks[1]);

                    resultBlocksTail.push(fullBlocks[fullBlocks.length - 2]);
                    resultBlocksTail.push(fullBlocks[fullBlocks.length - 1]);

                    labelOut = utils.join(resultBlocksHead, ":") + ":..:" + utils.join(resultBlocksTail, ":");
                } else {
                    labelOut = label;
                }

                return labelOut;

            };


            /**
             * This method abbreviates the labels
             *
             * @method _abbreviateLabel
             * @private
             * @param {String} label A label
             */

            this._abbreviateLabel = function (label) {
                var stringOut, firstPart, secondPart, startSecondPart, length;

                length = label.length;
                if (length >= config.maxYLabelLength) {
                    startSecondPart = length - 4;

                    firstPart = (label.charAt(7) != '.') ? label.substring(0, 8) : label.substring(0, 7);
                    secondPart = (label.charAt(startSecondPart) != '.') ? label.substring(startSecondPart, length) : label.substring(startSecondPart + 1, length);

                    stringOut = firstPart + '...' + secondPart;
                } else {
                    stringOut = label;
                }

                return stringOut;
            };

            this._freeMemoryOnPool = function(){

                for (var row in dataPool.rows){
                    if (dataPool.rows[row]["__inuse__"] == false){
                        delete dataPool.rows[row];
                    } else {
                        dataPool.rows[row]["__inuse__"] = false;
                    }
                }

                for (var cell in dataPool.cells){
                    if (dataPool.cells[cell]["__inuse__"] == false){
                        delete dataPool.cells[cell];
                    } else {
                        dataPool.cells[cell]["__inuse__"] = false;
                    }
                }
            };


            /**
             * Parses all the probes available in the JSON in order to create an internal compatible version of them
             *
             * @method _parseProbes
             * @private
             * @param {Object} probes A list of probes
             */

            this._parseProbes = function (probes, envelop) {
                var row, rowId, rowLabel, objRow, probeNomenclature, rowResults, rowGroup,
                    rowDescription, externalId, rowCountry, rowHostname;

                probeNomenclature = dataNomenclatureMapping.probe;

                for (var n = 0, length = probes.length; n < length; n++) {
                    row = probes[n];

                    externalId = row[probeNomenclature.id];

                    rowId = paramsManager.convertRemoteToLocalId(externalId);
                    rowResults = row[probeNomenclature.resultsList];

                    if (!dataPool.rows[rowId]) {

                        rowCountry = row[probeNomenclature.country];
                        rowHostname = row[probeNomenclature.hostname];
                        rowGroup = rowCountry;
                        rowLabel = row[probeNomenclature.label] || rowHostname + ' (' + rowCountry + ')';
                        rowDescription = row[probeNomenclature.description] || rowHostname;


                        objRow = new Row(rowId, rowLabel);
                        //Label modified for now
                        objRow.group = rowGroup;
                        objRow.internalOrder = rowId;
                        objRow.description = rowDescription;
                        objRow.___externalId___ = externalId;
                        objRow.___type___ = "probe";
                        objRow.urlsMap = envelop.group.urlsMap;

                        dataPool.rows[rowId] = objRow;

                    }

                    envelop.rows.push(dataPool.rows[rowId]);
                    dataPool.rows[rowId].minimumResponseTime = null;
                    dataPool.rows[rowId].cells = [];
                    dataPool.rows[rowId]["__inuse__"] = true;

                    this._parseResults(rowResults, dataPool.rows[rowId], envelop);
                }

            };


            /**
             * Parses all results retrieved in the JSON for the current row
             *
             * @method _parseResults
             * @private
             * @param {Object} results A list of results
             * @param {Object} row An object of the model layer representing the row
             */

            this._parseResults = function (results, row, envelop) {
                var cell, objCell, cellResponseTime, cellTime, resultNomenclature, cellLoss, cellTimeEnd,
                    startTimestamp, endTimestamp, cellKey;

                resultNomenclature = dataNomenclatureMapping.result; // Get the nomenclature for a result item

                for (var n = 0, length = results.length; n < length; n++) { // Iterate an all the results
                    cell = results[n];

                    startTimestamp = cell[resultNomenclature.time];
                    endTimestamp = cell[resultNomenclature.endTime];

                    cellTime = paramsManager.convertRemoteToLocalDate(startTimestamp); // The start time MUST be every time specified by the server

                    if (endTimestamp) { // The end time is specified by the server

                        cellTimeEnd = paramsManager.convertRemoteToLocalDate(endTimestamp);

                    } else {

                        if (env.retrievedAggregationLevel != 0) { // It is an aggregation, so every single cell is representing a period with start and end time

                            cellTimeEnd = paramsManager.convertRemoteToLocalDate(startTimestamp + env.retrievedAggregationLevel); // Computes the end time

                        } else { // It is a sample with just startTime

                            cellTimeEnd = null;

                        }
                    }

                    cellResponseTime = this._computeRespondingTime(cell);
                    cellLoss = this._computePacketLoss(cell);

                    if (maxUsedDate == null) {
                        maxUsedDate = cellTime;
                        minUsedDate = cellTime;
                    } else {
                        maxUsedDate = (maxUsedDate > cellTime) ? maxUsedDate : cellTime;
                        minUsedDate = (minUsedDate < cellTime) ? minUsedDate : cellTime;
                    }

                    cellKey = row.id + '' + cellTime.getTime();
                    if (!dataPool.cells[cellKey]) {
                        dataPool.cells[cellKey] = new Cell(row, cellTime); // Create a new object of the model layer
                    }

                    objCell = dataPool.cells[cellKey];
                    objCell.optional = {}; // Remove optional attributes
                    this._parseRcodes(objCell, cell);
                    objCell.endTime = cellTimeEnd;
                    objCell.respondingTime = cellResponseTime;
                    objCell.loss = cellLoss;
                    objCell.sent = cell[dataNomenclatureMapping.result.packetSent];

                    row.cells.push(dataPool.cells[cellKey]);
                    envelop.cells.push(dataPool.cells[cellKey]);

                    objCell.__inuse__ = true;

                    if (cellResponseTime != null) {
                        row.minimumResponseTime = ((row.minimumResponseTime == null || row.minimumResponseTime > cellResponseTime) ? cellResponseTime : row.minimumResponseTime);
                    }
                    crowdestRow = (row.cells.length > crowdestRow.cells.length) ? row : crowdestRow;
                }
            };

            /**
             * Enriches the cell object of the model layer with the rcodes error retrieved in the JSON for the conresponding result
             *
             * @method _parseRcodes
             * @private
             * @param {Object} cell An object of the model layer
             * @param {Object} cellData A result/cell of the JSON input
             */

            this._parseRcodes = function (cell, cellData) {
                var errorsData, importantErrors, others, totalNumber, cellError, numberOfErrorsOfThisType;

                others = 0;
                totalNumber = 0;
                importantErrors = dataNomenclatureMapping.managedRcodes;
                errorsData = cellData[dataNomenclatureMapping.result.errors];
                cellError = {};

                for (var errorName in errorsData) {

                    if (utils.indexOf(errorName, importantErrors)) {
                        numberOfErrorsOfThisType = errorsData[errorName];
                        totalNumber += numberOfErrorsOfThisType;
                        cellError[errorName] = numberOfErrorsOfThisType;
                    } else {
                        totalNumber++;
                        others++;
                    }
                    cellError["others"] = others;
                }

                cell.errors = cellError;
                cell.numberCorrectResponses = this._computeNumberCorrectResponses(cellData, totalNumber);
            };


            /**
             * Computes the percentage of correct responses
             *
             * @method _computeNumberCorrectResponses
             * @private
             * @param {Object} cellData A result/cell of the JSON input
             * @return {Number} Returns a percentage
             */

            this._computeNumberCorrectResponses = function (cellData, numberOfErrors) {
                var packetLoss, packetLossPercentage, packetSent, packetReceived;

                packetSent = cellData[dataNomenclatureMapping.result.packetSent];
                packetReceived = cellData[dataNomenclatureMapping.result.packetReceived];

                if (packetSent != null && packetReceived != null) {
                    packetLoss = packetSent - (packetReceived - numberOfErrors);
                    packetLossPercentage = (100 / packetSent) * packetLoss;
                    packetLossPercentage = packetLossPercentage.toFixed(2);
                }

                return packetLossPercentage;
            };

            /**
             * Computes the unanswered queries of a cell/result
             *
             * @method _computePacketLoss
             * @private
             * @param {Object} cellData A result/cell of the JSON input
             * @return {float} Returns a percentage
             */

            this._computePacketLoss = function (cellData) {
                var packetLoss, packetLossPercentage, packetSent, packetReceived;

                packetSent = cellData[dataNomenclatureMapping.result.packetSent];
                packetReceived = cellData[dataNomenclatureMapping.result.packetReceived];

                if (packetSent != null && packetReceived != null) {
                    packetLoss = packetSent - packetReceived;
                    packetLossPercentage = (100 / packetSent) * packetLoss;
                    packetLossPercentage = packetLossPercentage.toFixed(2);
                }

                return packetLossPercentage;
            };


            /**
             * Computes the RTT of a cell/result
             *
             * @method _computeRespondingTime
             * @private
             * @param {Object} cellData A result/cell of the JSON input
             * @return {Number} Returns a RTT value
             */
            this._computeRespondingTime = function (cellData) {
                var rtt, resultNomenclature;

                resultNomenclature = dataNomenclatureMapping.result;
                rtt = cellData[resultNomenclature.respondingTime];

                return (rtt != null) ? parseFloat(rtt).toFixed(2) : null;
            };


            /**
             * Get the DNS response data and translates it in an internal stable format
             *
             * @method getNativeDnsResult
             * @param {Number} msmId The id of the measurement
             * @param {Number} prbId The id of the probe
             * @param {Number} timestamp A UNIX timestamp
             * @param {Function} callback A function taking the retrieved data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this.getNativeDnsResult = function (msmId, prbId, timestamp, callback, context) {
                var nomenclatureDnsResponse;

                nomenclatureDnsResponse = {
                    probeId: "prb_id",
                    responseTime: "rt",
                    nsId: "nsid",
                    date: "timestamp",
                    response: "answer",
                    error: "error"
                };

                connector.getNativeDnsResult(msmId, prbId, timestamp, function (data) {
                    var internalResponse, newData, dataItem;

                    newData = [];

                    for (var n = 0, length = data.length; n < length; n++) {
                        dataItem = data[n];

                        internalResponse = { // Translate to internal object
                            probeId: dataItem[nomenclatureDnsResponse.probeId],
                            responseTime: dataItem[nomenclatureDnsResponse.responseTime] || "NA",
                            date: paramsManager.convertRemoteToLocalDate(dataItem[nomenclatureDnsResponse.date]),
                            nsId: dataItem[nomenclatureDnsResponse.nsId],
                            response: dataItem[nomenclatureDnsResponse.response],
                            error: dataItem[nomenclatureDnsResponse.error]
                        };

                        newData.push(internalResponse);
                    }

                    callback.call(context, newData);
                }, this);
            };


            /**
             * Get the closest traceroutes data and translates it in an internal stable format
             *
             * @method getClosestTraceroutes
             * @param {Number} msmId The id of the measurement
             * @param {Number} prbId The id of the probe
             * @param {Number} timestamp A UNIX timestamp
             * @param {Function} callback A function taking the retrieved data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this.getClosestTraceroutes = function (msmId, prbId, timestamp, callback, context) {
                var tracerouteAtlas;

                connector.getClosestTraceroutes(msmId, prbId, timestamp, function (data) {
                    var newData;

                    newData = [];

                    for (var n = 0, length = data.length; n < length; n++) {
                        tracerouteAtlas = new AtlasTraceroute(data[n]);
                        tracerouteAtlas.renderTimestring = function (timestamp) {
                            return '>>> ' + utils.dateToString(utils.timestampToLocalDate(timestamp));
                        };

                        newData.push(tracerouteAtlas.render());
                    }

                    callback.call(context, newData);
                }, this);
            };


            /**
             * Get the closest hostname.bind and checks errors
             *
             * @method getClosestHostnameBind
             * @param {Number} msmId The id of the measurement
             * @param {Number} prbId The id of the probe
             * @param {Number} timestamp A UNIX timestamp
             * @param {Function} callback A function taking the retrieved data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this.getClosestHostnameBind = function (msmId, prbId, timestamp, callback, context) { // Just indirection for now
                var internalResponse, newData, dataItem, nomenclatureHostnameBindResponse;

                connector.getClosestHostnameBind(msmId, prbId, timestamp, function (data) {
                    newData = [];
                    nomenclatureHostnameBindResponse = {
                        probeId: "prb_id",
                        responseTime: "rt",
                        msmId: "msm_id",
                        date: "timestamp",
                        response: "answer",
                        error: "error"
                    };

                    for (var n=0,length=data.length; n<length; n++) {
                        dataItem = data[n];

                        internalResponse = { // Translate to internal object
                            probeId: dataItem[nomenclatureHostnameBindResponse.probeId],
                            responseTime: dataItem[nomenclatureHostnameBindResponse.responseTime] || "NA",
                            date: paramsManager.convertRemoteToLocalDate(dataItem[nomenclatureHostnameBindResponse.date]),
                            msmId: dataItem[nomenclatureHostnameBindResponse.msmId],
                            response: dataItem[nomenclatureHostnameBindResponse.response],
                            error: dataItem[nomenclatureHostnameBindResponse.error]
                        };

                        newData.push(internalResponse);
                    }

                    callback.call(context, newData);
                }, this);

            };

        };

        return IsolationLevelConnectorAtlas;
    });

/**
 * Created by mcandela on 17/12/13.
 */

define('connector.aggregation-level',[
    "connector.atlas.isolation-level"
],
    function(Connector){

        /**
         * AggregationLevelConnector introduces in the query all the information related to the aggregation level.
         * It provides a transparent layer between the tool and the data implementing all the logic
         * about the data aggregation.
         *
         * @class AggregationLevelConnector
         * @constructor
         * @module connector
         */

        var AggregationLevelConnector = function(env){

            var connector, config;

            config = env.config;
            connector = new Connector(env);

            /**
             * From top to bottom: it injects information about the aggregation level.
             * From bottom to top: it parse information about the aggregation level
             *
             * @method retrieveData
             * @param {Object} params A parameters vector
             * @param {Function} callback A function taking the retrieved data as input when it will be ready
             * @param {Object} context The context of the callback
             */

            this.retrieveData = function(params, callback, context){
                var containerWidth;

                containerWidth = env.container.chart.width();
                env.maxNumberOfCellsPerRow = Math.floor(containerWidth / (config.cellsMinWidth + config.xCellsMargin));

                if (params.startDate && params.endDate && env.aggregationLevels && env.aggregationLevels.length > 0){
                    env.aggregationLevel = this._getAggregationLevel(params);
                }

                connector.retrieveData(params, function(data){
                    callback.call(context, data);
                }, this);
            };


            this._getBestAggregationLevel = function(params){
                var aggregationSeconds, timeInterval;

                timeInterval = Math.floor((params.endDate - params.startDate) / 1000);
                aggregationSeconds = timeInterval / env.maxNumberOfCellsPerRow;

                return  (aggregationSeconds > 0) ? aggregationSeconds.toFixed(2) : 0;
            };



            this._getAggregationLevel = function(params){
                var bestLevel, currentLevel;

                if (typeof I_WANT_TO_SHOOT_ON_MY_FOOT != 'undefined'){
                    return 0;
                }

                bestLevel = this._getBestAggregationLevel(params);

                if (env.isNativeAvailable && bestLevel <= env.samplingFrequency){ // Native resolution
                    return 0;
                }

                for (var n=0,length=env.aggregationLevels.length; n<length; n++){
                    currentLevel = env.aggregationLevels[n];
                    if (currentLevel >= bestLevel){
                        break;
                    }
                }

                return currentLevel;
            };


            /**
             * Get the DNS response
             *
             * @method getNativeDnsResult
             * @param {Number} msmId The id of the measurement
             * @param {Number} prbId The id of the probe
             * @param {Number} timestamp A UNIX timestamp
             * @param {Function} callback A function taking the retrieved data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this.getNativeDnsResult = function(msmId, prbId, timestamp, callback, context){
                connector.getNativeDnsResult(msmId, prbId, timestamp, callback, context);
            };


            /** Get the closest traceroutes
            *
            * @method getClosestTraceroutes
            * @param {Number} msmId The id of the measurement
            * @param {Number} prbId The id of the probe
            * @param {Number} timestamp A UNIX timestamp
            * @param {Function} callback A function taking the retrieved data as input when it is ready
            * @param {Object} context The context of the callback
            */

            this.getClosestTraceroutes = function(msmId, prbId, timestamp, callback, context){
                connector.getClosestTraceroutes(msmId, prbId, timestamp, callback, context);
            };


            /**
             * Get the closest hostname.bind and checks errors
             *
             * @method getClosestHostnameBind
             * @param {Number} msmId The id of the measurement
             * @param {Number} prbId The id of the probe
             * @param {Number} timestamp A UNIX timestamp
             * @param {Function} callback A function taking the retrieved data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this.getClosestHostnameBind = function(msmId, prbId, timestamp, callback, context){ // Just indirection for now

                // No errors checks for now
                connector.getClosestHostnameBind(msmId, prbId, timestamp, callback, context);
            };

        };

        return AggregationLevelConnector;
    });
    /**
 * Created with JetBrains WebStorm.
 * User: mcandela
 * Date: 10/16/13
 * Time: 4:27 PM
 * To change this template use File | Settings | File Templates.
 */

define(
    'connector.anti-flood',[
        "connector.aggregation-level"
    ],
    function(Connector){

        /**
         * AntiFloodConnector it is a layer implementing a client-side anti-flood system.
         * This anti-flood layer allows cumulative query to the data-api reducing considerably the amount of
         * interactions with the network stack.
         *
         * @class AntiFloodConnector
         * @constructor
         * @module connector
         */

        var AntiFloodConnector = function(env){

            var connector, timeoutLoadingTimer, firstCall, config;

            firstCall = true;
            config = env.config;
            connector = new Connector(env);

            /**
             * From top to bottom: it drops or aggregates queries.
             * From bottom to top: it responds to the single query in the usual way.
             *
             * @method retrieveData
             * @param {Object} params A parameters vector
             * @param {Function} callback A function taking the retrieved data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this.retrieveData = function(params, callback, context){

                if (firstCall ==  false){
                    clearTimeout(timeoutLoadingTimer);
                    timeoutLoadingTimer = setTimeout(
                        function(){
                            connector.retrieveData(params, callback, context);
                        },
                        config.antiFloodTimer);

                    env.antiFloodTimer = null;
                }else{
                    firstCall =  false;
                    connector.retrieveData(params, callback, context);
                }
            };


            /** Get the DNS response
             *
             * @method getNativeDnsResult
             * @param {Number} msmId The id of the measurement
             * @param {Number} prbId The id of the probe
             * @param {Number} timestamp A UNIX timestamp
             * @param {Function} callback A function taking the retrieved data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this.getNativeDnsResult = function(msmId, prbId, timestamp, callback, context){
                connector.getNativeDnsResult(msmId, prbId, timestamp, callback, context);
            };


            /** Get the closest traceroutes
             *
             * @method getClosestTraceroutes
             * @param {Number} msmId The id of the measurement
             * @param {Number} prbId The id of the probe
             * @param {Number} timestamp A UNIX timestamp
             * @param {Function} callback A function taking the retrieved data as input when it is ready
             * @param {Object} context The context of the callback
             */
            this.getClosestTraceroutes = function(msmId, prbId, timestamp, callback, context){
                connector.getClosestTraceroutes(msmId, prbId, timestamp, callback, context);
            };


            /**
             * Get the closest hostname.bind and checks errors
             *
             * @method getClosestHostnameBind
             * @param {Number} msmId The id of the measurement
             * @param {Number} prbId The id of the probe
             * @param {Number} timestamp A UNIX timestamp
             * @param {Function} callback A function taking the retrieved data as input when it is ready
             * @param {Object} context The context of the callback
             */

            this.getClosestHostnameBind = function(msmId, prbId, timestamp, callback, context){ // Just indirection for now

                // No errors checks for now
                connector.getClosestHostnameBind(msmId, prbId, timestamp, callback, context);
            };

        };

        return AntiFloodConnector;
    });
/**
 * Copyright 2014 - mcandela
 * Date: 06/06/14
 * Time: 17:17
 */
define('connector.log-connector',[
    "lib.jquery-libs-amd"
], function($){

    /**
     * Connector is in charge of connecting the data-apis and providing a JSON format to the layers over.
     *
     * @class LogRestConnector
     * @constructor
     * @module connector.log-connector
     */

    var LogRestConnector = function(env){
        var logStorageUrl, errorStorageUrl, appTag;

        logStorageUrl = env.config.storageLogRestApiUrl;
        errorStorageUrl = env.config.storageErrorRestApiUrl;

        appTag = env.config.logAppTag;

        /**
         * Sends logs to the servers
         *
         *
         * @method log
         * @param {String} type The type of the log
         * @param {String} log The body of the log
         */

        this.log = function(type, log){
            this._persist(logStorageUrl, this._createJson(type, log));
        };


        /**
         * Sends errors to the servers
         *
         *
         * @method error
         * @param {String} type The type of the error
         * @param {String} error The body of the error
         */

        this.error = function(type, error){
            this._persist(errorStorageUrl, this._createJson(type, error));
        };


        /**
         * This method creates a json version of a log entry
         *
         *
         * @method _createJson
         * @private
         * @param {String} type The type of the error
         * @param {String} log The body of the error
         */

        this._createJson = function(type, log){
            return {app: appTag, type: type, log: log};
        };


        /**
         * This method handles the ajax call to POST the error to the server
         *
         *
         * @method _persist
         * @private
         * @param {String} url The type of the error
         * @param {String} json The body of the error
         */

        this._persist = function(url, json){
            var xhr;

            try {

                xhr = $.ajax({
                    type: "POST",
                    url: url,
                    data: json,
                    crossDomain: true,
                    dataType: 'json'
                });

                if (xhr && xhr.readyState>3 && xhr.readyState<4) {
                    xhr.abort();
                }

            } catch(error) {
            }
        };

    };


    return LogRestConnector;
});
/**
 * Created by mcandela on 23/01/14.
 */

define('connector.facade',[
    "env.utils",
    "connector.anti-flood",
    "env.params-manager",
    "connector.log-connector"
], function(utils, Connector, paramsManager, LogRestConnector){

    /**
     * ConnectorFacade is the singleton Facade of the whole connector level.
     * It provides high-level connectivity functions able to receive as input model objects and converting
     * them in low-level parameters.
     *
     * @class ConnectorFacade
     * @constructor
     * @module connector
     */

    var ConnectorFacade = function(env){
        var connector, indexedRows, logConnector;

        connector = new Connector(env);
        logConnector = new LogRestConnector(env);


        /**
         * From top to bottom: it provides a way to query the data-api with the current valid parameters.
         *
         * @method retrieveData
         * @param {Function} callback A function taking the retrieved data as input when it is ready
         * @param {Object} context The context of the callback
         */

        this.retrieveData = function(callback, context){

            env.lastRequest = new Date();
            connector.retrieveData(env.params, function(data){
                this.rows = data.rows;
                this.group = data.group;

                env.lastUpdate = new Date();
                if (callback){
                    callback.call(context, data);
                }
            }, this);


        };

        /** Get all the rows
         *
         * @method getRows
         * @return {Array} A list of rows
         */

        this.getRows = function(){
            if (!this.rows){
                this.retrieveData();
            }

            return this.rows;
        };


        /** Get a row given an id
         *
         * @method getRowById
         * @param {Number} id An id
         * @return {Object} A row of the model layer
         */

        this.getRowById = function(id){
            var rows, row;

            if (!indexedRows){

                rows = this.getRows();
                indexedRows = {};

                for (var n=0,length=rows.length; n<length; n++){
                    row = rows[n];
                    indexedRows[row.id] = row;
                }

            }
            return indexedRows[id];
        };


        /** Get the group of the last query
         *
         * @method getGroup
         * @return {Object} A group
         */

        this.getGroup = function(){
            return this.group;
        };


        /** Get additional data-api URLs given a cell
         *
         * @method getCellDataUrls
         * @param {Object} cell A cell object
         * @return {Object} A map of URLs for the selected sample
         */

        this.getCellDataUrls = function(cell){
            var listSampleUrls, urlTmp, row;

            row = cell.row;
            listSampleUrls = row.urlsMap.sample;

            for (var n=0,length=listSampleUrls.length; n<length; n++){
                urlTmp = listSampleUrls[n];

                urlTmp.url = utils.setParam('format', 'json', urlTmp.url);

                if (row.___type___ == "probe"){
                    urlTmp.url = utils.setParam('prb_id', paramsManager.convertLocalToRemoteId(row.id), urlTmp.url);
                }

                urlTmp.url = utils.setParam('start', paramsManager.convertLocalToRemoteDate(cell.time), urlTmp.url);

                if (cell.endTime){
                    urlTmp.url = utils.setParam('stop', paramsManager.convertLocalToRemoteDate(cell.endTime), urlTmp.url);
                }else{
                    urlTmp.url = utils.setParam('stop', paramsManager.convertLocalToRemoteDate(new Date(cell.time.getTime() + (env.retrievedAggregationLevel * 1000))), urlTmp.url);
                }
            }

            return listSampleUrls;
        };


        /** Get the url of the probes page
         *
         * @method getProbesPageUrl
         * @param {Number} probeId The id of the probe
         * @param {Object} params A parameters vector
         * @return {String} An URL
         */

        this.getProbesPageUrl = function(probeId, params){
            return 'https://atlas.ripe.net/dnsmon/probes/' + paramsManager.convertLocalToRemoteId(probeId)+ '?zone=' + paramsManager.convertLocalToRemoteId(params.root);
        };


        /** Get additional data-api URLs given a cell
         *
         * @method getDataUrls
         * @param {Object} cell A cell object
         * @return {Object} A map of URLs for the whole time window
         */

        this.getDataUrls = function(cell){
            var listOverviewUrls, urlTmp, row;

            row = cell.row;
            listOverviewUrls = row.urlsMap.overview;

            for (var n=0,length=listOverviewUrls.length; n<length; n++){
                urlTmp = listOverviewUrls[n];

                urlTmp.url = utils.setParam('format', 'json', urlTmp.url);

                if (row.___type___ == "probe"){
                    urlTmp.url = utils.setParam('prb_id', paramsManager.convertLocalToRemoteId(row.id), urlTmp.url);
                }
            }

            return listOverviewUrls;
        };


        /** Get the DNS response, in a human readable format, given a cell
         *
         * @method getNativeDnsResult
         * @param {Object} cell A cell object
         * @param {Function} callback A function taking the retrieved data as input when it is ready
         * @param {Object} context The context of the callback
         */

        this.getNativeDnsResult = function(cell, callback, context){
            var msmId, prbId, timestamp;

            msmId = this._getMeasurementId(cell);
            prbId = paramsManager.convertLocalToRemoteId(cell.row.id);
            timestamp = paramsManager.convertLocalToRemoteDate(cell.time);

            connector.getNativeDnsResult(msmId, prbId, timestamp, callback, context);
        };


        /** Get the closest traceroutes given a cell
         *
         * @method getClosestTraceroutes
         * @param {Object} cell A cell object
         * @param {Function} callback A function taking the retrieved data as input when it is ready
         * @param {Object} context The context of the callback
         */

        this.getClosestTraceroutes = function(cell, callback, context){
            var msmId, prbId, timestamp, measurementType;

            measurementType = "traceroute";

            msmId = this._getMeasurementIdByType(cell, measurementType);
            prbId = paramsManager.convertLocalToRemoteId(cell.row.id);
            timestamp = paramsManager.convertLocalToRemoteDate(cell.time);

            connector.getClosestTraceroutes(msmId, prbId, timestamp, callback, context);
        };

        /**
         * Get the closest hostname.bind and checks errors
         *
         * @method getClosestHostnameBind
         * @param {Object} cell A cell object
         * @param {Function} callback A function taking the retrieved data as input when it is ready
         * @param {Object} context The context of the callback
         */

        this.getClosestHostnameBind = function(cell, callback, context){
            var msmId, prbId, timestamp, measurementType;

            measurementType = "hostname_bind";

            msmId = this._getMeasurementIdByType(cell, measurementType);
            prbId = paramsManager.convertLocalToRemoteId(cell.row.id);
            timestamp = paramsManager.convertLocalToRemoteDate(cell.time);

            // No errors checks for now
            connector.getClosestHostnameBind(msmId, prbId, timestamp, callback, context);
        };



        /** Get the measurement id given a cell
         *
         * @method _getMeasurementId
         * @private
         * @param {Object} cell A cell object
         * @return {String} The measurement id
         */

        this._getMeasurementId = function(cell){
            var dataUrls, urlItem;

            dataUrls = this.getDataUrls(cell);

            for (var n=0,length=dataUrls.length; n<length; n++){
                urlItem = dataUrls[n];
                if (urlItem.current == true){
                    return urlItem.measurementId;
                }
            }

            return null;
        };


        /** Get the DNS response, in a human readable format, given a cell
         *
         * @method _getMeasurementIdByType
         * @private
         * @param {Object} cell A cell object
         * @param {String} type A valid type
         * @return {Number} The measurement id
         */

        this._getMeasurementIdByType = function(cell, type){
            var dataUrls, urlItem;

            dataUrls = this.getDataUrls(cell);

            for (var n=0,length=dataUrls.length; n<length; n++){
                urlItem = dataUrls[n];

                if (urlItem.type == type){
                    return urlItem.measurementId;
                }
            }

            return null;
        };


        /** Sends logs to the servers
         *
         * @method persistLog
         * @param {String} type The type of the log
         * @param {String} log The body of the log
         */

        this.persistLog = function(type, log){
            var browserVersion;

            if (env.config.persistLog) {
                browserVersion = utils.getBrowserVersion();
                logConnector.log(type, log + ' (browser: ' + browserVersion.name + ' ' + browserVersion.version.toString() + ')');
            }

        };


        /** Sends errors to the servers
         *
         * @method persistError
         * @param {String} type The type of the error
         * @param {String} log The body of the error
         */

        this.persistError = function(type, log){
            var browserVersion;

            if (env.config.persistErrors) {
                browserVersion = utils.getBrowserVersion();
                logConnector.error(type, log + ' (browser: ' + browserVersion.name + ' ' + browserVersion.version.toString() + ', codeVersion: ' + env.version + ')');
            }

        };

    };

    return ConnectorFacade;
});
/**
 * Created by mcandela on 10/01/14.
 */

define('session.facade',[
    "env.utils",
    "lib.jquery-libs-amd"
], function(utils, $){

    /**
     * SessionManager is the layer providing all the functions to manage the session.
     * It provides a transparent layer for the tool to store and retrieve parameters.
     * The persistence can be provided (or not) by cookies or with any other possible server interaction.
     *
     * @class SessionManager
     * @constructor
     * @module session
     */

    var SessionManager = function(env){
        var volatileValues, session, defaultSession, cookieSuffix, cookiePreSuffix, config, useLocalPersistence,
            expireDate, localParamsChecked;

        config = env.config;
        useLocalPersistence = config.useLocalPersistenceForSettings;
        session = {};
        expireDate = new Date((new Date()).getTime() + (config.localPersistenceValidityTimeMinutes * 60 * 1000)); // Expiration date for the persistence
        localParamsChecked = false;

        defaultSession = { // Pre-filled session with default values
            "exclude-errors": config.excludeErrorsByDefault
        };

        volatileValues = []; // Keys in this list are not stored persistently
        cookiePreSuffix = "dnsmon_"; // A suffix to create a better scope for the cookies

        //Compute the final suffix
        cookieSuffix = utils.getInstanceSuffix(env.parentDom);
        cookieSuffix = cookiePreSuffix + cookieSuffix + "_";


        /**
         * This method saves a session values if it is not in the volatileValues list
         *
         * @method saveValue
         * @input {String} key A key
         * @input {String} value A value
         */

        this.saveValue = function(key, value){
            var keyString, valueString;

            keyString = key.toString(); // Cast input to String
            valueString = value.toString();

            session[keyString] = valueString;

            if (useLocalPersistence && utils.indexOf(keyString, volatileValues) == -1){ // The current item is not volatile
                this._persistValue(keyString, valueString);
            }
        };


        /**
         * This method saves a session values if it is not in the volatileValues list
         *
         * @method saveValue
         * @input {String} key A key
         * @input {String} value A value
         */

        this._notLocalParams = function(){
            var retrievedVersion;

            for (var paramKey in session){

                if (utils.indexOf(paramKey, volatileValues) == -1){
                    retrievedVersion = this._retrieveValue(paramKey); // Do this after all the checks (it is expensive)

                    if (retrievedVersion != null && retrievedVersion != '' + session[paramKey]){
                        return true;
                    }
                }
            }
            return false;
        };


        /**
         * This method returns a session value given a key. It considers defaults, persistents and temporary (e.g. permalinks) session values
         *
         * @method getValue
         * @input {String} key A key
         * @return {String} A value
         */

        this.getValue = function(key){
            var keyString;

            keyString = key.toString();

            if (useLocalPersistence && session[keyString] == null && utils.indexOf(keyString, volatileValues) == -1){ // Lazy approach && the current item is not volatile
                session[keyString] = this._retrieveValue(keyString);
            }

            if (session[keyString] == null && defaultSession[keyString] != null){ // Lazy approach && there is a default value
                session[keyString] = defaultSession[keyString];
            }

            if (localParamsChecked == false){
                localParamsChecked = true;
                if (this._notLocalParams()){
                    env.mainView.showMessage(env.lang.notYourConfig);
                }
            }

            return session[keyString];
        };


        /**
         * This method saves a value locally
         *
         * @method _persistValue
         * @private
         * @input {String} key A key
         * @return {Boolean} If true the value has been saved correctly
         */

        this._persistValue = function(key, value){
            var saved;

            try{
                $.cookie(cookieSuffix + key, value, {expires: expireDate});
                saved = true;
            }catch(error){
                utils.log(error, env.debugMode);
                saved = false;
            }

            return saved;
        };


        /**
         * This method reads a value saved locally
         *
         * @method _retrieveValue
         * @private
         * @input {String} key A key
         * @return {String} A value
         */

        this._retrieveValue = function(key){
            var value;

            try{
                value = $.cookie(cookieSuffix + key);
            }catch(error){
                utils.log(error, env.debugMode);
                value = null;
            }

            return value;
        };


        /**
         * This method returns the actual session
         *
         * @method getSession
         * @return {Object} A vector of values describing the actual session
         */

        this.getSession = function(){
            for (var key in defaultSession){
                if (!session.hasOwnProperty(key)){
                    session[key] = this.getValue(key);
                }
            }

            return session;
        };


        /**
         * This method imposes temporary a session
         *
         * @method setSession
         * @input {Object} newSession A vector of values describing a session
         */

        this.setSession = function(newSession){
            session = newSession;
        };

    };

    return SessionManager;
});
/**
 * Created by mcandela on 11/12/13.
 */

define('env.history-manager',[
    "env.utils",
    "env.params-manager"
], function(utils, paramsManager){

    /**
     * HistoryManager provides all the functions to manage the history and the back/forward browser interactions.
     *
     * @class HistoryManager
     * @constructor
     * @module environment
     */

    var HistoryManager = function(env){
        var config, pushNewStatuses, keyPrefix, $this, initialisationHistory, initialisationSession, isInitialStatus,
            isFirstAutoUpdateAction;

        $this = this;
        config = env.config;
        pushNewStatuses = true;
        isInitialStatus = true;
        isFirstAutoUpdateAction = true;

        keyPrefix = utils.getInstanceSuffix(env.parentDom);


        /**
         * This method initialises the module. It pushes in the history and updates the URL with the initialisation query
         * and session parameters.
         *
         * @method init
         */

        this.init = function(){
            if (config.historyInUrlAtInitialisation){
                this.update();
            }else{
                initialisationHistory = utils.lightClone(env.params);
                initialisationSession = utils.lightClone(env.session.getSession());
            }
        };


        /**
         * This method pushes in the history and updates the URL with the actual query and session parameters.
         *
         * @method update
         */

        this.update = function(){
            var params, currentState, session;

            if (config.historyInUrl && pushNewStatuses){
                params = env.params;
                session = env.session.getSession();

                isInitialStatus = false;

                currentState = this._generateStateUrl(params, session);

                if (!env.isUpdatedPeriodicallyActive || isFirstAutoUpdateAction) { // Is not an update action or is the first update action

                    window.history.pushState({}, 'dnsmon_state', currentState);
                    isFirstAutoUpdateAction = !env.isUpdatedPeriodicallyActive;

                }else{

                    window.history.replaceState({}, 'dnsmon_state', currentState);

                }
            }else{
                pushNewStatuses = true;
            }
        };


        /**
         * This method pushes in the history and updates the URL with the actual query and session parameters.
         *
         * @method _generateStateUrl
         * @private
         *
         */

        this._generateStateUrl = function(params, session){
            return '?' + this._generateParametersUrl(params, this._generateSessionUrl(session)).split('?')[1]; // Remove the host
        };


        /**
         * This method creates an URL with all the session parameters.
         *
         * @method _generateSessionUrl
         * @private
         * @input {Object} session A vector of session parameters
         * @return {String} The updated URL
         */

        this._generateSessionUrl = function(session){

            var actualUrl;

            actualUrl = utils.getCurrentUrl();

            for (var key in session){
                actualUrl = utils.setParam(keyPrefix + '.session.' + key, session[key], actualUrl);
            }

            return actualUrl;
        };


        /**
         * This method updates the given URL with all the query parameters.
         *
         * @method _generateParametersUrl
         * @private
         * @input {Object} params A vector of query parameters
         * @input {String} sessionUrl An URL
         * @return {String} The updated URL
         */

        this._generateParametersUrl = function(params, sessionUrl){
            var externalParams, actualUrl;

            actualUrl = sessionUrl;
            externalParams = paramsManager.fromInternalToExternal(params);

            for (var key in externalParams){
                actualUrl = utils.setParam(keyPrefix + '.' + key, externalParams[key], actualUrl);
            }

            return actualUrl;
        };


        /**
         * This method is triggered every time there is a back/forward event in the browser. It recovers and applies
         * the history.
         *
         * @method updateStatusFromUrl
         */

        this.updateStatusFromUrl = function(){

            if (!isInitialStatus){ //Chrome and Safari workaround (html5 specs: onpopstate should not be triggered at initialisation time
                pushNewStatuses = false;

                if (env.isUpdatedPeriodicallyActive){// Disable the keep updated if active
                    env.mainView.controlPanel.keepUpdatedActive(false);
                }

                if (!$this.setStatusFromUrl()){ // If the status has not been set, set the status stored at initialisation time

                    env.params = initialisationHistory;
                    env.session.setSession(initialisationSession);
                }

                env.mainView.redraw(function(){ // Redraw the scene
                    env.mainView.breadcrumbs.pushHistory(this._createHistory(env.params));
                }, $this);
            }

        };


        /**
         * This method applies the current permalink to the scene.
         *
         * @method setStatusFromUrl
         */

        this.setStatusFromUrl = function(){
            var params, session, paramsAndSession;

            paramsAndSession = utils.getUrlParameters(env.parentDom);

            if (paramsAndSession != null && paramsAndSession.type != null){
                session = paramsAndSession.session;
                env.params.selectedRows = [];
                params = paramsManager.mergeParams(env.params, paramsManager.fromExternalToInternal(paramsAndSession));

                env.params = params;
                env.session.setSession(session);

                env.initialHistory = this._createHistory(params);

                return true;
            }

            return false;
        };


        /**
         * This method re-creates a navigation history given a vector of query parameters.
         * So it allows the user to share also a navigation history by sharing a permalink.
         *
         * @method _createHistory
         * @private
         */

        this._createHistory = function(params){
            var history;

            history = [];

            switch(params.type){

                case "servers":

                    history.push({
                        id: params.group + "",
                        params: utils.lightClone(params)
                    });

                    break;

                case "probes":

                    history.push({
                        id: params.root + "",
                        params: {
                            type: "servers",
                            root: null,
                            group: params.root + "",
                            selectedRows: []
                        }
                    });

                    history.push({
                        id: params.group + "",
                        params: utils.lightClone(params)
                    });

                    break;
            }

            return history;
        };


        if (config.allowPermalinks){
            this.setStatusFromUrl();
        }

        if (config.historyInUrl){
            window.onpopstate = this.updateStatusFromUrl;
        }

    };

    return HistoryManager;
});
/**
 * Created with JetBrains WebStorm.
 * User: mcandela
 * Date: 9/20/13
 * Time: 11:01 AM
 * To change this template use File | Settings | File Templates.
 */


/**
 * Some require.js configurations
 */

requirejs.config({
    paths:{
        /* environment */
        "env": DNSMON_ENVIRONMENT_URL + "environment",
        "env.utils": DNSMON_ENVIRONMENT_URL + "utils",
        "env.config": DNSMON_ENVIRONMENT_URL + "config",
        "env.params-manager": DNSMON_ENVIRONMENT_URL + "ParamsManager",
        "env.history-manager": DNSMON_ENVIRONMENT_URL + "HistoryManager",

        "env.languages.en": DNSMON_ENVIRONMENT_URL + "languages/lang-en",

        /* libs */
        "lib.d3": DNSMON_LIB_URL + "d3.v3.amd",
        "lib.jquery": (typeof DNSMON_JQUERY_GLOBAL_DECLARED_URL != 'undefined') ? DNSMON_JQUERY_GLOBAL_DECLARED_URL : DNSMON_LIB_URL + "jquery.min",

        "lib.jquery-ui": (typeof DNSMON_JQUERY_UI_GLOBAL_DECLARED_URL != 'undefined') ? DNSMON_JQUERY_UI_GLOBAL_DECLARED_URL : DNSMON_LIB_URL + "jquery-ui.min",
        "lib.jquery-ui.timepicker": DNSMON_LIB_URL + "jquery-ui.timepicker",

        "lib.jquery.cookie": DNSMON_LIB_URL + "jquery.cookie",
        "lib.date-format": DNSMON_LIB_URL + "dateFormat",
        "lib.atlas-traceroute-printer": DNSMON_LIB_URL + "atlas.traceroute",
        "lib.jquery-libs": DNSMON_LIB_URL + "libs-dist",
        "lib.jquery-libs-amd": DNSMON_LIB_URL + "jquery-libs-amd",

        /* model */
        "model.cell": DNSMON_MODEL_URL + "Cell",
        "model.row": DNSMON_MODEL_URL + "Row",


        /* view */
        "view.main": DNSMON_VIEW_URL + "MainView",
        "view.control-panel": DNSMON_VIEW_URL + "ControlPanelView",
        "view.full-screen": DNSMON_VIEW_URL + "FullScreenView",
        "view.breadcrumbs": DNSMON_VIEW_URL + "BreadcrumbsView",
        "view.ordinal-axis": DNSMON_VIEW_URL + "OrdinalAxisView",
        "view.pop-up": DNSMON_VIEW_URL + "PopUpView",
        "view.template-manager": DNSMON_VIEW_URL + "TemplateManagerView",
        "view.time-axis": DNSMON_VIEW_URL + "TimeAxisView",
        "view.time-overview": DNSMON_VIEW_URL + "TimeOverviewView",


        /* view.svg */
        "view.svg.chart": DNSMON_VIEW_URL + "svg/SvgChartView",
        "view.svg.container": DNSMON_VIEW_URL + "svg/SvgContainerView",
        "view.svg.time-axis": DNSMON_VIEW_URL + "svg/SvgTimeAxisView",
        "view.svg.ordinal-axis": DNSMON_VIEW_URL + "svg/SvgOrdinalAxisView",


        /* controller */
        "controller.gesture-manager": DNSMON_CONTROLLER_URL + "GesturesManager",
        "controller.time": DNSMON_CONTROLLER_URL + "TimeController",


        /* connector */
        "connector.facade": DNSMON_CONNECTOR_URL + "ConnectorFacade",
        "connector.aggregation-level": DNSMON_CONNECTOR_URL + "AggregationLevelConnector",
        "connector.anti-flood": DNSMON_CONNECTOR_URL + "AntiFloodConnector",
        "connector.filter": DNSMON_CONNECTOR_URL + "FilterConnector",
        "connector.log-connector": DNSMON_CONNECTOR_URL + "log/LogRestConnector",


        /* connector.atlas */
        "connector.atlas.rest": DNSMON_CONNECTOR_URL + "atlas/RestConnectorAtlas",
        "connector.atlas.cache": DNSMON_CONNECTOR_URL + "atlas/CacheConnectorAtlas",
        "connector.atlas.error-handler": DNSMON_CONNECTOR_URL + "atlas/ErrorsHandlerConnectorAtlas",
        "connector.atlas.isolation-level": DNSMON_CONNECTOR_URL + "atlas/IsolationLevelConnectorAtlas",


        /* session */
        "session.facade": DNSMON_SESSION_URL + "SessionManager"
    },
    shim:{
        "lib.jquery-ui": {
            deps: ["lib.jquery"]
        },

        "lib.jquery.cookie": {
            deps: ["lib.jquery"]
        },

        "lib.jquery-ui.timepicker": {
            deps: ["lib.jquery-ui"]
        }
    }
});



define('dnsmon/dnsmon-loader',[

    "env.utils",
    "env.config",
    "env.languages.en",
    "lib.jquery-libs-amd",
    "env.params-manager",
    "view.main",
    "connector.facade",
    "session.facade",
    "env.history-manager"

], function(
    utils,
    config,
    language,
    $,
    paramsManager,
    MainView,
    ConnectorFacade,
    SessionFacade,
    HistoryManager
    ){

    var DNSmon = function(instance){
        var env, internalParams, mergedParams, emptyParamVector, instanceParams, queryParams, parentDom, stylesLoaded,
            cssListenerInterval, cssListenerTimeout, cssListener;

        /*
         * Load required stylesheets
         */
        stylesLoaded = document.styleSheets.length;
        utils.loadCss(DNSMON_VIEW_URL + "css/dnsmon_style.css");
        utils.loadCss("https://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css");

        /*
         * Access to the instance
         */
        instanceParams = instance.instanceParams;
        queryParams = instance.queryParams;
        parentDom = instance.domElement;

        // STUFF FOR THE DEMO
        window.grouping = utils.getUrlParam("grouping") == "true";
        window.dynamicHeight = utils.getUrlParam("dheight") == "true";

        /*
         * Convert params
         */
        if (queryParams){
            emptyParamVector = paramsManager.createInternalParamVector();
            internalParams = paramsManager.fromExternalToInternal(queryParams);
            mergedParams = paramsManager.mergeParams(emptyParamVector, internalParams);
        }

        /*
         * Init Dependency Injection Vector
         */
        env = {
            "version": "14.9.3.2",
            "widgetUrl": DNSMON_WIDGET_URL,
            "parentDom": parentDom, //HASH THIS
            "document": utils.encapsulateDom($(document)),
            "config": config,
            "params": mergedParams,
            "lang": language,
            "maxHeight": ((instanceParams.hasOwnProperty("maxHeight")) ? instanceParams.maxHeight : Math.max($(document).height(), config.chartMaxHeight)),
            "minHeight": ((instanceParams.hasOwnProperty("minHeight")) ? instanceParams.minHeight : config.chartMinHeight),
            "callbacks": {
                change: ((instanceParams.hasOwnProperty("change")) ? [instanceParams.change] : []),
                load: ((instanceParams.hasOwnProperty("load")) ? [instanceParams.load] : [])
            },

            "showFilter":  ((instanceParams.hasOwnProperty("showFilter")) ? instanceParams.showFilter : config.showFilterDefaultValue),
            "debugMode": ((instanceParams.hasOwnProperty("debugMode")) ? instanceParams.debugMode : (utils.getUrlParam('debug_mode') == 'true')),
            "activeKeys": ((instanceParams.hasOwnProperty("activeKeys")) ? instanceParams.activeKeys : config.activeKeysByDefault),
            "activeMouseZoom": ((instanceParams.hasOwnProperty("activeMouseZoom")) ? instanceParams.activeMouseZoom : config.activeMouseZoomByDefault),
            "activeGestures": ((instanceParams.hasOwnProperty("activeGestures")) ? instanceParams.activeGestures : config.activeGesturesByDefault),
            "localCacheActive": ((instanceParams.hasOwnProperty("localCacheActive")) ? instanceParams.localCacheActive : config.localCacheActiveByDefault),
            "grouping": ((instanceParams.hasOwnProperty("grouping")) ? instanceParams.grouping : config.groupingByDefault),
            "timeEventsActive": config.timeEventsActiveByDefault,
            "isUpdatedPeriodicallyActive": ((instanceParams.hasOwnProperty("autoUpdate")) ? instanceParams.autoUpdate : config.autoUpdateActiveByDefault),
            "fullScreenActive": ((instanceParams.hasOwnProperty("fullScreen")) ? instanceParams.fullScreen : config.fullScreenActiveByDefault)
        };


        /*
         * Initialize Point of Access to Packages
         */
        env.mainView = new MainView(env); //Representation Facade
        env.connector = new ConnectorFacade(env); //Connector Facade
        env.session = new SessionFacade(env); //Session Facade
        env.history = new HistoryManager(env); //History Manager


        /*
         * Check if stylesheets are loaded
         */
        cssListenerInterval = 50; //50 ms
        cssListenerTimeout = 10000; // 10 secs
        cssListener = setInterval(function(){

            if(document.styleSheets.length >= stylesLoaded + 2){

                clearInterval(cssListener);
                utils.logErrors(env.connector.persistError); //Persist errors
                env.mainView.init(parentDom, instanceParams);

            }else{
                if (cssListenerTimeout <= 0){
                    clearInterval(cssListener);
                    console.log("It is not possible to load stylesheets.");
                }
                cssListenerTimeout -= cssListenerInterval;
            }
        }, cssListenerInterval);


        /**
         * A set of methods exposed outside
         */
        return {

            setParams: function(params){
                var newParams;

                newParams = paramsManager.fromExternalToInternal(params);
                env.params = paramsManager.mergeParams(env.params, newParams);
                env.mainView.redraw();
            },

            on: function(type, callback){
                if (!env.callbacks[type]){
                    env.callbacks[type] = [];
                }
                env.callbacks[type].push(callback);
            },

            off: function(type){
                env.callbacks[type] = [];
            },

            getParams: function(){
                return paramsManager.fromInternalToExternal(env.params);
            },

            getEnvironment: function(){
                return env;
            }

        };

    };

    return DNSmon;
});



//# sourceMappingURL=dnsmon-dist.js.map