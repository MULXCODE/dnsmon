/**
 * Created by mcandela on 20/11/13.
 */

define([], function(){

    var ControlPanelView = function(env){
        var container, chart, thresholdsPopup, legendColors, legendPercentages, legendUnit, config, lang, templateManager,
            disabledOpacity, normalOpacity, filtersPopup;

        config = env.config;
        lang = env.lang;
        container = env.container;
        chart = container.chart;
        templateManager = env.mainView.templateManager;

        disabledOpacity = config.style.disabledControllerOpacity;
        normalOpacity = config.style.normalControllerOpacity;

        this.render = function(parentDom){
            var $this, datepickers;

            $this = this;
            this.dom = $(templateManager.controlPanel);
            parentDom.$.prepend($this.dom);

            this.dom.css("margin-left", config.labelWidth);
            this.dom.css("width", env.container.chart.width() + "px");

            datepickers = $(templateManager.timepickersPopup);
            filtersPopup = $(templateManager.filtersPopup);
            thresholdsPopup = $(templateManager.thresholdsPopup);

            this.dialogPopUp = this.dom.find(".dnsmon-popup");

            this.legend = this.dom.find(".legend");
            this.aggregationLevelLegend = this.dom.find(".legend-agr-level");

            this.aggregationLevelLegend.html(lang.aggregationLevelLabel + env.aggregationLabel);

            this.viewSelect = this.dom.find(".legend-controller-select");

            this.thresholdsPopup = {
                "dom": thresholdsPopup,
                "slider": thresholdsPopup.find(".thresholds-slider"),
                "legendPercentages": thresholdsPopup.find(".pls-percentage"),
                "legendUnit": thresholdsPopup.find(".pls-unit"),
                "legendColors": thresholdsPopup.find(".pls-color")
            };

            this.filtersPopup = {
                "dom": filtersPopup,
                "excludeErrorsCheck": filtersPopup.find(".exclude-errors")
            };

            this.datepickers = {
                "dom": datepickers,
                "start": datepickers.find(".timepicker-start"),
                "stop": datepickers.find(".timepicker-stop")
            };

            legendColors = $this.legend.find(".pls-color");
            legendUnit = $this.legend.find(".pls-unit");
            legendPercentages = $this.legend.find(".pls-percentage");

            legendColors.last().css("background-color", env.mainView.color(env.mainView.colorDomainBreakPoints[0]-1));
            legendColors.first().css("background-color", env.mainView.color(env.mainView.colorDomainBreakPoints[1]));

//        legendPercentages.last().html(environment.mainView.colorDomainBreakPoints[0]);
//        legendPercentages.first().html(environment.mainView.colorDomainBreakPoints[1]);

//        this.updateLegend(environment.mainView.colorDomainBreakPoints[0], environment.mainView.colorDomainBreakPoints[1]);

            this.thresholdsPopup.legendPercentages.last().html(env.mainView.colorDomainBreakPoints[0]);
            this.thresholdsPopup.legendPercentages.first().html(env.mainView.colorDomainBreakPoints[1]);

            this.thresholdsPopup.legendColors.last().css("background-color", env.mainView.color(env.mainView.colorDomainBreakPoints[0]-1));
            this.thresholdsPopup.legendColors.first().css("background-color", env.mainView.color(env.mainView.colorDomainBreakPoints[1]));


            this.dialogPopUp.dialog({
                resizable: false,
                height: 140,
                modal: true,
                hide: 200,
                autoOpen: false,
                show: 100
            });

            $this.datepickers.start.datepicker({
                minDate: env.measurementStartTime,
                maxDate: env.measurementEndTime
            });

            $this.datepickers.stop.datepicker({
                minDate: env.measurementStartTime,
                maxDate: env.measurementEndTime
            });

            $this.datepickers.start.datepicker("setDate", env.params.startDate);
            $this.datepickers.stop.datepicker("setDate", env.params.endDate);

            this.initTimesEvents();
        };

        this.loadPossibleView = function(){
            var queryType;
            queryType = env.params.type;

            this.removeAllViews();

            switch(queryType){
                case "probes":
                    this.addPossibleView(lang.packetLossLabel, "pls");
                    this.addPossibleView(lang.responseTimeLabel, "rtt");
                    break;

                case "servers":
                    this.addPossibleView(lang.packetLossLabel, "pls");
                    this.addPossibleView(lang.responseTimeLabel, "rtt");
                    break;

                case "instances":
                    this.addPossibleView(lang.numberProbesLabel, "prb");
                    this.addPossibleView(lang.responseTimeLabel, "rtt");
                    break;
            }
        };

        this.initTimesEvents = function(){
            var timeController, manualZoomFactor, $this;

            timeController = env.mainView.timeController;
            manualZoomFactor = config.manualZoomFactor;
            $this = this;

            this.updatePeriodicallyButton = this.dom
                .find(".keep-updated")
                .on("click", function(){
                    if ($this.isUpdatedPeriodically == true){
                        $(this).find('img').attr("src", env.widgetUrl + 'view/img/keep_updated_icon.png');
                        env.mainView.keepUpdated(false);
                    }else{
                        $(this).find('img').attr("src", env.widgetUrl + 'view/img/keep_updated_icon_move.gif');
                        env.mainView.keepUpdated(true);
                    }

                    $this.isUpdatedPeriodically = !$this.isUpdatedPeriodically;
                });

            this.zoomInButton = this.dom
                .find(".zoom-in")
                .attr("title", lang.zoomInTitle)
                .on("click", function(){
                    if (env.isZoomableIn){
                        timeController.zoomIn.call(timeController, manualZoomFactor);
                    }
                });

            this.zoomOutButton = this.dom
                .find(".zoom-out")
                .attr("title", lang.zoomOutTitle)
                .on("click", function(){
                    if (env.isZoomableOut){
                        timeController.zoomOut.call(timeController, manualZoomFactor);
                    }
                });

            this.leftButton = this.dom
                .find(".left")
                .attr("title", lang.shiftLeftTitle)
                .on("click", function(){
                    if (env.isTranslableLeft){
                        timeController.shiftLeft.call(timeController);
                    }
                });

<<<<<<< HEAD
            this.rightButton = this.dom
                .find(".right")
                .attr("title", lang.shiftRightTitle)
                .on("click", function(){
                    if (env.isTranslableRight){
                        timeController.shiftRight.call(timeController);
                    }
=======
                $this.dialogPopUp.dialog("open");
                $this.dialogPopUp.dialog({
                    width: 300,
                    height: 170
>>>>>>> d7775c9f70ee9117392a6ab5175081eec7be022b
                });

            this.timepickerButton = this.dom
                .find(".timepicker")
                .attr("title", lang.changeTimeWindowTitle)
                .on("click", function(){

                    $this.dialogPopUp.dialog({
                        title: lang.changeTimeWindowTitle,
                        buttons: {
                            "Cancel": function() {
                                $(this).dialog("close");
                            },

                            "Apply": function() {
                                env.params.startDate = $this.datepickers.start.datepicker('getDate');
                                env.params.endDate = $this.datepickers.stop.datepicker('getDate');
                                env.mainView.updateXDomain();
                                $(this).dialog("close");
                            }
                        }
                    });

                    $this.dialogPopUp.html($this.datepickers.dom);
                    $this.dialogPopUp.dialog("open");

                });

            this.thresholdsButton = this.dom
                .find(".thresholds")
                .attr("title", lang.changeColorsRangeTitle)
                .on("click", function(){
                    var thresholdsRanges;

                    $this.dialogPopUp.dialog({
                        title: lang.changeColorsRangeTitle,
                        buttons: {
                            "Close": function() {
                                $(this).dialog("close");
                            }
                        }
                    });

                    $this.dialogPopUp.dialog("open");
                    $this.dialogPopUp.dialog({
                        width: 300,
                        height: 190
                    });

                    thresholdsRanges = $this._getThresholdsRanges();
                    $this.dialogPopUp.html($this.thresholdsPopup.dom);
                    $this.thresholdsPopup
                        .slider
                        .slider({
                            range: true,
                            min: thresholdsRanges[0],
                            max: thresholdsRanges[1],
                            values: [parseInt(legendPercentages.last().html()), parseInt(legendPercentages.first().html())],
                            slide: function(event, ui) {
                                var newValuesRange, offsetMinimum;

                                offsetMinimum = 0.00000001;

                                $this.updateLegend(ui.values[0], ui.values[1]);

                                newValuesRange = [thresholdsRanges[0], ui.values[0] + offsetMinimum, ui.values[0] + offsetMinimum, ui.values[1] + offsetMinimum, thresholdsRanges[1]];
                                env.mainView.updateOnlyColors(newValuesRange);
                            }
                        });
                });


            this.allrowsButton = this.dom
                .find(".allrows")
                .attr("title", lang.allRowsTitle)
                .css("opacity", disabledOpacity)
                .on("click", function(){
                    if (env.params.selectedRows.length != 0){

                        env.params.selectedRows = [];
                        env.mainView.redraw();
                    }
                });

            this.filterSelection = this.dom
                .find(".filters")
                .attr("title", lang.filterSelectionTitle)
                .on("click", function(){

                    $this.dialogPopUp.dialog({
                        title: lang.filtersPopupTitle,
                        buttons: {
                            "Close": function() {
                                $(this).dialog("close");
                            }
                        }
                    });

                    $this.dialogPopUp.dialog("open");
                    $this.dialogPopUp.dialog({
                        width: 300,
                        height: 170
                    });

                    $this.dialogPopUp.html($this.filtersPopup.dom);
                    $this.filtersPopup
                        .excludeErrorsCheck
                        .off("click")
                        .on("click", function(){
                            env.excludeErrors = $(this).is(":checked");
                            env.mainView.redraw();
                        });

                });

            this.viewSelect
                .on("change", function(){
                    env.showFilter = $(this).val();
                    env.mainView.updateColorScales();
                    env.mainView.redraw();
                });
        };

        this._getThresholdsRanges = function(){

            switch(env.showFilter){
                case "pls":
                    return [0, 100];
                    break;

                case "rtt":
                    return [0, 5000];
                    break;

                case "prb":
                    return [0, 5000];
                    break;
            }
        };

        this.update = function(){
            this.allrowsButton.css("opacity", (env.params.selectedRows.length == 0) ? disabledOpacity : normalOpacity);
            this.rightButton.css("opacity", (env.isTranslableRight == false) ? disabledOpacity : normalOpacity);
            this.leftButton.css("opacity", (env.isTranslableLeft == false) ? disabledOpacity : normalOpacity);
            this.zoomInButton.css("opacity", (env.isZoomableIn == false) ? disabledOpacity : normalOpacity);
            this.zoomOutButton.css("opacity", (env.isZoomableOut == false) ? disabledOpacity : normalOpacity);

            this.updateAggregationLevelLegend(lang.aggregationLevelLabel + env.aggregationLabel);

            this.updateLegend(env.mainView.colorDomainBreakPoints[0], env.mainView.colorDomainBreakPoints[1]);

            this.loadPossibleView();
        };

        this.updateLegend = function(firstValue, secondValue){
            var firstUnit, secondUnit;

            switch(env.showFilter){
                case "pls":
                    firstUnit = "%";
                    secondUnit = "%";
                    break;

                case "rtt":
                    if (firstValue >= 1000){
                        firstValue = (firstValue/1000).toFixed(1);
                        firstUnit = "s";
                    }else{
                        firstUnit = "ms";
                    }

                    if (secondValue >= 1000){
                        secondValue = (secondValue/1000).toFixed(1);
                        secondUnit = "s";
                    }else{
                        secondUnit = "ms";
                    }

                    break;

                case "prb":
                    firstUnit = "#p";
                    secondUnit = "#p";
                    break;
            }

            legendPercentages.last().html(firstValue);
            legendPercentages.first().html(secondValue);

            legendUnit.last().html(firstUnit);
            legendUnit.first().html(secondUnit);

            this.thresholdsPopup.legendPercentages.last().html(firstValue);
            this.thresholdsPopup.legendPercentages.first().html(secondValue);

            this.thresholdsPopup.legendUnit.last().html(firstUnit);
            this.thresholdsPopup.legendUnit.first().html(secondUnit);
        };

        this.updateAggregationLevelLegend = function(newLabel){
            var domElement;
            domElement = this.aggregationLevelLegend;

            if (domElement.text() != newLabel){
                domElement
                    .html(newLabel)
                    .toggleClass("updated");

                setTimeout(function(){
                    domElement.toggleClass("updated");
                }, config.aggregationLegendUpdatedDuration);
            }

        };

        this.addPossibleView = function(label, value){
            var checked;

            checked = (value == env.showFilter) ? 'selected="selected"' : '' ;
            this.viewSelect.append('<option value="' + value + '" ' + checked + '>' + label + '</option>');
        };

        this.removeAllViews = function(){
            this.viewSelect.html("");
        }


    };

    return ControlPanelView;
});
